!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	pressureCorrection.h	/^    Coord_Mat_double A; $/;"	m	class:PressureCorrect	access:private
Alpha	Staggered.h	/^	Tprec Alpha;$/;"	m	class:Staggered	access:private
ApplyPlaneRotation	IML++/gmres.h	/^void ApplyPlaneRotation(Real &dx, Real &dy, Real &cs, Real &sn)$/;"	f	signature:(Real &dx, Real &dy, Real &cs, Real &sn)
Array	Staggered.h	/^	inline void Init_Boundary(typeDim<Zone>(),Array<Tprec,2> );$/;"	m	class:Staggered	access:public
AxisXtoCell	MathCore.h	/^Array<real,2> AxisXtoCell(const Array<real,2>&, const Array<real,2>&);$/;"	p	signature:(const Array<real,2>&, const Array<real,2>&)
AxisYtoCell	MathCore.h	/^Array<real,2> AxisYtoCell(const Array<real,2>&, const Array<real,2>& );$/;"	p	signature:(const Array<real,2>&, const Array<real,2>& )
BiCG	IML++/bicg.h	/^BiCG(const Matrix &A, Vector &x, const Vector &b,$/;"	f	signature:(const Matrix &A, Vector &x, const Vector &b, const Preconditioner &M, int &max_iter, Real &tol)
BiCGSTAB	IML++/bicgstab.h	/^BiCGSTAB(const Matrix &A, Vector &x, const Vector &b,$/;"	f	signature:(const Matrix &A, Vector &x, const Vector &b, const Preconditioner &M, int &max_iter, Real &tol)
CG	IML++/cg.h	/^CG(const Matrix &A, Vector &x, const Vector &b,$/;"	f	signature:(const Matrix &A, Vector &x, const Vector &b, const Preconditioner &M, int &max_iter, Real &tol)
CGS	IML++/cgs.h	/^CGS(const Matrix &A, Vector &x, const Vector &b,$/;"	f	signature:(const Matrix &A, Vector &x, const Vector &b, const Preconditioner &M, int &max_iter, Real &tol)
CHEBY	IML++/cheby.h	/^CHEBY(const Matrix &A, Vector &x, const Vector &b,$/;"	f	signature:(const Matrix &A, Vector &x, const Vector &b, const Preconditioner &M, int &max_iter, Real &tol, Type eigmin, Type eigmax)
Cell	Staggered.h	/^	inline Array<Tprec,2> Cell();$/;"	p	class:Staggered	access:public	signature:()
Cell	Staggered.h	/^inline Array<Tprec,2>Interpolation<Tprec,Zone>::Cell()$/;"	f	class:Interpolation	signature:()
CompCol_ILUPreconditioner_double	SparseLib++/ilupre_double.h	/^  CompCol_ILUPreconditioner_double(const CompCol_Mat_double &A);$/;"	p	class:CompCol_ILUPreconditioner_double	access:public	signature:(const CompCol_Mat_double &A)
CompCol_ILUPreconditioner_double	SparseLib++/ilupre_double.h	/^class CompCol_ILUPreconditioner_double {$/;"	c
CompCol_ILUPreconditioner_double::CompCol_ILUPreconditioner_double	SparseLib++/ilupre_double.h	/^  CompCol_ILUPreconditioner_double(const CompCol_Mat_double &A);$/;"	p	class:CompCol_ILUPreconditioner_double	access:public	signature:(const CompCol_Mat_double &A)
CompCol_ILUPreconditioner_double::dim_	SparseLib++/ilupre_double.h	/^  int dim_[2];$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
CompCol_ILUPreconditioner_double::l_colptr_	SparseLib++/ilupre_double.h	/^  VECTOR_int    l_colptr_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
CompCol_ILUPreconditioner_double::l_nz_	SparseLib++/ilupre_double.h	/^  int l_nz_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
CompCol_ILUPreconditioner_double::l_rowind_	SparseLib++/ilupre_double.h	/^  VECTOR_int    l_rowind_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
CompCol_ILUPreconditioner_double::l_val_	SparseLib++/ilupre_double.h	/^  VECTOR_double l_val_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
CompCol_ILUPreconditioner_double::solve	SparseLib++/ilupre_double.h	/^  VECTOR_double     solve(const VECTOR_double &x) const;$/;"	p	class:CompCol_ILUPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
CompCol_ILUPreconditioner_double::trans_solve	SparseLib++/ilupre_double.h	/^  VECTOR_double     trans_solve(const VECTOR_double &x) const;$/;"	p	class:CompCol_ILUPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
CompCol_ILUPreconditioner_double::u_colptr_	SparseLib++/ilupre_double.h	/^  VECTOR_int    u_colptr_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
CompCol_ILUPreconditioner_double::u_nz_	SparseLib++/ilupre_double.h	/^  int u_nz_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
CompCol_ILUPreconditioner_double::u_rowind_	SparseLib++/ilupre_double.h	/^  VECTOR_int    u_rowind_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
CompCol_ILUPreconditioner_double::u_val_	SparseLib++/ilupre_double.h	/^  VECTOR_double u_val_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
CompCol_ILUPreconditioner_double::~CompCol_ILUPreconditioner_double	SparseLib++/ilupre_double.h	/^  ~CompCol_ILUPreconditioner_double(void){};$/;"	f	class:CompCol_ILUPreconditioner_double	access:public	signature:(void)
CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(const CompCol_Mat_double &S);$/;"	p	class:CompCol_Mat_double	access:public	signature:(const CompCol_Mat_double &S)
CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(const CompRow_Mat_double &R);$/;"	p	class:CompCol_Mat_double	access:public	signature:(const CompRow_Mat_double &R)
CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(const Coord_Mat_double &CO);$/;"	p	class:CompCol_Mat_double	access:public	signature:(const Coord_Mat_double &CO)
CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(int M, int N, int nz, const VECTOR_double &val, $/;"	p	class:CompCol_Mat_double	access:public	signature:(int M, int N, int nz, const VECTOR_double &val, const VECTOR_int &r, const VECTOR_int &c, int base=0)
CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(int M, int N, int nz, double *val, int *r, $/;"	p	class:CompCol_Mat_double	access:public	signature:(int M, int N, int nz, double *val, int *r, int *c, int base=0)
CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(void);$/;"	p	class:CompCol_Mat_double	access:public	signature:(void)
CompCol_Mat_double	SparseLib++/compcol_double.h	/^class CompCol_Mat_double {$/;"	c
CompCol_Mat_double::CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(const CompCol_Mat_double &S);$/;"	p	class:CompCol_Mat_double	access:public	signature:(const CompCol_Mat_double &S)
CompCol_Mat_double::CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(const CompRow_Mat_double &R);$/;"	p	class:CompCol_Mat_double	access:public	signature:(const CompRow_Mat_double &R)
CompCol_Mat_double::CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(const Coord_Mat_double &CO);$/;"	p	class:CompCol_Mat_double	access:public	signature:(const Coord_Mat_double &CO)
CompCol_Mat_double::CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(int M, int N, int nz, const VECTOR_double &val, $/;"	p	class:CompCol_Mat_double	access:public	signature:(int M, int N, int nz, const VECTOR_double &val, const VECTOR_int &r, const VECTOR_int &c, int base=0)
CompCol_Mat_double::CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(int M, int N, int nz, double *val, int *r, $/;"	p	class:CompCol_Mat_double	access:public	signature:(int M, int N, int nz, double *val, int *r, int *c, int base=0)
CompCol_Mat_double::CompCol_Mat_double	SparseLib++/compcol_double.h	/^       CompCol_Mat_double(void);$/;"	p	class:CompCol_Mat_double	access:public	signature:(void)
CompCol_Mat_double::NumNonzeros	SparseLib++/compcol_double.h	/^       int          NumNonzeros() const {return nz_;};$/;"	f	class:CompCol_Mat_double	access:public	signature:() const
CompCol_Mat_double::base	SparseLib++/compcol_double.h	/^       int          base() const {return base_;}$/;"	f	class:CompCol_Mat_double	access:public	signature:() const
CompCol_Mat_double::base_	SparseLib++/compcol_double.h	/^       int base_;                 \/\/ index base: offset of first element$/;"	m	class:CompCol_Mat_double	access:private
CompCol_Mat_double::col_ptr	SparseLib++/compcol_double.h	/^       const int&         col_ptr(int i) const { return colptr_(i);}$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i) const
CompCol_Mat_double::col_ptr	SparseLib++/compcol_double.h	/^       int&         col_ptr(int i) { return colptr_(i);}$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i)
CompCol_Mat_double::colptr_	SparseLib++/compcol_double.h	/^       VECTOR_int    colptr_;    \/\/ col_ptr (dim_[1]+1 elements)$/;"	m	class:CompCol_Mat_double	access:private
CompCol_Mat_double::dim	SparseLib++/compcol_double.h	/^       int          dim(int i) const {return dim_[i];};$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i) const
CompCol_Mat_double::dim_	SparseLib++/compcol_double.h	/^       int dim_[2];               \/\/ number of rows, cols$/;"	m	class:CompCol_Mat_double	access:private
CompCol_Mat_double::newsize	SparseLib++/compcol_double.h	/^       CompCol_Mat_double& newsize(int M, int N, int nz);$/;"	p	class:CompCol_Mat_double	access:public	signature:(int M, int N, int nz)
CompCol_Mat_double::nz_	SparseLib++/compcol_double.h	/^       int nz_;                   \/\/ number of nonzeros$/;"	m	class:CompCol_Mat_double	access:private
CompCol_Mat_double::operator ()	SparseLib++/compcol_double.h	/^       double       operator() (int i, int j) const;               $/;"	p	class:CompCol_Mat_double	access:public	signature:(int i, int j) const
CompCol_Mat_double::operator *	SparseLib++/compcol_double.h	/^       VECTOR_double operator*(const VECTOR_double &x) const;$/;"	p	class:CompCol_Mat_double	access:public	signature:(const VECTOR_double &x) const
CompCol_Mat_double::operator =	SparseLib++/compcol_double.h	/^       CompCol_Mat_double& operator=(const CompCol_Mat_double &C);$/;"	p	class:CompCol_Mat_double	access:public	signature:(const CompCol_Mat_double &C)
CompCol_Mat_double::row_ind	SparseLib++/compcol_double.h	/^       const int&         row_ind(int i) const { return rowind_(i); }$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i) const
CompCol_Mat_double::row_ind	SparseLib++/compcol_double.h	/^       int&         row_ind(int i) { return rowind_(i); }$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i)
CompCol_Mat_double::rowind_	SparseLib++/compcol_double.h	/^       VECTOR_int    rowind_;    \/\/ row_ind (nz_ elements)$/;"	m	class:CompCol_Mat_double	access:private
CompCol_Mat_double::set	SparseLib++/compcol_double.h	/^       double&      set(int i, int j);               $/;"	p	class:CompCol_Mat_double	access:public	signature:(int i, int j)
CompCol_Mat_double::size	SparseLib++/compcol_double.h	/^       int          size(int i) const {return dim_[i];};$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i) const
CompCol_Mat_double::trans_mult	SparseLib++/compcol_double.h	/^       VECTOR_double trans_mult(const VECTOR_double &x) const;$/;"	p	class:CompCol_Mat_double	access:public	signature:(const VECTOR_double &x) const
CompCol_Mat_double::val	SparseLib++/compcol_double.h	/^       const double&      val(int i) const { return val_(i); }$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i) const
CompCol_Mat_double::val	SparseLib++/compcol_double.h	/^       double&      val(int i) { return val_(i); }$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i)
CompCol_Mat_double::val_	SparseLib++/compcol_double.h	/^       VECTOR_double     val_;       \/\/ data values (nz_ elements)$/;"	m	class:CompCol_Mat_double	access:private
CompCol_Mat_double::~CompCol_Mat_double	SparseLib++/compcol_double.h	/^      ~CompCol_Mat_double() {};$/;"	f	class:CompCol_Mat_double	access:public	signature:()
CompCol_Mat_double_H	SparseLib++/compcol_double.h	37;"	d
CompRow_ILUPreconditioner_double	SparseLib++/ilupre_double.h	/^  CompRow_ILUPreconditioner_double(const CompRow_Mat_double &A);$/;"	p	class:CompRow_ILUPreconditioner_double	access:public	signature:(const CompRow_Mat_double &A)
CompRow_ILUPreconditioner_double	SparseLib++/ilupre_double.h	/^class CompRow_ILUPreconditioner_double {$/;"	c
CompRow_ILUPreconditioner_double::CompRow_ILUPreconditioner_double	SparseLib++/ilupre_double.h	/^  CompRow_ILUPreconditioner_double(const CompRow_Mat_double &A);$/;"	p	class:CompRow_ILUPreconditioner_double	access:public	signature:(const CompRow_Mat_double &A)
CompRow_ILUPreconditioner_double::dim_	SparseLib++/ilupre_double.h	/^  int dim_[2];$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
CompRow_ILUPreconditioner_double::l_colind_	SparseLib++/ilupre_double.h	/^  VECTOR_int    l_colind_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
CompRow_ILUPreconditioner_double::l_nz_	SparseLib++/ilupre_double.h	/^  int l_nz_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
CompRow_ILUPreconditioner_double::l_rowptr_	SparseLib++/ilupre_double.h	/^  VECTOR_int    l_rowptr_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
CompRow_ILUPreconditioner_double::l_val_	SparseLib++/ilupre_double.h	/^  VECTOR_double l_val_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
CompRow_ILUPreconditioner_double::solve	SparseLib++/ilupre_double.h	/^  VECTOR_double     solve(const VECTOR_double &x) const;$/;"	p	class:CompRow_ILUPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
CompRow_ILUPreconditioner_double::trans_solve	SparseLib++/ilupre_double.h	/^  VECTOR_double     trans_solve(const VECTOR_double &x) const;$/;"	p	class:CompRow_ILUPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
CompRow_ILUPreconditioner_double::u_colind_	SparseLib++/ilupre_double.h	/^  VECTOR_int    u_colind_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
CompRow_ILUPreconditioner_double::u_nz_	SparseLib++/ilupre_double.h	/^  int u_nz_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
CompRow_ILUPreconditioner_double::u_rowptr_	SparseLib++/ilupre_double.h	/^  VECTOR_int    u_rowptr_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
CompRow_ILUPreconditioner_double::u_val_	SparseLib++/ilupre_double.h	/^  VECTOR_double u_val_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
CompRow_ILUPreconditioner_double::~CompRow_ILUPreconditioner_double	SparseLib++/ilupre_double.h	/^  ~CompRow_ILUPreconditioner_double(void){};$/;"	f	class:CompRow_ILUPreconditioner_double	access:public	signature:(void)
CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(const CompCol_Mat_double &C);$/;"	p	class:CompRow_Mat_double	access:public	signature:(const CompCol_Mat_double &C)
CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(const CompRow_Mat_double &S);$/;"	p	class:CompRow_Mat_double	access:public	signature:(const CompRow_Mat_double &S)
CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(const Coord_Mat_double &CO);$/;"	p	class:CompRow_Mat_double	access:public	signature:(const Coord_Mat_double &CO)
CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(int M, int N, int nz, const VECTOR_double &val, $/;"	p	class:CompRow_Mat_double	access:public	signature:(int M, int N, int nz, const VECTOR_double &val, const VECTOR_int &r, const VECTOR_int &c, int base=0)
CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(int M, int N, int nz, double *val, int *r, $/;"	p	class:CompRow_Mat_double	access:public	signature:(int M, int N, int nz, double *val, int *r, int *c, int base=0)
CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(void);$/;"	p	class:CompRow_Mat_double	access:public	signature:(void)
CompRow_Mat_double	SparseLib++/comprow_double.h	/^class CompRow_Mat_double {$/;"	c
CompRow_Mat_double::CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(const CompCol_Mat_double &C);$/;"	p	class:CompRow_Mat_double	access:public	signature:(const CompCol_Mat_double &C)
CompRow_Mat_double::CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(const CompRow_Mat_double &S);$/;"	p	class:CompRow_Mat_double	access:public	signature:(const CompRow_Mat_double &S)
CompRow_Mat_double::CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(const Coord_Mat_double &CO);$/;"	p	class:CompRow_Mat_double	access:public	signature:(const Coord_Mat_double &CO)
CompRow_Mat_double::CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(int M, int N, int nz, const VECTOR_double &val, $/;"	p	class:CompRow_Mat_double	access:public	signature:(int M, int N, int nz, const VECTOR_double &val, const VECTOR_int &r, const VECTOR_int &c, int base=0)
CompRow_Mat_double::CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(int M, int N, int nz, double *val, int *r, $/;"	p	class:CompRow_Mat_double	access:public	signature:(int M, int N, int nz, double *val, int *r, int *c, int base=0)
CompRow_Mat_double::CompRow_Mat_double	SparseLib++/comprow_double.h	/^       CompRow_Mat_double(void);$/;"	p	class:CompRow_Mat_double	access:public	signature:(void)
CompRow_Mat_double::NumNonzeros	SparseLib++/comprow_double.h	/^       int          NumNonzeros() const {return nz_;};$/;"	f	class:CompRow_Mat_double	access:public	signature:() const
CompRow_Mat_double::base	SparseLib++/comprow_double.h	/^       int          base() const {return base_;}$/;"	f	class:CompRow_Mat_double	access:public	signature:() const
CompRow_Mat_double::base_	SparseLib++/comprow_double.h	/^       int base_;                 \/\/ index base: offset of first element$/;"	m	class:CompRow_Mat_double	access:private
CompRow_Mat_double::col_ind	SparseLib++/comprow_double.h	/^       const int&         col_ind(int i) const { return colind_(i);}$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i) const
CompRow_Mat_double::col_ind	SparseLib++/comprow_double.h	/^       int&         col_ind(int i) { return colind_(i);}$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i)
CompRow_Mat_double::colind_	SparseLib++/comprow_double.h	/^       VECTOR_int    colind_;    \/\/ col_ind  (nz_ elements)$/;"	m	class:CompRow_Mat_double	access:private
CompRow_Mat_double::dim	SparseLib++/comprow_double.h	/^       int          dim(int i) const {return dim_[i];};$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i) const
CompRow_Mat_double::dim_	SparseLib++/comprow_double.h	/^       int dim_[2];               \/\/ number of rows, cols$/;"	m	class:CompRow_Mat_double	access:private
CompRow_Mat_double::newsize	SparseLib++/comprow_double.h	/^       CompRow_Mat_double& newsize(int M, int N, int nz);$/;"	p	class:CompRow_Mat_double	access:public	signature:(int M, int N, int nz)
CompRow_Mat_double::nz_	SparseLib++/comprow_double.h	/^       int nz_;                   \/\/ number of nonzeros$/;"	m	class:CompRow_Mat_double	access:private
CompRow_Mat_double::operator ()	SparseLib++/comprow_double.h	/^       double       operator() (int i, int j) const;        $/;"	p	class:CompRow_Mat_double	access:public	signature:(int i, int j) const
CompRow_Mat_double::operator *	SparseLib++/comprow_double.h	/^       VECTOR_double operator*(const VECTOR_double &x) const;$/;"	p	class:CompRow_Mat_double	access:public	signature:(const VECTOR_double &x) const
CompRow_Mat_double::operator =	SparseLib++/comprow_double.h	/^       CompRow_Mat_double& operator=(const CompRow_Mat_double &R);$/;"	p	class:CompRow_Mat_double	access:public	signature:(const CompRow_Mat_double &R)
CompRow_Mat_double::row_ptr	SparseLib++/comprow_double.h	/^       const int&         row_ptr(int i) const { return rowptr_(i); }$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i) const
CompRow_Mat_double::row_ptr	SparseLib++/comprow_double.h	/^       int&         row_ptr(int i) { return rowptr_(i); }$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i)
CompRow_Mat_double::rowptr_	SparseLib++/comprow_double.h	/^       VECTOR_int    rowptr_;    \/\/ row_ptr (dim_[0]+1 elements)$/;"	m	class:CompRow_Mat_double	access:private
CompRow_Mat_double::set	SparseLib++/comprow_double.h	/^       double&      set(int i, int j);$/;"	p	class:CompRow_Mat_double	access:public	signature:(int i, int j)
CompRow_Mat_double::size	SparseLib++/comprow_double.h	/^       int          size(int i) const {return dim_[i];};$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i) const
CompRow_Mat_double::trans_mult	SparseLib++/comprow_double.h	/^       VECTOR_double trans_mult(const VECTOR_double &x) const;$/;"	p	class:CompRow_Mat_double	access:public	signature:(const VECTOR_double &x) const
CompRow_Mat_double::val	SparseLib++/comprow_double.h	/^       const double&      val(int i) const { return val_(i); }$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i) const
CompRow_Mat_double::val	SparseLib++/comprow_double.h	/^       double&      val(int i) { return val_(i); }$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i)
CompRow_Mat_double::val_	SparseLib++/comprow_double.h	/^       VECTOR_double val_;       \/\/ data values (nz_ elements)$/;"	m	class:CompRow_Mat_double	access:private
CompRow_Mat_double::~CompRow_Mat_double	SparseLib++/comprow_double.h	/^      ~CompRow_Mat_double() {};$/;"	f	class:CompRow_Mat_double	access:public	signature:()
CompRow_Mat_double_H	SparseLib++/comprow_double.h	37;"	d
Coord_Mat_double	SparseLib++/coord_double.h	/^       Coord_Mat_double(const CompCol_Mat_double &C);$/;"	p	class:Coord_Mat_double	access:public	signature:(const CompCol_Mat_double &C)
Coord_Mat_double	SparseLib++/coord_double.h	/^       Coord_Mat_double(const CompRow_Mat_double &R);$/;"	p	class:Coord_Mat_double	access:public	signature:(const CompRow_Mat_double &R)
Coord_Mat_double	SparseLib++/coord_double.h	/^       Coord_Mat_double(const Coord_Mat_double &S);$/;"	p	class:Coord_Mat_double	access:public	signature:(const Coord_Mat_double &S)
Coord_Mat_double	SparseLib++/coord_double.h	/^       Coord_Mat_double(int M, int N, int nz, double *val, int *r, $/;"	p	class:Coord_Mat_double	access:public	signature:(int M, int N, int nz, double *val, int *r, int *c, int base=0)
Coord_Mat_double	SparseLib++/coord_double.h	/^       Coord_Mat_double(void);$/;"	p	class:Coord_Mat_double	access:public	signature:(void)
Coord_Mat_double	SparseLib++/coord_double.h	/^class Coord_Mat_double {$/;"	c
Coord_Mat_double::Coord_Mat_double	SparseLib++/coord_double.h	/^       Coord_Mat_double(const CompCol_Mat_double &C);$/;"	p	class:Coord_Mat_double	access:public	signature:(const CompCol_Mat_double &C)
Coord_Mat_double::Coord_Mat_double	SparseLib++/coord_double.h	/^       Coord_Mat_double(const CompRow_Mat_double &R);$/;"	p	class:Coord_Mat_double	access:public	signature:(const CompRow_Mat_double &R)
Coord_Mat_double::Coord_Mat_double	SparseLib++/coord_double.h	/^       Coord_Mat_double(const Coord_Mat_double &S);$/;"	p	class:Coord_Mat_double	access:public	signature:(const Coord_Mat_double &S)
Coord_Mat_double::Coord_Mat_double	SparseLib++/coord_double.h	/^       Coord_Mat_double(int M, int N, int nz, double *val, int *r, $/;"	p	class:Coord_Mat_double	access:public	signature:(int M, int N, int nz, double *val, int *r, int *c, int base=0)
Coord_Mat_double::Coord_Mat_double	SparseLib++/coord_double.h	/^       Coord_Mat_double(void);$/;"	p	class:Coord_Mat_double	access:public	signature:(void)
Coord_Mat_double::NumNonzeros	SparseLib++/coord_double.h	/^       int          NumNonzeros() const {return nz_;};$/;"	f	class:Coord_Mat_double	access:public	signature:() const
Coord_Mat_double::base	SparseLib++/coord_double.h	/^       int          base() const {return base_;}$/;"	f	class:Coord_Mat_double	access:public	signature:() const
Coord_Mat_double::base_	SparseLib++/coord_double.h	/^       int base_;                 \/\/ index base:  not used....$/;"	m	class:Coord_Mat_double	access:private
Coord_Mat_double::col_ind	SparseLib++/coord_double.h	/^       const int&         col_ind(int i) const { return colind_(i);}$/;"	f	class:Coord_Mat_double	access:public	signature:(int i) const
Coord_Mat_double::col_ind	SparseLib++/coord_double.h	/^       int&         col_ind(int i) { return colind_(i);}$/;"	f	class:Coord_Mat_double	access:public	signature:(int i)
Coord_Mat_double::colind_	SparseLib++/coord_double.h	/^       VECTOR_int    colind_;    \/\/ col_ind (nz_ elements)$/;"	m	class:Coord_Mat_double	access:private
Coord_Mat_double::dim	SparseLib++/coord_double.h	/^       int          dim(int i) const {return dim_[i];};$/;"	f	class:Coord_Mat_double	access:public	signature:(int i) const
Coord_Mat_double::dim_	SparseLib++/coord_double.h	/^       int dim_[2];               \/\/ number of rows, cols$/;"	m	class:Coord_Mat_double	access:private
Coord_Mat_double::newsize	SparseLib++/coord_double.h	/^       Coord_Mat_double& newsize(int M, int N, int nz);$/;"	p	class:Coord_Mat_double	access:public	signature:(int M, int N, int nz)
Coord_Mat_double::nz_	SparseLib++/coord_double.h	/^       int nz_;                   \/\/ number of nonzeros$/;"	m	class:Coord_Mat_double	access:private
Coord_Mat_double::operator ()	SparseLib++/coord_double.h	/^       double       operator() (int i, int j) const;        $/;"	p	class:Coord_Mat_double	access:public	signature:(int i, int j) const
Coord_Mat_double::operator *	SparseLib++/coord_double.h	/^       VECTOR_double operator*(const VECTOR_double &x) const;$/;"	p	class:Coord_Mat_double	access:public	signature:(const VECTOR_double &x) const
Coord_Mat_double::operator =	SparseLib++/coord_double.h	/^       Coord_Mat_double& operator=(const Coord_Mat_double &C);$/;"	p	class:Coord_Mat_double	access:public	signature:(const Coord_Mat_double &C)
Coord_Mat_double::row_ind	SparseLib++/coord_double.h	/^       const int&         row_ind(int i) const { return rowind_(i); }$/;"	f	class:Coord_Mat_double	access:public	signature:(int i) const
Coord_Mat_double::row_ind	SparseLib++/coord_double.h	/^       int&         row_ind(int i) { return rowind_(i); }$/;"	f	class:Coord_Mat_double	access:public	signature:(int i)
Coord_Mat_double::rowind_	SparseLib++/coord_double.h	/^       VECTOR_int    rowind_;    \/\/ row_ind (nz_ elements)$/;"	m	class:Coord_Mat_double	access:private
Coord_Mat_double::set	SparseLib++/coord_double.h	/^       double&      set(int i, int j);$/;"	p	class:Coord_Mat_double	access:public	signature:(int i, int j)
Coord_Mat_double::size	SparseLib++/coord_double.h	/^       int          size(int i) const {return dim_[i];};$/;"	f	class:Coord_Mat_double	access:public	signature:(int i) const
Coord_Mat_double::trans_mult	SparseLib++/coord_double.h	/^       VECTOR_double trans_mult(const VECTOR_double &x) const;$/;"	p	class:Coord_Mat_double	access:public	signature:(const VECTOR_double &x) const
Coord_Mat_double::val	SparseLib++/coord_double.h	/^       const double&      val(int i) const { return val_(i); }$/;"	f	class:Coord_Mat_double	access:public	signature:(int i) const
Coord_Mat_double::val	SparseLib++/coord_double.h	/^       double&      val(int i) { return val_(i); }$/;"	f	class:Coord_Mat_double	access:public	signature:(int i)
Coord_Mat_double::val_	SparseLib++/coord_double.h	/^       VECTOR_double     val_;       \/\/ data values (nz_ elements)$/;"	m	class:Coord_Mat_double	access:private
Coord_Mat_double::~Coord_Mat_double	SparseLib++/coord_double.h	/^      ~Coord_Mat_double() {};$/;"	f	class:Coord_Mat_double	access:public	signature:()
Coord_Mat_double_H	SparseLib++/coord_double.h	40;"	d
D	pressureCorrection.h	/^    Array<real,2> D;$/;"	m	class:PressureCorrect	access:private
DIAGPRE_H	SparseLib++/diagpre_double.h	32;"	d
DiagPreconditioner_double	SparseLib++/diagpre_double.h	/^  DiagPreconditioner_double (const CompCol_Mat_double &);$/;"	p	class:DiagPreconditioner_double	access:public	signature:(const CompCol_Mat_double &)
DiagPreconditioner_double	SparseLib++/diagpre_double.h	/^  DiagPreconditioner_double (const CompRow_Mat_double &);$/;"	p	class:DiagPreconditioner_double	access:public	signature:(const CompRow_Mat_double &)
DiagPreconditioner_double	SparseLib++/diagpre_double.h	/^class DiagPreconditioner_double {$/;"	c
DiagPreconditioner_double::DiagPreconditioner_double	SparseLib++/diagpre_double.h	/^  DiagPreconditioner_double (const CompCol_Mat_double &);$/;"	p	class:DiagPreconditioner_double	access:public	signature:(const CompCol_Mat_double &)
DiagPreconditioner_double::DiagPreconditioner_double	SparseLib++/diagpre_double.h	/^  DiagPreconditioner_double (const CompRow_Mat_double &);$/;"	p	class:DiagPreconditioner_double	access:public	signature:(const CompRow_Mat_double &)
DiagPreconditioner_double::diag	SparseLib++/diagpre_double.h	/^  const double&         diag(int i) const { return diag_(i); }$/;"	f	class:DiagPreconditioner_double	access:public	signature:(int i) const
DiagPreconditioner_double::diag	SparseLib++/diagpre_double.h	/^  double&           diag(int i) { return diag_(i); }$/;"	f	class:DiagPreconditioner_double	access:public	signature:(int i)
DiagPreconditioner_double::diag_	SparseLib++/diagpre_double.h	/^  VECTOR_double diag_;$/;"	m	class:DiagPreconditioner_double	access:private
DiagPreconditioner_double::solve	SparseLib++/diagpre_double.h	/^  VECTOR_double solve (const VECTOR_double &x) const;$/;"	p	class:DiagPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
DiagPreconditioner_double::trans_solve	SparseLib++/diagpre_double.h	/^  VECTOR_double trans_solve (const VECTOR_double &x) const;$/;"	p	class:DiagPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
DiagPreconditioner_double::~DiagPreconditioner_double	SparseLib++/diagpre_double.h	/^  ~DiagPreconditioner_double (void) { };$/;"	f	class:DiagPreconditioner_double	access:public	signature:(void)
Div	pressureCorrection.h	/^    void Div();$/;"	p	class:PressureCorrect	access:public	signature:()
Dx	Mesh.h	/^    const real &Dx, &Dy; $/;"	m	class:MeshTool::MeshBlock	access:public
Dx_	Mesh.h	/^    real Dx_, Dy_; \/\/delta bettwen Cells X-Axis Y-Axis$/;"	m	class:MeshTool::MeshBlock	access:private
Dy	Mesh.h	/^    const real &Dx, &Dy; $/;"	m	class:MeshTool::MeshBlock	access:public
Dy_	Mesh.h	/^    real Dx_, Dy_; \/\/delta bettwen Cells X-Axis Y-Axis$/;"	m	class:MeshTool::MeshBlock	access:private
ExplicitDeriv	explicitDeriv.h	/^	ExplicitDeriv(const Array<real,2>& vel_u, $/;"	f	class:ExplicitDeriv	access:public	signature:(const Array<real,2>& vel_u, const Array<real,2>& vel_v, const Array<real,2>& press_p)
ExplicitDeriv	explicitDeriv.h	/^class ExplicitDeriv$/;"	c
ExplicitDeriv::ExplicitDeriv	explicitDeriv.h	/^	ExplicitDeriv(const Array<real,2>& vel_u, $/;"	f	class:ExplicitDeriv	access:public	signature:(const Array<real,2>& vel_u, const Array<real,2>& vel_v, const Array<real,2>& press_p)
ExplicitDeriv::Pressure	explicitDeriv.h	/^	const Array<real,2>& Pressure;    $/;"	m	class:ExplicitDeriv	access:private
ExplicitDeriv::XstaggToCenter	explicitDeriv.h	/^    Array<real,2> XstaggToCenter(const Array<real,2>& );$/;"	p	class:ExplicitDeriv	access:public	signature:(const Array<real,2>& )
ExplicitDeriv::YstaggToCenter	explicitDeriv.h	/^    Array<real,2> YstaggToCenter(const Array<real,2>& );$/;"	p	class:ExplicitDeriv	access:public	signature:(const Array<real,2>& )
ExplicitDeriv::u_Velocity	explicitDeriv.h	/^	const Array<real,2>& u_Velocity;$/;"	m	class:ExplicitDeriv	access:private
ExplicitDeriv::v_Velocity	explicitDeriv.h	/^	const Array<real,2>& v_Velocity;$/;"	m	class:ExplicitDeriv	access:private
F	Staggered.h	/^	Array<Tprec,2> &F,F_P , F_IJ;$/;"	m	class:Staggered	access:private
F77NAME	SparseLib++/spblas.h	37;"	d
F77NAME	SparseLib++/spblas.h	39;"	d
FMV_Vector	Mv++/mvvtp.h	/^        FMV_Vector( int n) : MV_Vector<TYPE>(n) {}$/;"	f	class:FMV_Vector	access:public	signature:( int n)
FMV_Vector	Mv++/mvvtp.h	/^class FMV_Vector : public MV_Vector<TYPE>$/;"	c	inherits:MV_Vector
FMV_Vector::FMV_Vector	Mv++/mvvtp.h	/^        FMV_Vector( int n) : MV_Vector<TYPE>(n) {}$/;"	f	class:FMV_Vector	access:public	signature:( int n)
FMV_Vector::operator =	Mv++/mvvtp.h	/^        FMV_Vector<TYPE>& operator=(const FMV_Vector<TYPE>& m);$/;"	p	class:FMV_Vector	access:public	signature:(const FMV_Vector<TYPE>& m)
FMV_Vector::operator =	Mv++/mvvtp.h	/^        FMV_Vector<TYPE>& operator=(const TYPE& m);$/;"	p	class:FMV_Vector	access:public	signature:(const TYPE& m)
FMV_Vector::operator =	Mv++/mvvtp.h	/^FMV_Vector<TYPE>& FMV_Vector<TYPE>::operator=( const FMV_Vector<TYPE>& m)$/;"	f	class:FMV_Vector	signature:( const FMV_Vector<TYPE>& m)
FMV_Vector::operator =	Mv++/mvvtp.h	/^FMV_Vector<TYPE>& FMV_Vector<TYPE>::operator=(const TYPE & m) $/;"	f	class:FMV_Vector	signature:(const TYPE & m)
F_IJ	Staggered.h	/^	Array<Tprec,2> &F,F_P , F_IJ;$/;"	m	class:Staggered	access:private
F_P	Staggered.h	/^	Array<Tprec,2> &F,F_P , F_IJ;$/;"	m	class:Staggered	access:private
FillPoisson	pressureCorrection.h	/^    void FillPoisson();$/;"	p	class:PressureCorrect	access:public	signature:()
GMRES	IML++/gmres.h	/^GMRES(const Operator &A, Vector &x, const Vector &b,$/;"	f	signature:(const Operator &A, Vector &x, const Vector &b, const Preconditioner &M, Matrix &H, int &m, int &max_iter, Real &tol)
GeneratePlaneRotation	IML++/gmres.h	/^void GeneratePlaneRotation(Real &dx, Real &dy, Real &cs, Real &sn)$/;"	f	signature:(Real &dx, Real &dy, Real &cs, Real &sn)
Grid	pressureCorrection.h	/^    const MeshTool::MeshBlock & Grid; $/;"	m	class:PressureCorrect	access:private
H	pressureCorrection.h	/^    MATRIX_double H;$/;"	m	class:PressureCorrect	access:private
I	Staggered.h	/^	inline Array<Tprec,2> I(Array<Tprec,2>& );$/;"	p	class:Staggered	access:public	signature:(Array<Tprec,2>& )
I	Staggered.h	/^inline Array<Tprec,2> Interpolation<Tprec,Zone>::I(Array<Tprec,2> &Base){$/;"	f	class:Interpolation	signature:(Array<Tprec,2> &Base)
ICPRE_H	SparseLib++/icpre_double.h	32;"	d
ICPreconditioner_double	SparseLib++/icpre_double.h	/^  ICPreconditioner_double(const CompCol_Mat_double &A);$/;"	p	class:ICPreconditioner_double	access:public	signature:(const CompCol_Mat_double &A)
ICPreconditioner_double	SparseLib++/icpre_double.h	/^  ICPreconditioner_double(const CompRow_Mat_double &A);$/;"	p	class:ICPreconditioner_double	access:public	signature:(const CompRow_Mat_double &A)
ICPreconditioner_double	SparseLib++/icpre_double.h	/^class ICPreconditioner_double {$/;"	c
ICPreconditioner_double::ICPreconditioner_double	SparseLib++/icpre_double.h	/^  ICPreconditioner_double(const CompCol_Mat_double &A);$/;"	p	class:ICPreconditioner_double	access:public	signature:(const CompCol_Mat_double &A)
ICPreconditioner_double::ICPreconditioner_double	SparseLib++/icpre_double.h	/^  ICPreconditioner_double(const CompRow_Mat_double &A);$/;"	p	class:ICPreconditioner_double	access:public	signature:(const CompRow_Mat_double &A)
ICPreconditioner_double::dim_	SparseLib++/icpre_double.h	/^  int dim_[2];$/;"	m	class:ICPreconditioner_double	access:private
ICPreconditioner_double::indx_	SparseLib++/icpre_double.h	/^  VECTOR_int    indx_;$/;"	m	class:ICPreconditioner_double	access:private
ICPreconditioner_double::nz_	SparseLib++/icpre_double.h	/^  int nz_;$/;"	m	class:ICPreconditioner_double	access:private
ICPreconditioner_double::pntr_	SparseLib++/icpre_double.h	/^  VECTOR_int    pntr_;$/;"	m	class:ICPreconditioner_double	access:private
ICPreconditioner_double::solve	SparseLib++/icpre_double.h	/^  VECTOR_double     solve(const VECTOR_double &x) const;$/;"	p	class:ICPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
ICPreconditioner_double::trans_solve	SparseLib++/icpre_double.h	/^  VECTOR_double     trans_solve(const VECTOR_double &x) const;$/;"	p	class:ICPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
ICPreconditioner_double::val_	SparseLib++/icpre_double.h	/^  VECTOR_double val_;$/;"	m	class:ICPreconditioner_double	access:private
ICPreconditioner_double::~ICPreconditioner_double	SparseLib++/icpre_double.h	/^  ~ICPreconditioner_double(void){};$/;"	f	class:ICPreconditioner_double	access:public	signature:(void)
IJ	Staggered.h	/^	inline Array<Tprec,2> IJ();$/;"	p	class:Staggered	access:public	signature:()
IJ	Staggered.h	/^inline Array<Tprec,2>Interpolation<Tprec,Zone>::IJ(){$/;"	f	class:Interpolation	signature:()
IJ_Ground	Staggered.h	/^	inline void IJ_Ground(typeDim<1>){$/;"	f	class:Staggered	access:private	signature:(typeDim<1>)
IJ_Ground	Staggered.h	/^	inline void IJ_Ground(typeDim<2>){$/;"	f	class:Staggered	access:private	signature:(typeDim<2>)
ILUPRE_H	SparseLib++/ilupre_double.h	32;"	d
IR	IML++/ir.h	/^IR(const Matrix &A, Vector &x, const Vector &b,$/;"	f	signature:(const Matrix &A, Vector &x, const Vector &b, const Preconditioner &M, int &max_iter, Real &tol)
Init_Boundary	Staggered.h	/^	inline void Init_Boundary(typeDim<1>,Array<Tprec,2> Unk_Var){$/;"	f	class:Staggered	access:private	signature:(typeDim<1>,Array<Tprec,2> Unk_Var)
Init_Boundary	Staggered.h	/^	inline void Init_Boundary(typeDim<2>,Array<Tprec,2> Unk_Var){$/;"	f	class:Staggered	access:private	signature:(typeDim<2>,Array<Tprec,2> Unk_Var)
Interpolation	Staggered.h	/^	Interpolation(Array<Tprec,2> &Atemp, Array<Tprec,2> Unk_Var)$/;"	f	class:Staggered	access:public	signature:(Array<Tprec,2> &Atemp, Array<Tprec,2> Unk_Var)
Interpolation::Cell	Staggered.h	/^inline Array<Tprec,2>Interpolation<Tprec,Zone>::Cell()$/;"	f	class:Interpolation	signature:()
Interpolation::I	Staggered.h	/^inline Array<Tprec,2> Interpolation<Tprec,Zone>::I(Array<Tprec,2> &Base){$/;"	f	class:Interpolation	signature:(Array<Tprec,2> &Base)
Interpolation::IJ	Staggered.h	/^inline Array<Tprec,2>Interpolation<Tprec,Zone>::IJ(){$/;"	f	class:Interpolation	signature:()
Interpolation::J	Staggered.h	/^inline Array<Tprec,2> Interpolation<Tprec,Zone>::J(Array<Tprec,2> &Base){$/;"	f	class:Interpolation	signature:(Array<Tprec,2> &Base)
Interpolation::P	Staggered.h	/^inline Array<Tprec,2>Interpolation<Tprec,Zone>::P(){$/;"	f	class:Interpolation	signature:()
Interpolation::Resizes	Staggered.h	/^inline void Interpolation<Tprec,Zone>::Resizes(int N){$/;"	f	class:Interpolation	signature:(int N)
Interpolation::computeInt	Staggered.h	/^inline void Interpolation<Tprec, Zone>::computeInt(Array<Tprec,1> &A ,Array<Tprec,1> &B){$/;"	f	class:Interpolation	signature:(Array<Tprec,1> &A ,Array<Tprec,1> &B)
Interpolation::getIJ	Staggered.h	/^inline Array<Tprec,2>Interpolation<Tprec,Zone>::getIJ(){$/;"	f	class:Interpolation	signature:()
Interpolation::getP	Staggered.h	/^inline Array<Tprec,2>Interpolation<Tprec,Zone>::getP(){$/;"	f	class:Interpolation	signature:()
Interpolation::setValues	Staggered.h	/^inline void Interpolation<Tprec, Zone>::setValues(){$/;"	f	class:Interpolation	signature:()
J	Staggered.h	/^	inline Array<Tprec,2> J(Array<Tprec,2>& );$/;"	p	class:Staggered	access:public	signature:(Array<Tprec,2>& )
J	Staggered.h	/^inline Array<Tprec,2> Interpolation<Tprec,Zone>::J(Array<Tprec,2> &Base){$/;"	f	class:Interpolation	signature:(Array<Tprec,2> &Base)
MATRIX_COMPLEX	Mv++/vecdefs.h	45;"	d
MATRIX_H	Mv++/vecdefs.h	38;"	d
MATRIX_double	Mv++/vecdefs.h	39;"	d
MATRIX_float	Mv++/vecdefs.h	40;"	d
MATRIX_int	Mv++/vecdefs.h	41;"	d
MATRIX_ref	Mv++/vecdefs.h	42;"	d
MV_ColMat	Mv++/mvmtp.h	/^            MV_ColMat( int,  int); $/;"	p	class:MV_ColMat	access:public	signature:( int, int)
MV_ColMat	Mv++/mvmtp.h	/^            MV_ColMat();                             $/;"	p	class:MV_ColMat	access:public	signature:()
MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat( int,  int, const TYPE&);   $/;"	p	class:MV_ColMat	access:public	signature:( int, int, const TYPE&)
MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat(TYPE*,  int m,  int n);$/;"	p	class:MV_ColMat	access:public	signature:(TYPE*, int m, int n)
MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat(TYPE*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat	access:public	signature:(TYPE*, int m, int n, int lda)
MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat(TYPE*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat	access:public	signature:(TYPE*, int m, int n, int lda, Matrix_::ref_type i)
MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat(TYPE*,  int m,  int n, Matrix_::ref_type i);$/;"	p	class:MV_ColMat	access:public	signature:(TYPE*, int m, int n, Matrix_::ref_type i)
MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat(const MV_ColMat<TYPE>&); $/;"	p	class:MV_ColMat	access:public	signature:(const MV_ColMat<TYPE>&)
MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat( int m,  int n) : v_(m*n),$/;"	f	class:MV_ColMat	signature:( int m, int n)
MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat( int m,  int n, const TYPE &s) : v_(m*n),$/;"	f	class:MV_ColMat	signature:( int m, int n, const TYPE &s)
MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat()  : v_(), dim0_(0), dim1_(0) , lda_(0), ref_(0){}$/;"	f	class:MV_ColMat	signature:()
MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat(TYPE* d,  int m,  int n) :$/;"	f	class:MV_ColMat	signature:(TYPE* d, int m, int n)
MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat(TYPE* d,  int m,  int n, $/;"	f	class:MV_ColMat	signature:(TYPE* d, int m, int n, int lda)
MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat(const MV_ColMat<TYPE> & m) : $/;"	f	class:MV_ColMat	signature:(const MV_ColMat<TYPE> & m)
MV_ColMat	Mv++/mvmtp.h	/^class MV_ColMat$/;"	c
MV_ColMat	Mv++/mvmtp.h	/^inline MV_ColMat<TYPE>::MV_ColMat(TYPE* d,  int m,  int n, $/;"	f	class:MV_ColMat	signature:(TYPE* d, int m, int n, int lda, Matrix_::ref_type i)
MV_ColMat	Mv++/mvmtp.h	/^inline MV_ColMat<TYPE>::MV_ColMat(TYPE* d,  int m,  int n,$/;"	f	class:MV_ColMat	signature:(TYPE* d, int m, int n, Matrix_::ref_type i )
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^            MV_ColMat( int,  int); $/;"	p	class:MV_ColMat	access:public	signature:( int, int)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^            MV_ColMat();                             $/;"	p	class:MV_ColMat	access:public	signature:()
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat( int,  int, const TYPE&);   $/;"	p	class:MV_ColMat	access:public	signature:( int, int, const TYPE&)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat(TYPE*,  int m,  int n);$/;"	p	class:MV_ColMat	access:public	signature:(TYPE*, int m, int n)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat(TYPE*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat	access:public	signature:(TYPE*, int m, int n, int lda)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat(TYPE*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat	access:public	signature:(TYPE*, int m, int n, int lda, Matrix_::ref_type i)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat(TYPE*,  int m,  int n, Matrix_::ref_type i);$/;"	p	class:MV_ColMat	access:public	signature:(TYPE*, int m, int n, Matrix_::ref_type i)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^    MV_ColMat(const MV_ColMat<TYPE>&); $/;"	p	class:MV_ColMat	access:public	signature:(const MV_ColMat<TYPE>&)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat( int m,  int n) : v_(m*n),$/;"	f	class:MV_ColMat	signature:( int m, int n)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat( int m,  int n, const TYPE &s) : v_(m*n),$/;"	f	class:MV_ColMat	signature:( int m, int n, const TYPE &s)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat()  : v_(), dim0_(0), dim1_(0) , lda_(0), ref_(0){}$/;"	f	class:MV_ColMat	signature:()
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat(TYPE* d,  int m,  int n) :$/;"	f	class:MV_ColMat	signature:(TYPE* d, int m, int n)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat(TYPE* d,  int m,  int n, $/;"	f	class:MV_ColMat	signature:(TYPE* d, int m, int n, int lda)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::MV_ColMat(const MV_ColMat<TYPE> & m) : $/;"	f	class:MV_ColMat	signature:(const MV_ColMat<TYPE> & m)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^inline MV_ColMat<TYPE>::MV_ColMat(TYPE* d,  int m,  int n, $/;"	f	class:MV_ColMat	signature:(TYPE* d, int m, int n, int lda, Matrix_::ref_type i)
MV_ColMat::MV_ColMat	Mv++/mvmtp.h	/^inline MV_ColMat<TYPE>::MV_ColMat(TYPE* d,  int m,  int n,$/;"	f	class:MV_ColMat	signature:(TYPE* d, int m, int n, Matrix_::ref_type i )
MV_ColMat::dim0_	Mv++/mvmtp.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat	access:private
MV_ColMat::dim1_	Mv++/mvmtp.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat	access:private
MV_ColMat::lda_	Mv++/mvmtp.h	/^           int lda_;$/;"	m	class:MV_ColMat	access:private
MV_ColMat::newsize	Mv++/mvmtp.h	/^    MV_ColMat<TYPE>&        newsize( int,  int);$/;"	p	class:MV_ColMat	access:public	signature:( int, int)
MV_ColMat::newsize	Mv++/mvmtp.h	/^MV_ColMat<TYPE>& MV_ColMat<TYPE>::newsize( int M,  int N)$/;"	f	class:MV_ColMat	signature:( int M, int N)
MV_ColMat::operator ()	Mv++/mvmtp.h	/^    MV_ColMat<TYPE> operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
MV_ColMat::operator ()	Mv++/mvmtp.h	/^    const MV_ColMat<TYPE> operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
MV_ColMat::operator ()	Mv++/mvmtp.h	/^    inline TYPE&        operator()( int,  int); $/;"	p	class:MV_ColMat	access:public	signature:( int, int)
MV_ColMat::operator ()	Mv++/mvmtp.h	/^    inline const TYPE&  operator()( int,  int) const; $/;"	p	class:MV_ColMat	access:public	signature:( int, int) const
MV_ColMat::operator ()	Mv++/mvmtp.h	/^MV_ColMat<TYPE> MV_ColMat<TYPE>::operator()(const MV_VecIndex &I, const MV_VecIndex &J)$/;"	f	class:MV_ColMat	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
MV_ColMat::operator ()	Mv++/mvmtp.h	/^const MV_ColMat<TYPE> MV_ColMat<TYPE>::operator()(const MV_VecIndex &I, $/;"	f	class:MV_ColMat	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
MV_ColMat::operator ()	Mv++/mvmtp.h	/^inline TYPE& MV_ColMat<TYPE>::operator()( int i,  int j)$/;"	f	class:MV_ColMat	signature:( int i, int j)
MV_ColMat::operator ()	Mv++/mvmtp.h	/^inline const TYPE& MV_ColMat<TYPE>::operator()$/;"	f	class:MV_ColMat	signature:( int i, int j) const
MV_ColMat::operator <<	Mv++/mvmtp.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat<TYPE> &A);$/;"	p	class:MV_ColMat	access:friend	signature:(std::ostream &s, const MV_ColMat<TYPE> &A)
MV_ColMat::operator =	Mv++/mvmtp.h	/^    MV_ColMat<TYPE> & operator=(const MV_ColMat<TYPE>&);$/;"	p	class:MV_ColMat	access:public	signature:(const MV_ColMat<TYPE>&)
MV_ColMat::operator =	Mv++/mvmtp.h	/^    MV_ColMat<TYPE> & operator=(const TYPE&);$/;"	p	class:MV_ColMat	access:public	signature:(const TYPE&)
MV_ColMat::operator =	Mv++/mvmtp.h	/^MV_ColMat<TYPE>& MV_ColMat<TYPE>::operator=(const MV_ColMat<TYPE> & m) $/;"	f	class:MV_ColMat	signature:(const MV_ColMat<TYPE> & m)
MV_ColMat::operator =	Mv++/mvmtp.h	/^MV_ColMat<TYPE>& MV_ColMat<TYPE>::operator=(const TYPE & s) $/;"	f	class:MV_ColMat	signature:(const TYPE & s)
MV_ColMat::ref	Mv++/mvmtp.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat	access:public	signature:() const
MV_ColMat::ref_	Mv++/mvmtp.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat	access:private
MV_ColMat::size	Mv++/mvmtp.h	/^     int            size(int i) const; $/;"	p	class:MV_ColMat	access:public	signature:(int i) const
MV_ColMat::size	Mv++/mvmtp.h	/^ int MV_ColMat<TYPE>::size(int i) const $/;"	f	class:MV_ColMat	signature:(int i) const
MV_ColMat::v_	Mv++/mvmtp.h	/^           MV_Vector<TYPE> v_;$/;"	m	class:MV_ColMat	access:private
MV_ColMat::~MV_ColMat	Mv++/mvmtp.h	/^    ~MV_ColMat();                              $/;"	p	class:MV_ColMat	access:public	signature:()
MV_ColMat::~MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::~MV_ColMat() {}$/;"	f	class:MV_ColMat	signature:()
MV_ColMat_$TYPE	Mv++/mvmt.h	/^            MV_ColMat_$TYPE( int,  int); $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:( int, int)
MV_ColMat_$TYPE	Mv++/mvmt.h	/^            MV_ColMat_$TYPE();                             $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:()
MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE( int,  int, const $TYPE&);   $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:( int, int, const $TYPE&)
MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE($TYPE*,  int m,  int n);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:($TYPE*, int m, int n)
MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE($TYPE*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:($TYPE*, int m, int n, int lda)
MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE($TYPE*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:($TYPE*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE($TYPE*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:($TYPE*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE(MV_ColMat_$TYPE &A, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(MV_ColMat_$TYPE &A, MV_Matrix_::ref_type i)
MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE(const MV_ColMat_$TYPE&); $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(const MV_ColMat_$TYPE&)
MV_ColMat_$TYPE	Mv++/mvmt.h	/^class MV_ColMat_$TYPE$/;"	c
MV_ColMat_$TYPE	Mv++/mvmt.h	/^inline MV_ColMat_$TYPE::MV_ColMat_$TYPE( MV_ColMat_$TYPE &A, $/;"	f	class:MV_ColMat_$TYPE	signature:( MV_ColMat_$TYPE &A, MV_Matrix_::ref_type i )
MV_ColMat_$TYPE	Mv++/mvmt.h	/^inline MV_ColMat_$TYPE::MV_ColMat_$TYPE($TYPE* d,  int m,  int n,$/;"	f	class:MV_ColMat_$TYPE	signature:($TYPE* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_$TYPE	Mv++/mvmt.h	/^inline MV_ColMat_$TYPE::MV_ColMat_$TYPE($TYPE* d,  int m, $/;"	f	class:MV_ColMat_$TYPE	signature:($TYPE* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^            MV_ColMat_$TYPE( int,  int); $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:( int, int)
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^            MV_ColMat_$TYPE();                             $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:()
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE( int,  int, const $TYPE&);   $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:( int, int, const $TYPE&)
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE($TYPE*,  int m,  int n);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:($TYPE*, int m, int n)
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE($TYPE*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:($TYPE*, int m, int n, int lda)
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE($TYPE*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:($TYPE*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE($TYPE*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:($TYPE*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE(MV_ColMat_$TYPE &A, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(MV_ColMat_$TYPE &A, MV_Matrix_::ref_type i)
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^    MV_ColMat_$TYPE(const MV_ColMat_$TYPE&); $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(const MV_ColMat_$TYPE&)
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^inline MV_ColMat_$TYPE::MV_ColMat_$TYPE( MV_ColMat_$TYPE &A, $/;"	f	class:MV_ColMat_$TYPE	signature:( MV_ColMat_$TYPE &A, MV_Matrix_::ref_type i )
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^inline MV_ColMat_$TYPE::MV_ColMat_$TYPE($TYPE* d,  int m,  int n,$/;"	f	class:MV_ColMat_$TYPE	signature:($TYPE* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_$TYPE::MV_ColMat_$TYPE	Mv++/mvmt.h	/^inline MV_ColMat_$TYPE::MV_ColMat_$TYPE($TYPE* d,  int m, $/;"	f	class:MV_ColMat_$TYPE	signature:($TYPE* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_$TYPE::dim	Mv++/mvmt.h	/^     int            dim(int i) const; $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(int i) const
MV_ColMat_$TYPE::dim0_	Mv++/mvmt.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_$TYPE	access:private
MV_ColMat_$TYPE::dim1_	Mv++/mvmt.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_$TYPE	access:private
MV_ColMat_$TYPE::lda	Mv++/mvmt.h	/^     int            lda(void) const{ return lda_; }$/;"	f	class:MV_ColMat_$TYPE	access:public	signature:(void) const
MV_ColMat_$TYPE::lda_	Mv++/mvmt.h	/^           int lda_;$/;"	m	class:MV_ColMat_$TYPE	access:private
MV_ColMat_$TYPE::newsize	Mv++/mvmt.h	/^    MV_ColMat_$TYPE&        newsize( int,  int);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:( int, int)
MV_ColMat_$TYPE::operator ()	Mv++/mvmt.h	/^    MV_ColMat_$TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
MV_ColMat_$TYPE::operator ()	Mv++/mvmt.h	/^    const MV_ColMat_$TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
MV_ColMat_$TYPE::operator ()	Mv++/mvmt.h	/^    inline $TYPE&       operator()( int,  int); $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:( int, int)
MV_ColMat_$TYPE::operator ()	Mv++/mvmt.h	/^    inline const $TYPE& operator()( int,  int) const; $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:( int, int) const
MV_ColMat_$TYPE::operator ()	Mv++/mvmt.h	/^inline $TYPE& MV_ColMat_$TYPE::operator()( int i,  int j)$/;"	f	class:MV_ColMat_$TYPE	signature:( int i, int j)
MV_ColMat_$TYPE::operator ()	Mv++/mvmt.h	/^inline const $TYPE& MV_ColMat_$TYPE::operator()$/;"	f	class:MV_ColMat_$TYPE	signature:( int i, int j) const
MV_ColMat_$TYPE::operator <<	Mv++/mvmt.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_$TYPE &A);$/;"	p	class:MV_ColMat_$TYPE	access:friend	signature:(std::ostream &s, const MV_ColMat_$TYPE &A)
MV_ColMat_$TYPE::operator =	Mv++/mvmt.h	/^    MV_ColMat_$TYPE & operator=(const $TYPE&);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(const $TYPE&)
MV_ColMat_$TYPE::operator =	Mv++/mvmt.h	/^    MV_ColMat_$TYPE & operator=(const MV_ColMat_$TYPE&);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(const MV_ColMat_$TYPE&)
MV_ColMat_$TYPE::ref	Mv++/mvmt.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_$TYPE	access:public	signature:() const
MV_ColMat_$TYPE::ref_	Mv++/mvmt.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_$TYPE	access:private
MV_ColMat_$TYPE::size	Mv++/mvmt.h	/^     int            size(int i) const { return dim(i);} $/;"	f	class:MV_ColMat_$TYPE	access:public	signature:(int i) const
MV_ColMat_$TYPE::v_	Mv++/mvmt.h	/^           MV_Vector_$TYPE v_;$/;"	m	class:MV_ColMat_$TYPE	access:private
MV_ColMat_$TYPE::~MV_ColMat_$TYPE	Mv++/mvmt.h	/^    ~MV_ColMat_$TYPE();                              $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:()
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^            MV_ColMat_COMPLEX( int,  int); $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:( int, int)
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^            MV_ColMat_COMPLEX();                             $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:()
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX( int,  int, const COMPLEX&);   $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:( int, int, const COMPLEX&)
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(COMPLEX*,  int m,  int n);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(COMPLEX*, int m, int n)
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(COMPLEX*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(COMPLEX*, int m, int n, int lda)
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(COMPLEX*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(COMPLEX*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(COMPLEX*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(COMPLEX*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(MV_ColMat_COMPLEX &A, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(MV_ColMat_COMPLEX &A, MV_Matrix_::ref_type i)
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(const MV_ColMat_COMPLEX&); $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(const MV_ColMat_COMPLEX&)
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^class MV_ColMat_COMPLEX$/;"	c
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^inline MV_ColMat_COMPLEX::MV_ColMat_COMPLEX( MV_ColMat_COMPLEX &A, $/;"	f	class:MV_ColMat_COMPLEX	signature:( MV_ColMat_COMPLEX &A, MV_Matrix_::ref_type i )
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^inline MV_ColMat_COMPLEX::MV_ColMat_COMPLEX(COMPLEX* d,  int m,  int n,$/;"	f	class:MV_ColMat_COMPLEX	signature:(COMPLEX* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_COMPLEX	Mv++/mvmc.h	/^inline MV_ColMat_COMPLEX::MV_ColMat_COMPLEX(COMPLEX* d,  int m, $/;"	f	class:MV_ColMat_COMPLEX	signature:(COMPLEX* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^            MV_ColMat_COMPLEX( int,  int); $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:( int, int)
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^            MV_ColMat_COMPLEX();                             $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:()
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX( int,  int, const COMPLEX&);   $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:( int, int, const COMPLEX&)
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(COMPLEX*,  int m,  int n);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(COMPLEX*, int m, int n)
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(COMPLEX*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(COMPLEX*, int m, int n, int lda)
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(COMPLEX*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(COMPLEX*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(COMPLEX*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(COMPLEX*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(MV_ColMat_COMPLEX &A, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(MV_ColMat_COMPLEX &A, MV_Matrix_::ref_type i)
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX(const MV_ColMat_COMPLEX&); $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(const MV_ColMat_COMPLEX&)
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^inline MV_ColMat_COMPLEX::MV_ColMat_COMPLEX( MV_ColMat_COMPLEX &A, $/;"	f	class:MV_ColMat_COMPLEX	signature:( MV_ColMat_COMPLEX &A, MV_Matrix_::ref_type i )
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^inline MV_ColMat_COMPLEX::MV_ColMat_COMPLEX(COMPLEX* d,  int m,  int n,$/;"	f	class:MV_ColMat_COMPLEX	signature:(COMPLEX* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_COMPLEX::MV_ColMat_COMPLEX	Mv++/mvmc.h	/^inline MV_ColMat_COMPLEX::MV_ColMat_COMPLEX(COMPLEX* d,  int m, $/;"	f	class:MV_ColMat_COMPLEX	signature:(COMPLEX* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_COMPLEX::dim	Mv++/mvmc.h	/^     int            dim(int i) const; $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(int i) const
MV_ColMat_COMPLEX::dim0_	Mv++/mvmc.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_COMPLEX	access:private
MV_ColMat_COMPLEX::dim1_	Mv++/mvmc.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_COMPLEX	access:private
MV_ColMat_COMPLEX::lda	Mv++/mvmc.h	/^     int            lda(void) const{ return lda_; }$/;"	f	class:MV_ColMat_COMPLEX	access:public	signature:(void) const
MV_ColMat_COMPLEX::lda_	Mv++/mvmc.h	/^           int lda_;$/;"	m	class:MV_ColMat_COMPLEX	access:private
MV_ColMat_COMPLEX::newsize	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX&        newsize( int,  int);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:( int, int)
MV_ColMat_COMPLEX::operator ()	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
MV_ColMat_COMPLEX::operator ()	Mv++/mvmc.h	/^    const MV_ColMat_COMPLEX operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
MV_ColMat_COMPLEX::operator ()	Mv++/mvmc.h	/^    inline COMPLEX&       operator()( int,  int); $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:( int, int)
MV_ColMat_COMPLEX::operator ()	Mv++/mvmc.h	/^    inline const COMPLEX& operator()( int,  int) const; $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:( int, int) const
MV_ColMat_COMPLEX::operator ()	Mv++/mvmc.h	/^inline COMPLEX& MV_ColMat_COMPLEX::operator()( int i,  int j)$/;"	f	class:MV_ColMat_COMPLEX	signature:( int i, int j)
MV_ColMat_COMPLEX::operator ()	Mv++/mvmc.h	/^inline const COMPLEX& MV_ColMat_COMPLEX::operator()$/;"	f	class:MV_ColMat_COMPLEX	signature:( int i, int j) const
MV_ColMat_COMPLEX::operator <<	Mv++/mvmc.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_COMPLEX &A);$/;"	p	class:MV_ColMat_COMPLEX	access:friend	signature:(std::ostream &s, const MV_ColMat_COMPLEX &A)
MV_ColMat_COMPLEX::operator =	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX & operator=(const COMPLEX&);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(const COMPLEX&)
MV_ColMat_COMPLEX::operator =	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX & operator=(const MV_ColMat_COMPLEX&);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(const MV_ColMat_COMPLEX&)
MV_ColMat_COMPLEX::ref	Mv++/mvmc.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_COMPLEX	access:public	signature:() const
MV_ColMat_COMPLEX::ref_	Mv++/mvmc.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_COMPLEX	access:private
MV_ColMat_COMPLEX::size	Mv++/mvmc.h	/^     int            size(int i) const { return dim(i);} $/;"	f	class:MV_ColMat_COMPLEX	access:public	signature:(int i) const
MV_ColMat_COMPLEX::v_	Mv++/mvmc.h	/^           MV_Vector_COMPLEX v_;$/;"	m	class:MV_ColMat_COMPLEX	access:private
MV_ColMat_COMPLEX::~MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    ~MV_ColMat_COMPLEX();                              $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:()
MV_ColMat_TYPE	Mv++/tmvmat.h	/^            MV_ColMat_TYPE( int,  int); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:( int, int)
MV_ColMat_TYPE	Mv++/tmvmat.h	/^            MV_ColMat_TYPE();                             $/;"	p	class:MV_ColMat_TYPE	access:public	signature:()
MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE( int,  int, const TYPE&);   $/;"	p	class:MV_ColMat_TYPE	access:public	signature:( int, int, const TYPE&)
MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*,  int m,  int n);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, int m, int n)
MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, int m, int n, int lda)
MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE(const MV_ColMat_TYPE&); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_ColMat_TYPE&)
MV_ColMat_TYPE	Mv++/tmvmat.h	/^class MV_ColMat_TYPE$/;"	c
MV_ColMat_TYPE	Mv++/tmvmat.h	/^inline MV_ColMat_TYPE::MV_ColMat_TYPE(TYPE* d,  int m,  int n,$/;"	f	class:MV_ColMat_TYPE	signature:(TYPE* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_TYPE	Mv++/tmvmat.h	/^inline MV_ColMat_TYPE::MV_ColMat_TYPE(TYPE* d,  int m,  int n,$/;"	f	class:MV_ColMat_TYPE	signature:(TYPE* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^            MV_ColMat_TYPE();                             $/;"	p	class:MV_ColMat_TYPE	access:public	signature:()
MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^            MV_ColMat_TYPE(unsigned int, unsigned int); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(unsigned int, unsigned int)
MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*, unsigned int m, unsigned int n);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, unsigned int m, unsigned int n)
MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*, unsigned int m, unsigned int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, unsigned int m, unsigned int n, MV_Matrix_::ref_type i)
MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*, unsigned int m, unsigned int n, unsigned int lda);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, unsigned int m, unsigned int n, unsigned int lda)
MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*, unsigned int m, unsigned int n, unsigned int lda,$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, unsigned int m, unsigned int n, unsigned int lda, MV_Matrix_::ref_type i)
MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(const MV_ColMat_TYPE&); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_ColMat_TYPE&)
MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(unsigned int, unsigned int, const TYPE&);   $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(unsigned int, unsigned int, const TYPE&)
MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^class MV_ColMat_TYPE$/;"	c
MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^inline MV_ColMat_TYPE::MV_ColMat_TYPE(TYPE* d, unsigned int m, unsigned int n,$/;"	f	class:MV_ColMat_TYPE	signature:(TYPE* d, unsigned int m, unsigned int n, MV_Matrix_::ref_type i )
MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^inline MV_ColMat_TYPE::MV_ColMat_TYPE(TYPE* d, unsigned int m, unsigned int n,$/;"	f	class:MV_ColMat_TYPE	signature:(TYPE* d, unsigned int m, unsigned int n, unsigned int lda, MV_Matrix_::ref_type i)
MV_ColMat_TYPE::MV_ColMat_TYPE	Mv++/tmvmat.h	/^            MV_ColMat_TYPE( int,  int); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:( int, int)
MV_ColMat_TYPE::MV_ColMat_TYPE	Mv++/tmvmat.h	/^            MV_ColMat_TYPE();                             $/;"	p	class:MV_ColMat_TYPE	access:public	signature:()
MV_ColMat_TYPE::MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE( int,  int, const TYPE&);   $/;"	p	class:MV_ColMat_TYPE	access:public	signature:( int, int, const TYPE&)
MV_ColMat_TYPE::MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*,  int m,  int n);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, int m, int n)
MV_ColMat_TYPE::MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, int m, int n, int lda)
MV_ColMat_TYPE::MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_TYPE::MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_TYPE::MV_ColMat_TYPE	Mv++/tmvmat.h	/^    MV_ColMat_TYPE(const MV_ColMat_TYPE&); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_ColMat_TYPE&)
MV_ColMat_TYPE::MV_ColMat_TYPE	Mv++/tmvmat.h	/^inline MV_ColMat_TYPE::MV_ColMat_TYPE(TYPE* d,  int m,  int n,$/;"	f	class:MV_ColMat_TYPE	signature:(TYPE* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_TYPE::MV_ColMat_TYPE	Mv++/tmvmat.h	/^inline MV_ColMat_TYPE::MV_ColMat_TYPE(TYPE* d,  int m,  int n,$/;"	f	class:MV_ColMat_TYPE	signature:(TYPE* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_TYPE::MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^            MV_ColMat_TYPE();                             $/;"	p	class:MV_ColMat_TYPE	access:public	signature:()
MV_ColMat_TYPE::MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^            MV_ColMat_TYPE(unsigned int, unsigned int); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(unsigned int, unsigned int)
MV_ColMat_TYPE::MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*, unsigned int m, unsigned int n);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, unsigned int m, unsigned int n)
MV_ColMat_TYPE::MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*, unsigned int m, unsigned int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, unsigned int m, unsigned int n, MV_Matrix_::ref_type i)
MV_ColMat_TYPE::MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*, unsigned int m, unsigned int n, unsigned int lda);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, unsigned int m, unsigned int n, unsigned int lda)
MV_ColMat_TYPE::MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(TYPE*, unsigned int m, unsigned int n, unsigned int lda,$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(TYPE*, unsigned int m, unsigned int n, unsigned int lda, MV_Matrix_::ref_type i)
MV_ColMat_TYPE::MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(const MV_ColMat_TYPE&); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_ColMat_TYPE&)
MV_ColMat_TYPE::MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE(unsigned int, unsigned int, const TYPE&);   $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(unsigned int, unsigned int, const TYPE&)
MV_ColMat_TYPE::MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^inline MV_ColMat_TYPE::MV_ColMat_TYPE(TYPE* d, unsigned int m, unsigned int n,$/;"	f	class:MV_ColMat_TYPE	signature:(TYPE* d, unsigned int m, unsigned int n, MV_Matrix_::ref_type i )
MV_ColMat_TYPE::MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^inline MV_ColMat_TYPE::MV_ColMat_TYPE(TYPE* d, unsigned int m, unsigned int n,$/;"	f	class:MV_ColMat_TYPE	signature:(TYPE* d, unsigned int m, unsigned int n, unsigned int lda, MV_Matrix_::ref_type i)
MV_ColMat_TYPE::dim0_	Mv++/tmvmat.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_TYPE	access:private
MV_ColMat_TYPE::dim0_	SparseLib++/tmvmat.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_TYPE	access:private
MV_ColMat_TYPE::dim1_	Mv++/tmvmat.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_TYPE	access:private
MV_ColMat_TYPE::dim1_	SparseLib++/tmvmat.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_TYPE	access:private
MV_ColMat_TYPE::lda_	Mv++/tmvmat.h	/^           int lda_;$/;"	m	class:MV_ColMat_TYPE	access:private
MV_ColMat_TYPE::lda_	SparseLib++/tmvmat.h	/^           int lda_;$/;"	m	class:MV_ColMat_TYPE	access:private
MV_ColMat_TYPE::newsize	Mv++/tmvmat.h	/^    MV_ColMat_TYPE&         newsize( int,  int);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:( int, int)
MV_ColMat_TYPE::newsize	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE&         newsize(unsigned int, unsigned int);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(unsigned int, unsigned int)
MV_ColMat_TYPE::operator ()	Mv++/tmvmat.h	/^    MV_ColMat_TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
MV_ColMat_TYPE::operator ()	Mv++/tmvmat.h	/^    const MV_ColMat_TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
MV_ColMat_TYPE::operator ()	Mv++/tmvmat.h	/^    inline TYPE&        operator()( int,  int); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:( int, int)
MV_ColMat_TYPE::operator ()	Mv++/tmvmat.h	/^    inline const TYPE&  operator()( int,  int) const; $/;"	p	class:MV_ColMat_TYPE	access:public	signature:( int, int) const
MV_ColMat_TYPE::operator ()	Mv++/tmvmat.h	/^inline TYPE& MV_ColMat_TYPE::operator()( int i,  int j)$/;"	f	class:MV_ColMat_TYPE	signature:( int i, int j)
MV_ColMat_TYPE::operator ()	Mv++/tmvmat.h	/^inline const TYPE& MV_ColMat_TYPE::operator()$/;"	f	class:MV_ColMat_TYPE	signature:( int i, int j) const
MV_ColMat_TYPE::operator ()	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
MV_ColMat_TYPE::operator ()	SparseLib++/tmvmat.h	/^    const MV_ColMat_TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
MV_ColMat_TYPE::operator ()	SparseLib++/tmvmat.h	/^    inline TYPE&        operator()(unsigned int, unsigned int); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(unsigned int, unsigned int)
MV_ColMat_TYPE::operator ()	SparseLib++/tmvmat.h	/^    inline const TYPE&  operator()(unsigned int, unsigned int) const; $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(unsigned int, unsigned int) const
MV_ColMat_TYPE::operator ()	SparseLib++/tmvmat.h	/^inline TYPE& MV_ColMat_TYPE::operator()(unsigned int i, unsigned int j)$/;"	f	class:MV_ColMat_TYPE	signature:(unsigned int i, unsigned int j)
MV_ColMat_TYPE::operator ()	SparseLib++/tmvmat.h	/^inline const TYPE& MV_ColMat_TYPE::operator()$/;"	f	class:MV_ColMat_TYPE	signature:(unsigned int i, unsigned int j) const
MV_ColMat_TYPE::operator <<	Mv++/tmvmat.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_TYPE &A);$/;"	p	class:MV_ColMat_TYPE	access:friend	signature:(std::ostream &s, const MV_ColMat_TYPE &A)
MV_ColMat_TYPE::operator <<	SparseLib++/tmvmat.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_TYPE &A);$/;"	p	class:MV_ColMat_TYPE	access:friend	signature:(std::ostream &s, const MV_ColMat_TYPE &A)
MV_ColMat_TYPE::operator =	Mv++/tmvmat.h	/^    MV_ColMat_TYPE & operator=(const MV_ColMat_TYPE&);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_ColMat_TYPE&)
MV_ColMat_TYPE::operator =	Mv++/tmvmat.h	/^    MV_ColMat_TYPE & operator=(const TYPE&);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const TYPE&)
MV_ColMat_TYPE::operator =	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE & operator=(const MV_ColMat_TYPE&);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_ColMat_TYPE&)
MV_ColMat_TYPE::operator =	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE & operator=(const TYPE&);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const TYPE&)
MV_ColMat_TYPE::ref	Mv++/tmvmat.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_TYPE	access:public	signature:() const
MV_ColMat_TYPE::ref	SparseLib++/tmvmat.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_TYPE	access:public	signature:() const
MV_ColMat_TYPE::ref_	Mv++/tmvmat.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_TYPE	access:private
MV_ColMat_TYPE::ref_	SparseLib++/tmvmat.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_TYPE	access:private
MV_ColMat_TYPE::size	Mv++/tmvmat.h	/^     int            size(int i) const; $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(int i) const
MV_ColMat_TYPE::size	SparseLib++/tmvmat.h	/^    unsigned int            size(int i) const; $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(int i) const
MV_ColMat_TYPE::v_	Mv++/tmvmat.h	/^           MV_Vector_TYPE v_;$/;"	m	class:MV_ColMat_TYPE	access:private
MV_ColMat_TYPE::v_	SparseLib++/tmvmat.h	/^           MV_Vector_TYPE v_;$/;"	m	class:MV_ColMat_TYPE	access:private
MV_ColMat_TYPE::~MV_ColMat_TYPE	Mv++/tmvmat.h	/^    ~MV_ColMat_TYPE();                              $/;"	p	class:MV_ColMat_TYPE	access:public	signature:()
MV_ColMat_TYPE::~MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    ~MV_ColMat_TYPE();                              $/;"	p	class:MV_ColMat_TYPE	access:public	signature:()
MV_ColMat_double	Mv++/mvmd.h	/^            MV_ColMat_double( int,  int); $/;"	p	class:MV_ColMat_double	access:public	signature:( int, int)
MV_ColMat_double	Mv++/mvmd.h	/^            MV_ColMat_double();                             $/;"	p	class:MV_ColMat_double	access:public	signature:()
MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double( int,  int, const double&);   $/;"	p	class:MV_ColMat_double	access:public	signature:( int, int, const double&)
MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(MV_ColMat_double &A, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_double	access:public	signature:(MV_ColMat_double &A, MV_Matrix_::ref_type i)
MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(const MV_ColMat_double&); $/;"	p	class:MV_ColMat_double	access:public	signature:(const MV_ColMat_double&)
MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(double*,  int m,  int n);$/;"	p	class:MV_ColMat_double	access:public	signature:(double*, int m, int n)
MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(double*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_double	access:public	signature:(double*, int m, int n, int lda)
MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(double*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_double	access:public	signature:(double*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(double*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_double	access:public	signature:(double*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_double	Mv++/mvmd.h	/^class MV_ColMat_double$/;"	c
MV_ColMat_double	Mv++/mvmd.h	/^inline MV_ColMat_double::MV_ColMat_double( MV_ColMat_double &A, $/;"	f	class:MV_ColMat_double	signature:( MV_ColMat_double &A, MV_Matrix_::ref_type i )
MV_ColMat_double	Mv++/mvmd.h	/^inline MV_ColMat_double::MV_ColMat_double(double* d,  int m,  int n,$/;"	f	class:MV_ColMat_double	signature:(double* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_double	Mv++/mvmd.h	/^inline MV_ColMat_double::MV_ColMat_double(double* d,  int m, $/;"	f	class:MV_ColMat_double	signature:(double* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^            MV_ColMat_double( int,  int); $/;"	p	class:MV_ColMat_double	access:public	signature:( int, int)
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^            MV_ColMat_double();                             $/;"	p	class:MV_ColMat_double	access:public	signature:()
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double( int,  int, const double&);   $/;"	p	class:MV_ColMat_double	access:public	signature:( int, int, const double&)
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(MV_ColMat_double &A, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_double	access:public	signature:(MV_ColMat_double &A, MV_Matrix_::ref_type i)
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(const MV_ColMat_double&); $/;"	p	class:MV_ColMat_double	access:public	signature:(const MV_ColMat_double&)
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(double*,  int m,  int n);$/;"	p	class:MV_ColMat_double	access:public	signature:(double*, int m, int n)
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(double*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_double	access:public	signature:(double*, int m, int n, int lda)
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(double*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_double	access:public	signature:(double*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^    MV_ColMat_double(double*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_double	access:public	signature:(double*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^inline MV_ColMat_double::MV_ColMat_double( MV_ColMat_double &A, $/;"	f	class:MV_ColMat_double	signature:( MV_ColMat_double &A, MV_Matrix_::ref_type i )
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^inline MV_ColMat_double::MV_ColMat_double(double* d,  int m,  int n,$/;"	f	class:MV_ColMat_double	signature:(double* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_double::MV_ColMat_double	Mv++/mvmd.h	/^inline MV_ColMat_double::MV_ColMat_double(double* d,  int m, $/;"	f	class:MV_ColMat_double	signature:(double* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_double::dim	Mv++/mvmd.h	/^     int            dim(int i) const; $/;"	p	class:MV_ColMat_double	access:public	signature:(int i) const
MV_ColMat_double::dim0_	Mv++/mvmd.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_double	access:private
MV_ColMat_double::dim1_	Mv++/mvmd.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_double	access:private
MV_ColMat_double::lda	Mv++/mvmd.h	/^     int            lda(void) const{ return lda_; }$/;"	f	class:MV_ColMat_double	access:public	signature:(void) const
MV_ColMat_double::lda_	Mv++/mvmd.h	/^           int lda_;$/;"	m	class:MV_ColMat_double	access:private
MV_ColMat_double::newsize	Mv++/mvmd.h	/^    MV_ColMat_double&        newsize( int,  int);$/;"	p	class:MV_ColMat_double	access:public	signature:( int, int)
MV_ColMat_double::operator ()	Mv++/mvmd.h	/^    MV_ColMat_double operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_double	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
MV_ColMat_double::operator ()	Mv++/mvmd.h	/^    const MV_ColMat_double operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_double	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
MV_ColMat_double::operator ()	Mv++/mvmd.h	/^    inline const double& operator()( int,  int) const; $/;"	p	class:MV_ColMat_double	access:public	signature:( int, int) const
MV_ColMat_double::operator ()	Mv++/mvmd.h	/^    inline double&       operator()( int,  int); $/;"	p	class:MV_ColMat_double	access:public	signature:( int, int)
MV_ColMat_double::operator ()	Mv++/mvmd.h	/^inline const double& MV_ColMat_double::operator()$/;"	f	class:MV_ColMat_double	signature:( int i, int j) const
MV_ColMat_double::operator ()	Mv++/mvmd.h	/^inline double& MV_ColMat_double::operator()( int i,  int j)$/;"	f	class:MV_ColMat_double	signature:( int i, int j)
MV_ColMat_double::operator <<	Mv++/mvmd.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_double &A);$/;"	p	class:MV_ColMat_double	access:friend	signature:(std::ostream &s, const MV_ColMat_double &A)
MV_ColMat_double::operator =	Mv++/mvmd.h	/^    MV_ColMat_double & operator=(const MV_ColMat_double&);$/;"	p	class:MV_ColMat_double	access:public	signature:(const MV_ColMat_double&)
MV_ColMat_double::operator =	Mv++/mvmd.h	/^    MV_ColMat_double & operator=(const double&);$/;"	p	class:MV_ColMat_double	access:public	signature:(const double&)
MV_ColMat_double::ref	Mv++/mvmd.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_double	access:public	signature:() const
MV_ColMat_double::ref_	Mv++/mvmd.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_double	access:private
MV_ColMat_double::size	Mv++/mvmd.h	/^     int            size(int i) const { return dim(i);} $/;"	f	class:MV_ColMat_double	access:public	signature:(int i) const
MV_ColMat_double::v_	Mv++/mvmd.h	/^           MV_Vector_double v_;$/;"	m	class:MV_ColMat_double	access:private
MV_ColMat_double::~MV_ColMat_double	Mv++/mvmd.h	/^    ~MV_ColMat_double();                              $/;"	p	class:MV_ColMat_double	access:public	signature:()
MV_ColMat_float	Mv++/mvmf.h	/^            MV_ColMat_float( int,  int); $/;"	p	class:MV_ColMat_float	access:public	signature:( int, int)
MV_ColMat_float	Mv++/mvmf.h	/^            MV_ColMat_float();                             $/;"	p	class:MV_ColMat_float	access:public	signature:()
MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float( int,  int, const float&);   $/;"	p	class:MV_ColMat_float	access:public	signature:( int, int, const float&)
MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(MV_ColMat_float &A, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_float	access:public	signature:(MV_ColMat_float &A, MV_Matrix_::ref_type i)
MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(const MV_ColMat_float&); $/;"	p	class:MV_ColMat_float	access:public	signature:(const MV_ColMat_float&)
MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(float*,  int m,  int n);$/;"	p	class:MV_ColMat_float	access:public	signature:(float*, int m, int n)
MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(float*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_float	access:public	signature:(float*, int m, int n, int lda)
MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(float*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_float	access:public	signature:(float*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(float*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_float	access:public	signature:(float*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_float	Mv++/mvmf.h	/^class MV_ColMat_float$/;"	c
MV_ColMat_float	Mv++/mvmf.h	/^inline MV_ColMat_float::MV_ColMat_float( MV_ColMat_float &A, $/;"	f	class:MV_ColMat_float	signature:( MV_ColMat_float &A, MV_Matrix_::ref_type i )
MV_ColMat_float	Mv++/mvmf.h	/^inline MV_ColMat_float::MV_ColMat_float(float* d,  int m,  int n,$/;"	f	class:MV_ColMat_float	signature:(float* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_float	Mv++/mvmf.h	/^inline MV_ColMat_float::MV_ColMat_float(float* d,  int m, $/;"	f	class:MV_ColMat_float	signature:(float* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^            MV_ColMat_float( int,  int); $/;"	p	class:MV_ColMat_float	access:public	signature:( int, int)
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^            MV_ColMat_float();                             $/;"	p	class:MV_ColMat_float	access:public	signature:()
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float( int,  int, const float&);   $/;"	p	class:MV_ColMat_float	access:public	signature:( int, int, const float&)
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(MV_ColMat_float &A, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_float	access:public	signature:(MV_ColMat_float &A, MV_Matrix_::ref_type i)
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(const MV_ColMat_float&); $/;"	p	class:MV_ColMat_float	access:public	signature:(const MV_ColMat_float&)
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(float*,  int m,  int n);$/;"	p	class:MV_ColMat_float	access:public	signature:(float*, int m, int n)
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(float*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_float	access:public	signature:(float*, int m, int n, int lda)
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(float*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_float	access:public	signature:(float*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^    MV_ColMat_float(float*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_float	access:public	signature:(float*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^inline MV_ColMat_float::MV_ColMat_float( MV_ColMat_float &A, $/;"	f	class:MV_ColMat_float	signature:( MV_ColMat_float &A, MV_Matrix_::ref_type i )
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^inline MV_ColMat_float::MV_ColMat_float(float* d,  int m,  int n,$/;"	f	class:MV_ColMat_float	signature:(float* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_float::MV_ColMat_float	Mv++/mvmf.h	/^inline MV_ColMat_float::MV_ColMat_float(float* d,  int m, $/;"	f	class:MV_ColMat_float	signature:(float* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_float::dim	Mv++/mvmf.h	/^     int            dim(int i) const; $/;"	p	class:MV_ColMat_float	access:public	signature:(int i) const
MV_ColMat_float::dim0_	Mv++/mvmf.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_float	access:private
MV_ColMat_float::dim1_	Mv++/mvmf.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_float	access:private
MV_ColMat_float::lda	Mv++/mvmf.h	/^     int            lda(void) const{ return lda_; }$/;"	f	class:MV_ColMat_float	access:public	signature:(void) const
MV_ColMat_float::lda_	Mv++/mvmf.h	/^           int lda_;$/;"	m	class:MV_ColMat_float	access:private
MV_ColMat_float::newsize	Mv++/mvmf.h	/^    MV_ColMat_float&        newsize( int,  int);$/;"	p	class:MV_ColMat_float	access:public	signature:( int, int)
MV_ColMat_float::operator ()	Mv++/mvmf.h	/^    MV_ColMat_float operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_float	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
MV_ColMat_float::operator ()	Mv++/mvmf.h	/^    const MV_ColMat_float operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_float	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
MV_ColMat_float::operator ()	Mv++/mvmf.h	/^    inline const float& operator()( int,  int) const; $/;"	p	class:MV_ColMat_float	access:public	signature:( int, int) const
MV_ColMat_float::operator ()	Mv++/mvmf.h	/^    inline float&       operator()( int,  int); $/;"	p	class:MV_ColMat_float	access:public	signature:( int, int)
MV_ColMat_float::operator ()	Mv++/mvmf.h	/^inline const float& MV_ColMat_float::operator()$/;"	f	class:MV_ColMat_float	signature:( int i, int j) const
MV_ColMat_float::operator ()	Mv++/mvmf.h	/^inline float& MV_ColMat_float::operator()( int i,  int j)$/;"	f	class:MV_ColMat_float	signature:( int i, int j)
MV_ColMat_float::operator <<	Mv++/mvmf.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_float &A);$/;"	p	class:MV_ColMat_float	access:friend	signature:(std::ostream &s, const MV_ColMat_float &A)
MV_ColMat_float::operator =	Mv++/mvmf.h	/^    MV_ColMat_float & operator=(const MV_ColMat_float&);$/;"	p	class:MV_ColMat_float	access:public	signature:(const MV_ColMat_float&)
MV_ColMat_float::operator =	Mv++/mvmf.h	/^    MV_ColMat_float & operator=(const float&);$/;"	p	class:MV_ColMat_float	access:public	signature:(const float&)
MV_ColMat_float::ref	Mv++/mvmf.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_float	access:public	signature:() const
MV_ColMat_float::ref_	Mv++/mvmf.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_float	access:private
MV_ColMat_float::size	Mv++/mvmf.h	/^     int            size(int i) const { return dim(i);} $/;"	f	class:MV_ColMat_float	access:public	signature:(int i) const
MV_ColMat_float::v_	Mv++/mvmf.h	/^           MV_Vector_float v_;$/;"	m	class:MV_ColMat_float	access:private
MV_ColMat_float::~MV_ColMat_float	Mv++/mvmf.h	/^    ~MV_ColMat_float();                              $/;"	p	class:MV_ColMat_float	access:public	signature:()
MV_ColMat_int	Mv++/mvmi.h	/^            MV_ColMat_int( int,  int); $/;"	p	class:MV_ColMat_int	access:public	signature:( int, int)
MV_ColMat_int	Mv++/mvmi.h	/^            MV_ColMat_int();                             $/;"	p	class:MV_ColMat_int	access:public	signature:()
MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int( int,  int, const int&);   $/;"	p	class:MV_ColMat_int	access:public	signature:( int, int, const int&)
MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(MV_ColMat_int &A, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_int	access:public	signature:(MV_ColMat_int &A, MV_Matrix_::ref_type i)
MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(const MV_ColMat_int&); $/;"	p	class:MV_ColMat_int	access:public	signature:(const MV_ColMat_int&)
MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(int*,  int m,  int n);$/;"	p	class:MV_ColMat_int	access:public	signature:(int*, int m, int n)
MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(int*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_int	access:public	signature:(int*, int m, int n, int lda)
MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(int*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_int	access:public	signature:(int*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(int*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_int	access:public	signature:(int*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_int	Mv++/mvmi.h	/^class MV_ColMat_int$/;"	c
MV_ColMat_int	Mv++/mvmi.h	/^inline MV_ColMat_int::MV_ColMat_int( MV_ColMat_int &A, $/;"	f	class:MV_ColMat_int	signature:( MV_ColMat_int &A, MV_Matrix_::ref_type i )
MV_ColMat_int	Mv++/mvmi.h	/^inline MV_ColMat_int::MV_ColMat_int(int* d,  int m,  int n,$/;"	f	class:MV_ColMat_int	signature:(int* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_int	Mv++/mvmi.h	/^inline MV_ColMat_int::MV_ColMat_int(int* d,  int m, $/;"	f	class:MV_ColMat_int	signature:(int* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^            MV_ColMat_int( int,  int); $/;"	p	class:MV_ColMat_int	access:public	signature:( int, int)
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^            MV_ColMat_int();                             $/;"	p	class:MV_ColMat_int	access:public	signature:()
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int( int,  int, const int&);   $/;"	p	class:MV_ColMat_int	access:public	signature:( int, int, const int&)
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(MV_ColMat_int &A, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_int	access:public	signature:(MV_ColMat_int &A, MV_Matrix_::ref_type i)
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(const MV_ColMat_int&); $/;"	p	class:MV_ColMat_int	access:public	signature:(const MV_ColMat_int&)
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(int*,  int m,  int n);$/;"	p	class:MV_ColMat_int	access:public	signature:(int*, int m, int n)
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(int*,  int m,  int n,  int lda);$/;"	p	class:MV_ColMat_int	access:public	signature:(int*, int m, int n, int lda)
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(int*,  int m,  int n,  int lda,$/;"	p	class:MV_ColMat_int	access:public	signature:(int*, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^    MV_ColMat_int(int*,  int m,  int n, MV_Matrix_::ref_type i);$/;"	p	class:MV_ColMat_int	access:public	signature:(int*, int m, int n, MV_Matrix_::ref_type i)
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^inline MV_ColMat_int::MV_ColMat_int( MV_ColMat_int &A, $/;"	f	class:MV_ColMat_int	signature:( MV_ColMat_int &A, MV_Matrix_::ref_type i )
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^inline MV_ColMat_int::MV_ColMat_int(int* d,  int m,  int n,$/;"	f	class:MV_ColMat_int	signature:(int* d, int m, int n, int lda, MV_Matrix_::ref_type i)
MV_ColMat_int::MV_ColMat_int	Mv++/mvmi.h	/^inline MV_ColMat_int::MV_ColMat_int(int* d,  int m, $/;"	f	class:MV_ColMat_int	signature:(int* d, int m, int n, MV_Matrix_::ref_type i )
MV_ColMat_int::dim	Mv++/mvmi.h	/^     int            dim(int i) const; $/;"	p	class:MV_ColMat_int	access:public	signature:(int i) const
MV_ColMat_int::dim0_	Mv++/mvmi.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_int	access:private
MV_ColMat_int::dim1_	Mv++/mvmi.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_int	access:private
MV_ColMat_int::lda	Mv++/mvmi.h	/^     int            lda(void) const{ return lda_; }$/;"	f	class:MV_ColMat_int	access:public	signature:(void) const
MV_ColMat_int::lda_	Mv++/mvmi.h	/^           int lda_;$/;"	m	class:MV_ColMat_int	access:private
MV_ColMat_int::newsize	Mv++/mvmi.h	/^    MV_ColMat_int&      newsize( int,  int);$/;"	p	class:MV_ColMat_int	access:public	signature:( int, int)
MV_ColMat_int::operator ()	Mv++/mvmi.h	/^    MV_ColMat_int operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_int	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
MV_ColMat_int::operator ()	Mv++/mvmi.h	/^    const MV_ColMat_int operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_int	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
MV_ColMat_int::operator ()	Mv++/mvmi.h	/^    inline const int&   operator()( int,  int) const; $/;"	p	class:MV_ColMat_int	access:public	signature:( int, int) const
MV_ColMat_int::operator ()	Mv++/mvmi.h	/^    inline int&     operator()( int,  int); $/;"	p	class:MV_ColMat_int	access:public	signature:( int, int)
MV_ColMat_int::operator ()	Mv++/mvmi.h	/^inline const int& MV_ColMat_int::operator()$/;"	f	class:MV_ColMat_int	signature:( int i, int j) const
MV_ColMat_int::operator ()	Mv++/mvmi.h	/^inline int& MV_ColMat_int::operator()( int i,  int j)$/;"	f	class:MV_ColMat_int	signature:( int i, int j)
MV_ColMat_int::operator <<	Mv++/mvmi.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_int &A);$/;"	p	class:MV_ColMat_int	access:friend	signature:(std::ostream &s, const MV_ColMat_int &A)
MV_ColMat_int::operator =	Mv++/mvmi.h	/^    MV_ColMat_int & operator=(const MV_ColMat_int&);$/;"	p	class:MV_ColMat_int	access:public	signature:(const MV_ColMat_int&)
MV_ColMat_int::operator =	Mv++/mvmi.h	/^    MV_ColMat_int & operator=(const int&);$/;"	p	class:MV_ColMat_int	access:public	signature:(const int&)
MV_ColMat_int::ref	Mv++/mvmi.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_int	access:public	signature:() const
MV_ColMat_int::ref_	Mv++/mvmi.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_int	access:private
MV_ColMat_int::size	Mv++/mvmi.h	/^     int            size(int i) const { return dim(i);} $/;"	f	class:MV_ColMat_int	access:public	signature:(int i) const
MV_ColMat_int::v_	Mv++/mvmi.h	/^           MV_Vector_int v_;$/;"	m	class:MV_ColMat_int	access:private
MV_ColMat_int::~MV_ColMat_int	Mv++/mvmi.h	/^    ~MV_ColMat_int();                              $/;"	p	class:MV_ColMat_int	access:public	signature:()
MV_Matrix_	Mv++/mvmrf.h	/^struct MV_Matrix_$/;"	s
MV_Matrix_::ref	Mv++/mvmrf.h	/^    enum ref_type  { ref = 1};$/;"	e	enum:MV_Matrix_::ref_type
MV_Matrix_::ref_type	Mv++/mvmrf.h	/^    enum ref_type  { ref = 1};$/;"	g	struct:MV_Matrix_	access:public
MV_VecIndex	Mv++/mvvind.h	/^        MV_VecIndex( int i1) :start_(i1), end_(i1), all_(0) {}$/;"	f	class:MV_VecIndex	access:public	signature:( int i1)
MV_VecIndex	Mv++/mvvind.h	/^        MV_VecIndex( int i1,  int i2): start_(i1), end_(i2),$/;"	f	class:MV_VecIndex	access:public	signature:( int i1, int i2)
MV_VecIndex	Mv++/mvvind.h	/^        MV_VecIndex() : start_(0), end_(0), all_(1) {}$/;"	f	class:MV_VecIndex	access:public	signature:()
MV_VecIndex	Mv++/mvvind.h	/^        MV_VecIndex(const MV_VecIndex &s) : start_(s.start_), end_(s.end_), $/;"	f	class:MV_VecIndex	access:public	signature:(const MV_VecIndex &s)
MV_VecIndex	Mv++/mvvind.h	/^class MV_VecIndex$/;"	c
MV_VecIndex::MV_VecIndex	Mv++/mvvind.h	/^        MV_VecIndex( int i1) :start_(i1), end_(i1), all_(0) {}$/;"	f	class:MV_VecIndex	access:public	signature:( int i1)
MV_VecIndex::MV_VecIndex	Mv++/mvvind.h	/^        MV_VecIndex( int i1,  int i2): start_(i1), end_(i2),$/;"	f	class:MV_VecIndex	access:public	signature:( int i1, int i2)
MV_VecIndex::MV_VecIndex	Mv++/mvvind.h	/^        MV_VecIndex() : start_(0), end_(0), all_(1) {}$/;"	f	class:MV_VecIndex	access:public	signature:()
MV_VecIndex::MV_VecIndex	Mv++/mvvind.h	/^        MV_VecIndex(const MV_VecIndex &s) : start_(s.start_), end_(s.end_), $/;"	f	class:MV_VecIndex	access:public	signature:(const MV_VecIndex &s)
MV_VecIndex::all	Mv++/mvvind.h	/^        int all() const { return all_; }$/;"	f	class:MV_VecIndex	access:public	signature:() const
MV_VecIndex::all_	Mv++/mvvind.h	/^            char all_;      \/\/ true if this index refers to the complete$/;"	m	class:MV_VecIndex	access:private
MV_VecIndex::end	Mv++/mvvind.h	/^        int end() const { return (all_ ==1) ? 0 : end_;}$/;"	f	class:MV_VecIndex	access:public	signature:() const
MV_VecIndex::end_	Mv++/mvvind.h	/^             int end_;       $/;"	m	class:MV_VecIndex	access:private
MV_VecIndex::length	Mv++/mvvind.h	/^        int length() const { $/;"	f	class:MV_VecIndex	access:public	signature:() const
MV_VecIndex::operator +	Mv++/mvvind.h	/^        MV_VecIndex operator+(int i)$/;"	f	class:MV_VecIndex	access:public	signature:(int i)
MV_VecIndex::operator +=	Mv++/mvvind.h	/^        MV_VecIndex& operator+=(int i)$/;"	f	class:MV_VecIndex	access:public	signature:(int i)
MV_VecIndex::operator -	Mv++/mvvind.h	/^        MV_VecIndex operator-(int i)$/;"	f	class:MV_VecIndex	access:public	signature:(int i)
MV_VecIndex::operator -=	Mv++/mvvind.h	/^        MV_VecIndex& operator-=(int i)$/;"	f	class:MV_VecIndex	access:public	signature:(int i)
MV_VecIndex::operator =	Mv++/mvvind.h	/^        MV_VecIndex& operator=(const MV_VecIndex& I)$/;"	f	class:MV_VecIndex	access:public	signature:(const MV_VecIndex& I)
MV_VecIndex::start	Mv++/mvvind.h	/^        int start() const { return (all_==1) ? 0 : start_;}$/;"	f	class:MV_VecIndex	access:public	signature:() const
MV_VecIndex::start_	Mv++/mvvind.h	/^             int start_;$/;"	m	class:MV_VecIndex	access:private
MV_Vector	Mv++/mvvtp.h	/^    MV_Vector( int);                             $/;"	p	class:MV_Vector	access:public	signature:( int)
MV_Vector	Mv++/mvvtp.h	/^    MV_Vector( int, const TYPE&);   $/;"	p	class:MV_Vector	access:public	signature:( int, const TYPE&)
MV_Vector	Mv++/mvvtp.h	/^    MV_Vector();                             $/;"	p	class:MV_Vector	access:public	signature:()
MV_Vector	Mv++/mvvtp.h	/^    MV_Vector(TYPE*,  int);     $/;"	p	class:MV_Vector	access:public	signature:(TYPE*, int)
MV_Vector	Mv++/mvvtp.h	/^    MV_Vector(TYPE*,  int, MV_Vector_::ref_type i); $/;"	p	class:MV_Vector	access:public	signature:(TYPE*, int, MV_Vector_::ref_type i)
MV_Vector	Mv++/mvvtp.h	/^    MV_Vector(const MV_Vector<TYPE>&); $/;"	p	class:MV_Vector	access:public	signature:(const MV_Vector<TYPE>&)
MV_Vector	Mv++/mvvtp.h	/^    MV_Vector(const TYPE*,  int);       $/;"	p	class:MV_Vector	access:public	signature:(const TYPE*, int)
MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector( int n) : p_(new TYPE[n]), dim_(n), $/;"	f	class:MV_Vector	signature:( int n)
MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector( int n, const TYPE& v) : $/;"	f	class:MV_Vector	signature:( int n, const TYPE& v)
MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector()  : p_(0), dim_(0) , ref_(0){};$/;"	f	class:MV_Vector	signature:()
MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector(TYPE* d,  int n) : p_(new TYPE[n]), $/;"	f	class:MV_Vector	signature:(TYPE* d, int n)
MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector(TYPE* d,  int n, MV_Vector_::ref_type i) : $/;"	f	class:MV_Vector	signature:(TYPE* d, int n, MV_Vector_::ref_type i)
MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector(const MV_Vector<TYPE> & m) : p_(new TYPE[m.dim_]), $/;"	f	class:MV_Vector	signature:(const MV_Vector<TYPE> & m)
MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector(const TYPE* d,  int n) : p_(new TYPE[n]), $/;"	f	class:MV_Vector	signature:(const TYPE* d, int n)
MV_Vector	Mv++/mvvtp.h	/^class MV_Vector$/;"	c
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^    MV_Vector( int);                             $/;"	p	class:MV_Vector	access:public	signature:( int)
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^    MV_Vector( int, const TYPE&);   $/;"	p	class:MV_Vector	access:public	signature:( int, const TYPE&)
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^    MV_Vector();                             $/;"	p	class:MV_Vector	access:public	signature:()
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^    MV_Vector(TYPE*,  int);     $/;"	p	class:MV_Vector	access:public	signature:(TYPE*, int)
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^    MV_Vector(TYPE*,  int, MV_Vector_::ref_type i); $/;"	p	class:MV_Vector	access:public	signature:(TYPE*, int, MV_Vector_::ref_type i)
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^    MV_Vector(const MV_Vector<TYPE>&); $/;"	p	class:MV_Vector	access:public	signature:(const MV_Vector<TYPE>&)
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^    MV_Vector(const TYPE*,  int);       $/;"	p	class:MV_Vector	access:public	signature:(const TYPE*, int)
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector( int n) : p_(new TYPE[n]), dim_(n), $/;"	f	class:MV_Vector	signature:( int n)
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector( int n, const TYPE& v) : $/;"	f	class:MV_Vector	signature:( int n, const TYPE& v)
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector()  : p_(0), dim_(0) , ref_(0){};$/;"	f	class:MV_Vector	signature:()
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector(TYPE* d,  int n) : p_(new TYPE[n]), $/;"	f	class:MV_Vector	signature:(TYPE* d, int n)
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector(TYPE* d,  int n, MV_Vector_::ref_type i) : $/;"	f	class:MV_Vector	signature:(TYPE* d, int n, MV_Vector_::ref_type i)
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector(const MV_Vector<TYPE> & m) : p_(new TYPE[m.dim_]), $/;"	f	class:MV_Vector	signature:(const MV_Vector<TYPE> & m)
MV_Vector::MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::MV_Vector(const TYPE* d,  int n) : p_(new TYPE[n]), $/;"	f	class:MV_Vector	signature:(const TYPE* d, int n)
MV_Vector::dim_	Mv++/mvvtp.h	/^            int dim_;$/;"	m	class:MV_Vector	access:protected
MV_Vector::newsize	Mv++/mvvtp.h	/^            MV_Vector<TYPE> & newsize( int );$/;"	p	class:MV_Vector	access:public	signature:( int )
MV_Vector::newsize	Mv++/mvvtp.h	/^MV_Vector<TYPE>& MV_Vector<TYPE>::newsize( int n)$/;"	f	class:MV_Vector	signature:( int n)
MV_Vector::null	Mv++/mvvtp.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector	access:public	signature:() const
MV_Vector::operator ()	Mv++/mvvtp.h	/^    inline            TYPE&     operator()( int i)$/;"	f	class:MV_Vector	access:public	signature:( int i)
MV_Vector::operator ()	Mv++/mvvtp.h	/^    inline  const  TYPE&    operator()( int i) const $/;"	f	class:MV_Vector	access:public	signature:( int i) const
MV_Vector::operator ()	Mv++/mvvtp.h	/^    inline MV_Vector<TYPE> operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector	access:public	signature:(const MV_VecIndex &I)
MV_Vector::operator ()	Mv++/mvvtp.h	/^    inline MV_Vector<TYPE> operator()(void);$/;"	p	class:MV_Vector	access:public	signature:(void)
MV_Vector::operator ()	Mv++/mvvtp.h	/^    inline const MV_Vector<TYPE> operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector	access:public	signature:(const MV_VecIndex &I) const
MV_Vector::operator ()	Mv++/mvvtp.h	/^    inline const MV_Vector<TYPE> operator()(void) const;$/;"	p	class:MV_Vector	access:public	signature:(void) const
MV_Vector::operator ()	Mv++/mvvtp.h	/^MV_Vector<TYPE> MV_Vector<TYPE>::operator()(const MV_VecIndex &I) $/;"	f	class:MV_Vector	signature:(const MV_VecIndex &I)
MV_Vector::operator ()	Mv++/mvvtp.h	/^MV_Vector<TYPE> MV_Vector<TYPE>::operator()(void)$/;"	f	class:MV_Vector	signature:(void)
MV_Vector::operator ()	Mv++/mvvtp.h	/^const MV_Vector<TYPE> MV_Vector<TYPE>::operator()(const MV_VecIndex &I) const$/;"	f	class:MV_Vector	signature:(const MV_VecIndex &I) const
MV_Vector::operator ()	Mv++/mvvtp.h	/^const MV_Vector<TYPE> MV_Vector<TYPE>::operator()(void) const$/;"	f	class:MV_Vector	signature:(void) const
MV_Vector::operator =	Mv++/mvvtp.h	/^            MV_Vector<TYPE> & operator=(const MV_Vector<TYPE>&);$/;"	p	class:MV_Vector	access:public	signature:(const MV_Vector<TYPE>&)
MV_Vector::operator =	Mv++/mvvtp.h	/^            MV_Vector<TYPE> & operator=(const TYPE&);$/;"	p	class:MV_Vector	access:public	signature:(const TYPE&)
MV_Vector::operator =	Mv++/mvvtp.h	/^MV_Vector<TYPE>& MV_Vector<TYPE>::operator=(const MV_Vector<TYPE> & m) $/;"	f	class:MV_Vector	signature:(const MV_Vector<TYPE> & m)
MV_Vector::operator =	Mv++/mvvtp.h	/^MV_Vector<TYPE>& MV_Vector<TYPE>::operator=(const TYPE & m) $/;"	f	class:MV_Vector	signature:(const TYPE & m)
MV_Vector::operator []	Mv++/mvvtp.h	/^    inline        TYPE&     operator[]( int i)$/;"	f	class:MV_Vector	access:public	signature:( int i)
MV_Vector::operator []	Mv++/mvvtp.h	/^    inline      const  TYPE&    operator[]( int i) const $/;"	f	class:MV_Vector	access:public	signature:( int i) const
MV_Vector::p_	Mv++/mvvtp.h	/^           TYPE *p_;$/;"	m	class:MV_Vector	access:protected
MV_Vector::ref	Mv++/mvvtp.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector	access:public	signature:() const
MV_Vector::ref_	Mv++/mvvtp.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector	access:protected
MV_Vector::size	Mv++/mvvtp.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector	access:public	signature:() const
MV_Vector::~MV_Vector	Mv++/mvvtp.h	/^    ~MV_Vector();                              $/;"	p	class:MV_Vector	access:public	signature:()
MV_Vector::~MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::~MV_Vector()$/;"	f	class:MV_Vector	signature:()
MV_Vector_	Mv++/mvvrf.h	/^struct MV_Vector_$/;"	s
MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE( int);                             $/;"	p	class:MV_Vector_$TYPE	access:public	signature:( int)
MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE( int, const $TYPE&);   $/;"	p	class:MV_Vector_$TYPE	access:public	signature:( int, const $TYPE&)
MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE($TYPE* d,  int N, MV_Vector_::ref_type i) :$/;"	f	class:MV_Vector_$TYPE	access:public	signature:($TYPE* d, int N, MV_Vector_::ref_type i)
MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE($TYPE*,  int);      $/;"	p	class:MV_Vector_$TYPE	access:public	signature:($TYPE*, int)
MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE();                             $/;"	p	class:MV_Vector_$TYPE	access:public	signature:()
MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE(const $TYPE*,  int);        $/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const $TYPE*, int)
MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE(const MV_Vector_$TYPE &); $/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const MV_Vector_$TYPE &)
MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE(const MV_Vector_$TYPE &V, MV_Vector_::ref_type i)   :$/;"	f	class:MV_Vector_$TYPE	access:public	signature:(const MV_Vector_$TYPE &V, MV_Vector_::ref_type i)
MV_Vector_$TYPE	Mv++/mvvt.h	/^class MV_Vector_$TYPE$/;"	c
MV_Vector_$TYPE::MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE( int);                             $/;"	p	class:MV_Vector_$TYPE	access:public	signature:( int)
MV_Vector_$TYPE::MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE( int, const $TYPE&);   $/;"	p	class:MV_Vector_$TYPE	access:public	signature:( int, const $TYPE&)
MV_Vector_$TYPE::MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE($TYPE* d,  int N, MV_Vector_::ref_type i) :$/;"	f	class:MV_Vector_$TYPE	access:public	signature:($TYPE* d, int N, MV_Vector_::ref_type i)
MV_Vector_$TYPE::MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE($TYPE*,  int);      $/;"	p	class:MV_Vector_$TYPE	access:public	signature:($TYPE*, int)
MV_Vector_$TYPE::MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE();                             $/;"	p	class:MV_Vector_$TYPE	access:public	signature:()
MV_Vector_$TYPE::MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE(const $TYPE*,  int);        $/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const $TYPE*, int)
MV_Vector_$TYPE::MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE(const MV_Vector_$TYPE &); $/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const MV_Vector_$TYPE &)
MV_Vector_$TYPE::MV_Vector_$TYPE	Mv++/mvvt.h	/^    MV_Vector_$TYPE(const MV_Vector_$TYPE &V, MV_Vector_::ref_type i)   :$/;"	f	class:MV_Vector_$TYPE	access:public	signature:(const MV_Vector_$TYPE &V, MV_Vector_::ref_type i)
MV_Vector_$TYPE::dim	Mv++/mvvt.h	/^    inline  int             dim() const { return dim_;}$/;"	f	class:MV_Vector_$TYPE	access:public	signature:() const
MV_Vector_$TYPE::dim_	Mv++/mvvt.h	/^            int dim_;$/;"	m	class:MV_Vector_$TYPE	access:protected
MV_Vector_$TYPE::newsize	Mv++/mvvt.h	/^            MV_Vector_$TYPE & newsize( int );$/;"	p	class:MV_Vector_$TYPE	access:public	signature:( int )
MV_Vector_$TYPE::null	Mv++/mvvt.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_$TYPE	access:public	signature:() const
MV_Vector_$TYPE::operator ()	Mv++/mvvt.h	/^    $TYPE&      operator()( int i)$/;"	f	class:MV_Vector_$TYPE	access:public	signature:( int i)
MV_Vector_$TYPE::operator ()	Mv++/mvvt.h	/^    MV_Vector_$TYPE operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const MV_VecIndex &I)
MV_Vector_$TYPE::operator ()	Mv++/mvvt.h	/^    MV_Vector_$TYPE operator()(void);$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(void)
MV_Vector_$TYPE::operator ()	Mv++/mvvt.h	/^    const  $TYPE&       operator()( int i) const $/;"	f	class:MV_Vector_$TYPE	access:public	signature:( int i) const
MV_Vector_$TYPE::operator ()	Mv++/mvvt.h	/^    const MV_Vector_$TYPE operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const MV_VecIndex &I) const
MV_Vector_$TYPE::operator ()	Mv++/mvvt.h	/^    const MV_Vector_$TYPE operator()(void) const;$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(void) const
MV_Vector_$TYPE::operator <<	Mv++/mvvt.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_Vector_$TYPE &A);$/;"	p	class:MV_Vector_$TYPE	access:friend	signature:(std::ostream &s, const MV_Vector_$TYPE &A)
MV_Vector_$TYPE::operator =	Mv++/mvvt.h	/^    MV_Vector_$TYPE & operator=(const $TYPE&);$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const $TYPE&)
MV_Vector_$TYPE::operator =	Mv++/mvvt.h	/^    MV_Vector_$TYPE & operator=(const MV_Vector_$TYPE&);$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const MV_Vector_$TYPE&)
MV_Vector_$TYPE::operator []	Mv++/mvvt.h	/^    $TYPE&      operator[]( int i)$/;"	f	class:MV_Vector_$TYPE	access:public	signature:( int i)
MV_Vector_$TYPE::operator []	Mv++/mvvt.h	/^    const  $TYPE&       operator[]( int i) const $/;"	f	class:MV_Vector_$TYPE	access:public	signature:( int i) const
MV_Vector_$TYPE::p_	Mv++/mvvt.h	/^           $TYPE *p_;$/;"	m	class:MV_Vector_$TYPE	access:protected
MV_Vector_$TYPE::ref	Mv++/mvvt.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_$TYPE	access:public	signature:() const
MV_Vector_$TYPE::ref_	Mv++/mvvt.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_$TYPE	access:protected
MV_Vector_$TYPE::size	Mv++/mvvt.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector_$TYPE	access:public	signature:() const
MV_Vector_$TYPE::~MV_Vector_$TYPE	Mv++/mvvt.h	/^    ~MV_Vector_$TYPE();                              $/;"	p	class:MV_Vector_$TYPE	access:public	signature:()
MV_Vector_::ref	Mv++/mvvrf.h	/^    enum ref_type  { ref = 1};$/;"	e	enum:MV_Vector_::ref_type
MV_Vector_::ref_type	Mv++/mvvrf.h	/^    enum ref_type  { ref = 1};$/;"	g	struct:MV_Vector_	access:public
MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX( int);                             $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:( int)
MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX( int, const COMPLEX&);   $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:( int, const COMPLEX&)
MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX();                             $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:()
MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX(COMPLEX* d,  int N, MV_Vector_::ref_type i) :$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:(COMPLEX* d, int N, MV_Vector_::ref_type i)
MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX(COMPLEX*,  int);      $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(COMPLEX*, int)
MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX(const COMPLEX*,  int);        $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const COMPLEX*, int)
MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX(const MV_Vector_COMPLEX &); $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const MV_Vector_COMPLEX &)
MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX(const MV_Vector_COMPLEX &V, MV_Vector_::ref_type i)   :$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:(const MV_Vector_COMPLEX &V, MV_Vector_::ref_type i)
MV_Vector_COMPLEX	Mv++/mvvc.h	/^class MV_Vector_COMPLEX$/;"	c
MV_Vector_COMPLEX::MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX( int);                             $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:( int)
MV_Vector_COMPLEX::MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX( int, const COMPLEX&);   $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:( int, const COMPLEX&)
MV_Vector_COMPLEX::MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX();                             $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:()
MV_Vector_COMPLEX::MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX(COMPLEX* d,  int N, MV_Vector_::ref_type i) :$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:(COMPLEX* d, int N, MV_Vector_::ref_type i)
MV_Vector_COMPLEX::MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX(COMPLEX*,  int);      $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(COMPLEX*, int)
MV_Vector_COMPLEX::MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX(const COMPLEX*,  int);        $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const COMPLEX*, int)
MV_Vector_COMPLEX::MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX(const MV_Vector_COMPLEX &); $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const MV_Vector_COMPLEX &)
MV_Vector_COMPLEX::MV_Vector_COMPLEX	Mv++/mvvc.h	/^    MV_Vector_COMPLEX(const MV_Vector_COMPLEX &V, MV_Vector_::ref_type i)   :$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:(const MV_Vector_COMPLEX &V, MV_Vector_::ref_type i)
MV_Vector_COMPLEX::dim	Mv++/mvvc.h	/^    inline  int             dim() const { return dim_;}$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:() const
MV_Vector_COMPLEX::dim_	Mv++/mvvc.h	/^            int dim_;$/;"	m	class:MV_Vector_COMPLEX	access:protected
MV_Vector_COMPLEX::newsize	Mv++/mvvc.h	/^            MV_Vector_COMPLEX & newsize( int );$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:( int )
MV_Vector_COMPLEX::null	Mv++/mvvc.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:() const
MV_Vector_COMPLEX::operator ()	Mv++/mvvc.h	/^    COMPLEX&      operator()( int i)$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:( int i)
MV_Vector_COMPLEX::operator ()	Mv++/mvvc.h	/^    MV_Vector_COMPLEX operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const MV_VecIndex &I)
MV_Vector_COMPLEX::operator ()	Mv++/mvvc.h	/^    MV_Vector_COMPLEX operator()(void);$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(void)
MV_Vector_COMPLEX::operator ()	Mv++/mvvc.h	/^    const  COMPLEX&       operator()( int i) const $/;"	f	class:MV_Vector_COMPLEX	access:public	signature:( int i) const
MV_Vector_COMPLEX::operator ()	Mv++/mvvc.h	/^    const MV_Vector_COMPLEX operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const MV_VecIndex &I) const
MV_Vector_COMPLEX::operator ()	Mv++/mvvc.h	/^    const MV_Vector_COMPLEX operator()(void) const;$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(void) const
MV_Vector_COMPLEX::operator <<	Mv++/mvvc.h	/^    friend std::ostream& operator<<(std::ostream &s, $/;"	p	class:MV_Vector_COMPLEX	access:friend	signature:(std::ostream &s, const MV_Vector_COMPLEX &A)
MV_Vector_COMPLEX::operator =	Mv++/mvvc.h	/^    MV_Vector_COMPLEX & operator=(const COMPLEX&);$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const COMPLEX&)
MV_Vector_COMPLEX::operator =	Mv++/mvvc.h	/^    MV_Vector_COMPLEX & operator=(const MV_Vector_COMPLEX&);$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const MV_Vector_COMPLEX&)
MV_Vector_COMPLEX::operator []	Mv++/mvvc.h	/^    COMPLEX&      operator[]( int i)$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:( int i)
MV_Vector_COMPLEX::operator []	Mv++/mvvc.h	/^    const  COMPLEX&       operator[]( int i) const $/;"	f	class:MV_Vector_COMPLEX	access:public	signature:( int i) const
MV_Vector_COMPLEX::p_	Mv++/mvvc.h	/^           COMPLEX *p_;$/;"	m	class:MV_Vector_COMPLEX	access:protected
MV_Vector_COMPLEX::ref	Mv++/mvvc.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:() const
MV_Vector_COMPLEX::ref_	Mv++/mvvc.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_COMPLEX	access:protected
MV_Vector_COMPLEX::size	Mv++/mvvc.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:() const
MV_Vector_COMPLEX::~MV_Vector_COMPLEX	Mv++/mvvc.h	/^    ~MV_Vector_COMPLEX();                              $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:()
MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE();                             $/;"	p	class:MV_Vector_TYPE	access:public	signature:()
MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(TYPE*, unsigned int);        \/\/ new copy$/;"	p	class:MV_Vector_TYPE	access:public	signature:(TYPE*, unsigned int)
MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(TYPE*, unsigned int, MV_Vector_::ref_type i);    $/;"	p	class:MV_Vector_TYPE	access:public	signature:(TYPE*, unsigned int, MV_Vector_::ref_type i)
MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(const MV_Vector_TYPE &); $/;"	p	class:MV_Vector_TYPE	access:public	signature:(const MV_Vector_TYPE &)
MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(const TYPE*, unsigned int);      \/\/ new copy ???$/;"	p	class:MV_Vector_TYPE	access:public	signature:(const TYPE*, unsigned int)
MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(unsigned int);                             $/;"	p	class:MV_Vector_TYPE	access:public	signature:(unsigned int)
MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(unsigned int, const TYPE&);   \/\/ can't be inlined $/;"	p	class:MV_Vector_TYPE	access:public	signature:(unsigned int, const TYPE&)
MV_Vector_TYPE	SparseLib++/tmvec.h	/^class MV_Vector_TYPE$/;"	c
MV_Vector_TYPE::MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE();                             $/;"	p	class:MV_Vector_TYPE	access:public	signature:()
MV_Vector_TYPE::MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(TYPE*, unsigned int);        \/\/ new copy$/;"	p	class:MV_Vector_TYPE	access:public	signature:(TYPE*, unsigned int)
MV_Vector_TYPE::MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(TYPE*, unsigned int, MV_Vector_::ref_type i);    $/;"	p	class:MV_Vector_TYPE	access:public	signature:(TYPE*, unsigned int, MV_Vector_::ref_type i)
MV_Vector_TYPE::MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(const MV_Vector_TYPE &); $/;"	p	class:MV_Vector_TYPE	access:public	signature:(const MV_Vector_TYPE &)
MV_Vector_TYPE::MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(const TYPE*, unsigned int);      \/\/ new copy ???$/;"	p	class:MV_Vector_TYPE	access:public	signature:(const TYPE*, unsigned int)
MV_Vector_TYPE::MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(unsigned int);                             $/;"	p	class:MV_Vector_TYPE	access:public	signature:(unsigned int)
MV_Vector_TYPE::MV_Vector_TYPE	SparseLib++/tmvec.h	/^    MV_Vector_TYPE(unsigned int, const TYPE&);   \/\/ can't be inlined $/;"	p	class:MV_Vector_TYPE	access:public	signature:(unsigned int, const TYPE&)
MV_Vector_TYPE::dim_	SparseLib++/tmvec.h	/^           unsigned int dim_;$/;"	m	class:MV_Vector_TYPE	access:protected
MV_Vector_TYPE::newsize	SparseLib++/tmvec.h	/^            MV_Vector_TYPE & newsize(unsigned int );$/;"	p	class:MV_Vector_TYPE	access:public	signature:(unsigned int )
MV_Vector_TYPE::null	SparseLib++/tmvec.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_TYPE	access:public	signature:() const
MV_Vector_TYPE::operator ()	SparseLib++/tmvec.h	/^    MV_Vector_TYPE operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_TYPE	access:public	signature:(const MV_VecIndex &I)
MV_Vector_TYPE::operator ()	SparseLib++/tmvec.h	/^    MV_Vector_TYPE operator()(void);$/;"	p	class:MV_Vector_TYPE	access:public	signature:(void)
MV_Vector_TYPE::operator ()	SparseLib++/tmvec.h	/^    TYPE&       operator()(unsigned int i)$/;"	f	class:MV_Vector_TYPE	access:public	signature:(unsigned int i)
MV_Vector_TYPE::operator ()	SparseLib++/tmvec.h	/^    const  TYPE&    operator()(unsigned int i) const $/;"	f	class:MV_Vector_TYPE	access:public	signature:(unsigned int i) const
MV_Vector_TYPE::operator ()	SparseLib++/tmvec.h	/^    const MV_Vector_TYPE operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_TYPE	access:public	signature:(const MV_VecIndex &I) const
MV_Vector_TYPE::operator ()	SparseLib++/tmvec.h	/^    const MV_Vector_TYPE operator()(void) const;$/;"	p	class:MV_Vector_TYPE	access:public	signature:(void) const
MV_Vector_TYPE::operator <<	SparseLib++/tmvec.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_Vector_TYPE &A);$/;"	p	class:MV_Vector_TYPE	access:friend	signature:(std::ostream &s, const MV_Vector_TYPE &A)
MV_Vector_TYPE::operator =	SparseLib++/tmvec.h	/^            MV_Vector_TYPE & operator=(const MV_Vector_TYPE&);$/;"	p	class:MV_Vector_TYPE	access:public	signature:(const MV_Vector_TYPE&)
MV_Vector_TYPE::operator =	SparseLib++/tmvec.h	/^            MV_Vector_TYPE & operator=(const TYPE&);$/;"	p	class:MV_Vector_TYPE	access:public	signature:(const TYPE&)
MV_Vector_TYPE::operator []	SparseLib++/tmvec.h	/^    TYPE&       operator[](unsigned int i)$/;"	f	class:MV_Vector_TYPE	access:public	signature:(unsigned int i)
MV_Vector_TYPE::operator []	SparseLib++/tmvec.h	/^    const  TYPE&    operator[](unsigned int i) const $/;"	f	class:MV_Vector_TYPE	access:public	signature:(unsigned int i) const
MV_Vector_TYPE::p_	SparseLib++/tmvec.h	/^           TYPE *p_;$/;"	m	class:MV_Vector_TYPE	access:protected
MV_Vector_TYPE::ref	SparseLib++/tmvec.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_TYPE	access:public	signature:() const
MV_Vector_TYPE::ref_	SparseLib++/tmvec.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_TYPE	access:protected
MV_Vector_TYPE::size	SparseLib++/tmvec.h	/^    inline unsigned int             size() const { return dim_;}$/;"	f	class:MV_Vector_TYPE	access:public	signature:() const
MV_Vector_TYPE::~MV_Vector_TYPE	SparseLib++/tmvec.h	/^    ~MV_Vector_TYPE();                              $/;"	p	class:MV_Vector_TYPE	access:public	signature:()
MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double( int);                             $/;"	p	class:MV_Vector_double	access:public	signature:( int)
MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double( int, const double&);   $/;"	p	class:MV_Vector_double	access:public	signature:( int, const double&)
MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double();                             $/;"	p	class:MV_Vector_double	access:public	signature:()
MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double(const MV_Vector_double &); $/;"	p	class:MV_Vector_double	access:public	signature:(const MV_Vector_double &)
MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double(const MV_Vector_double &V, MV_Vector_::ref_type i)   :$/;"	f	class:MV_Vector_double	access:public	signature:(const MV_Vector_double &V, MV_Vector_::ref_type i)
MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double(const double*,  int);        $/;"	p	class:MV_Vector_double	access:public	signature:(const double*, int)
MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double(double* d,  int N, MV_Vector_::ref_type i) :$/;"	f	class:MV_Vector_double	access:public	signature:(double* d, int N, MV_Vector_::ref_type i)
MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double(double*,  int);      $/;"	p	class:MV_Vector_double	access:public	signature:(double*, int)
MV_Vector_double	Mv++/mvvd.h	/^class MV_Vector_double$/;"	c
MV_Vector_double::MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double( int);                             $/;"	p	class:MV_Vector_double	access:public	signature:( int)
MV_Vector_double::MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double( int, const double&);   $/;"	p	class:MV_Vector_double	access:public	signature:( int, const double&)
MV_Vector_double::MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double();                             $/;"	p	class:MV_Vector_double	access:public	signature:()
MV_Vector_double::MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double(const MV_Vector_double &); $/;"	p	class:MV_Vector_double	access:public	signature:(const MV_Vector_double &)
MV_Vector_double::MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double(const MV_Vector_double &V, MV_Vector_::ref_type i)   :$/;"	f	class:MV_Vector_double	access:public	signature:(const MV_Vector_double &V, MV_Vector_::ref_type i)
MV_Vector_double::MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double(const double*,  int);        $/;"	p	class:MV_Vector_double	access:public	signature:(const double*, int)
MV_Vector_double::MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double(double* d,  int N, MV_Vector_::ref_type i) :$/;"	f	class:MV_Vector_double	access:public	signature:(double* d, int N, MV_Vector_::ref_type i)
MV_Vector_double::MV_Vector_double	Mv++/mvvd.h	/^    MV_Vector_double(double*,  int);      $/;"	p	class:MV_Vector_double	access:public	signature:(double*, int)
MV_Vector_double::dim	Mv++/mvvd.h	/^    inline  int             dim() const { return dim_;}$/;"	f	class:MV_Vector_double	access:public	signature:() const
MV_Vector_double::dim_	Mv++/mvvd.h	/^            int dim_;$/;"	m	class:MV_Vector_double	access:protected
MV_Vector_double::newsize	Mv++/mvvd.h	/^            MV_Vector_double & newsize( int );$/;"	p	class:MV_Vector_double	access:public	signature:( int )
MV_Vector_double::null	Mv++/mvvd.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_double	access:public	signature:() const
MV_Vector_double::operator ()	Mv++/mvvd.h	/^    MV_Vector_double operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_double	access:public	signature:(const MV_VecIndex &I)
MV_Vector_double::operator ()	Mv++/mvvd.h	/^    MV_Vector_double operator()(void);$/;"	p	class:MV_Vector_double	access:public	signature:(void)
MV_Vector_double::operator ()	Mv++/mvvd.h	/^    const  double&       operator()( int i) const $/;"	f	class:MV_Vector_double	access:public	signature:( int i) const
MV_Vector_double::operator ()	Mv++/mvvd.h	/^    const MV_Vector_double operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_double	access:public	signature:(const MV_VecIndex &I) const
MV_Vector_double::operator ()	Mv++/mvvd.h	/^    const MV_Vector_double operator()(void) const;$/;"	p	class:MV_Vector_double	access:public	signature:(void) const
MV_Vector_double::operator ()	Mv++/mvvd.h	/^    double&      operator()( int i)$/;"	f	class:MV_Vector_double	access:public	signature:( int i)
MV_Vector_double::operator <<	Mv++/mvvd.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_Vector_double &A);$/;"	p	class:MV_Vector_double	access:friend	signature:(std::ostream &s, const MV_Vector_double &A)
MV_Vector_double::operator =	Mv++/mvvd.h	/^    MV_Vector_double & operator=(const MV_Vector_double&);$/;"	p	class:MV_Vector_double	access:public	signature:(const MV_Vector_double&)
MV_Vector_double::operator =	Mv++/mvvd.h	/^    MV_Vector_double & operator=(const double&);$/;"	p	class:MV_Vector_double	access:public	signature:(const double&)
MV_Vector_double::operator []	Mv++/mvvd.h	/^    const  double&       operator[]( int i) const $/;"	f	class:MV_Vector_double	access:public	signature:( int i) const
MV_Vector_double::operator []	Mv++/mvvd.h	/^    double&      operator[]( int i)$/;"	f	class:MV_Vector_double	access:public	signature:( int i)
MV_Vector_double::p_	Mv++/mvvd.h	/^           double *p_;$/;"	m	class:MV_Vector_double	access:protected
MV_Vector_double::ref	Mv++/mvvd.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_double	access:public	signature:() const
MV_Vector_double::ref_	Mv++/mvvd.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_double	access:protected
MV_Vector_double::size	Mv++/mvvd.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector_double	access:public	signature:() const
MV_Vector_double::~MV_Vector_double	Mv++/mvvd.h	/^    ~MV_Vector_double();                              $/;"	p	class:MV_Vector_double	access:public	signature:()
MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float( int);                             $/;"	p	class:MV_Vector_float	access:public	signature:( int)
MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float( int, const float&);   $/;"	p	class:MV_Vector_float	access:public	signature:( int, const float&)
MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float();                             $/;"	p	class:MV_Vector_float	access:public	signature:()
MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float(const MV_Vector_float &); $/;"	p	class:MV_Vector_float	access:public	signature:(const MV_Vector_float &)
MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float(const MV_Vector_float &V, MV_Vector_::ref_type i)   :$/;"	f	class:MV_Vector_float	access:public	signature:(const MV_Vector_float &V, MV_Vector_::ref_type i)
MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float(const float*,  int);        $/;"	p	class:MV_Vector_float	access:public	signature:(const float*, int)
MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float(float* d,  int N, MV_Vector_::ref_type i) :$/;"	f	class:MV_Vector_float	access:public	signature:(float* d, int N, MV_Vector_::ref_type i)
MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float(float*,  int);      $/;"	p	class:MV_Vector_float	access:public	signature:(float*, int)
MV_Vector_float	Mv++/mvvf.h	/^class MV_Vector_float$/;"	c
MV_Vector_float::MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float( int);                             $/;"	p	class:MV_Vector_float	access:public	signature:( int)
MV_Vector_float::MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float( int, const float&);   $/;"	p	class:MV_Vector_float	access:public	signature:( int, const float&)
MV_Vector_float::MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float();                             $/;"	p	class:MV_Vector_float	access:public	signature:()
MV_Vector_float::MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float(const MV_Vector_float &); $/;"	p	class:MV_Vector_float	access:public	signature:(const MV_Vector_float &)
MV_Vector_float::MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float(const MV_Vector_float &V, MV_Vector_::ref_type i)   :$/;"	f	class:MV_Vector_float	access:public	signature:(const MV_Vector_float &V, MV_Vector_::ref_type i)
MV_Vector_float::MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float(const float*,  int);        $/;"	p	class:MV_Vector_float	access:public	signature:(const float*, int)
MV_Vector_float::MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float(float* d,  int N, MV_Vector_::ref_type i) :$/;"	f	class:MV_Vector_float	access:public	signature:(float* d, int N, MV_Vector_::ref_type i)
MV_Vector_float::MV_Vector_float	Mv++/mvvf.h	/^    MV_Vector_float(float*,  int);      $/;"	p	class:MV_Vector_float	access:public	signature:(float*, int)
MV_Vector_float::dim	Mv++/mvvf.h	/^    inline  int             dim() const { return dim_;}$/;"	f	class:MV_Vector_float	access:public	signature:() const
MV_Vector_float::dim_	Mv++/mvvf.h	/^            int dim_;$/;"	m	class:MV_Vector_float	access:protected
MV_Vector_float::newsize	Mv++/mvvf.h	/^            MV_Vector_float & newsize( int );$/;"	p	class:MV_Vector_float	access:public	signature:( int )
MV_Vector_float::null	Mv++/mvvf.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_float	access:public	signature:() const
MV_Vector_float::operator ()	Mv++/mvvf.h	/^    MV_Vector_float operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_float	access:public	signature:(const MV_VecIndex &I)
MV_Vector_float::operator ()	Mv++/mvvf.h	/^    MV_Vector_float operator()(void);$/;"	p	class:MV_Vector_float	access:public	signature:(void)
MV_Vector_float::operator ()	Mv++/mvvf.h	/^    const  float&       operator()( int i) const $/;"	f	class:MV_Vector_float	access:public	signature:( int i) const
MV_Vector_float::operator ()	Mv++/mvvf.h	/^    const MV_Vector_float operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_float	access:public	signature:(const MV_VecIndex &I) const
MV_Vector_float::operator ()	Mv++/mvvf.h	/^    const MV_Vector_float operator()(void) const;$/;"	p	class:MV_Vector_float	access:public	signature:(void) const
MV_Vector_float::operator ()	Mv++/mvvf.h	/^    float&      operator()( int i)$/;"	f	class:MV_Vector_float	access:public	signature:( int i)
MV_Vector_float::operator <<	Mv++/mvvf.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_Vector_float &A);$/;"	p	class:MV_Vector_float	access:friend	signature:(std::ostream &s, const MV_Vector_float &A)
MV_Vector_float::operator =	Mv++/mvvf.h	/^    MV_Vector_float & operator=(const MV_Vector_float&);$/;"	p	class:MV_Vector_float	access:public	signature:(const MV_Vector_float&)
MV_Vector_float::operator =	Mv++/mvvf.h	/^    MV_Vector_float & operator=(const float&);$/;"	p	class:MV_Vector_float	access:public	signature:(const float&)
MV_Vector_float::operator []	Mv++/mvvf.h	/^    const  float&       operator[]( int i) const $/;"	f	class:MV_Vector_float	access:public	signature:( int i) const
MV_Vector_float::operator []	Mv++/mvvf.h	/^    float&      operator[]( int i)$/;"	f	class:MV_Vector_float	access:public	signature:( int i)
MV_Vector_float::p_	Mv++/mvvf.h	/^           float *p_;$/;"	m	class:MV_Vector_float	access:protected
MV_Vector_float::ref	Mv++/mvvf.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_float	access:public	signature:() const
MV_Vector_float::ref_	Mv++/mvvf.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_float	access:protected
MV_Vector_float::size	Mv++/mvvf.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector_float	access:public	signature:() const
MV_Vector_float::~MV_Vector_float	Mv++/mvvf.h	/^    ~MV_Vector_float();                              $/;"	p	class:MV_Vector_float	access:public	signature:()
MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int( int);                             $/;"	p	class:MV_Vector_int	access:public	signature:( int)
MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int( int, const int&);   $/;"	p	class:MV_Vector_int	access:public	signature:( int, const int&)
MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int();                             $/;"	p	class:MV_Vector_int	access:public	signature:()
MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int(const MV_Vector_int &); $/;"	p	class:MV_Vector_int	access:public	signature:(const MV_Vector_int &)
MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int(const MV_Vector_int &V, MV_Vector_::ref_type i)   :$/;"	f	class:MV_Vector_int	access:public	signature:(const MV_Vector_int &V, MV_Vector_::ref_type i)
MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int(const int*,  int);        $/;"	p	class:MV_Vector_int	access:public	signature:(const int*, int)
MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int(int* d,  int N, MV_Vector_::ref_type i) :$/;"	f	class:MV_Vector_int	access:public	signature:(int* d, int N, MV_Vector_::ref_type i)
MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int(int*,  int);      $/;"	p	class:MV_Vector_int	access:public	signature:(int*, int)
MV_Vector_int	Mv++/mvvi.h	/^class MV_Vector_int$/;"	c
MV_Vector_int::MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int( int);                             $/;"	p	class:MV_Vector_int	access:public	signature:( int)
MV_Vector_int::MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int( int, const int&);   $/;"	p	class:MV_Vector_int	access:public	signature:( int, const int&)
MV_Vector_int::MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int();                             $/;"	p	class:MV_Vector_int	access:public	signature:()
MV_Vector_int::MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int(const MV_Vector_int &); $/;"	p	class:MV_Vector_int	access:public	signature:(const MV_Vector_int &)
MV_Vector_int::MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int(const MV_Vector_int &V, MV_Vector_::ref_type i)   :$/;"	f	class:MV_Vector_int	access:public	signature:(const MV_Vector_int &V, MV_Vector_::ref_type i)
MV_Vector_int::MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int(const int*,  int);        $/;"	p	class:MV_Vector_int	access:public	signature:(const int*, int)
MV_Vector_int::MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int(int* d,  int N, MV_Vector_::ref_type i) :$/;"	f	class:MV_Vector_int	access:public	signature:(int* d, int N, MV_Vector_::ref_type i)
MV_Vector_int::MV_Vector_int	Mv++/mvvi.h	/^    MV_Vector_int(int*,  int);      $/;"	p	class:MV_Vector_int	access:public	signature:(int*, int)
MV_Vector_int::dim	Mv++/mvvi.h	/^    inline  int             dim() const { return dim_;}$/;"	f	class:MV_Vector_int	access:public	signature:() const
MV_Vector_int::dim_	Mv++/mvvi.h	/^            int dim_;$/;"	m	class:MV_Vector_int	access:protected
MV_Vector_int::newsize	Mv++/mvvi.h	/^            MV_Vector_int & newsize( int );$/;"	p	class:MV_Vector_int	access:public	signature:( int )
MV_Vector_int::null	Mv++/mvvi.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_int	access:public	signature:() const
MV_Vector_int::operator ()	Mv++/mvvi.h	/^    MV_Vector_int operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_int	access:public	signature:(const MV_VecIndex &I)
MV_Vector_int::operator ()	Mv++/mvvi.h	/^    MV_Vector_int operator()(void);$/;"	p	class:MV_Vector_int	access:public	signature:(void)
MV_Vector_int::operator ()	Mv++/mvvi.h	/^    const  int&       operator()( int i) const $/;"	f	class:MV_Vector_int	access:public	signature:( int i) const
MV_Vector_int::operator ()	Mv++/mvvi.h	/^    const MV_Vector_int operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_int	access:public	signature:(const MV_VecIndex &I) const
MV_Vector_int::operator ()	Mv++/mvvi.h	/^    const MV_Vector_int operator()(void) const;$/;"	p	class:MV_Vector_int	access:public	signature:(void) const
MV_Vector_int::operator ()	Mv++/mvvi.h	/^    int&      operator()( int i)$/;"	f	class:MV_Vector_int	access:public	signature:( int i)
MV_Vector_int::operator <<	Mv++/mvvi.h	/^    friend std::ostream & operator<<(std::ostream &s, const MV_Vector_int &A);$/;"	p	class:MV_Vector_int	access:friend	signature:(std::ostream &s, const MV_Vector_int &A)
MV_Vector_int::operator =	Mv++/mvvi.h	/^    MV_Vector_int & operator=(const MV_Vector_int&);$/;"	p	class:MV_Vector_int	access:public	signature:(const MV_Vector_int&)
MV_Vector_int::operator =	Mv++/mvvi.h	/^    MV_Vector_int & operator=(const int&);$/;"	p	class:MV_Vector_int	access:public	signature:(const int&)
MV_Vector_int::operator []	Mv++/mvvi.h	/^    const  int&       operator[]( int i) const $/;"	f	class:MV_Vector_int	access:public	signature:( int i) const
MV_Vector_int::operator []	Mv++/mvvi.h	/^    int&      operator[]( int i)$/;"	f	class:MV_Vector_int	access:public	signature:( int i)
MV_Vector_int::p_	Mv++/mvvi.h	/^           int *p_;$/;"	m	class:MV_Vector_int	access:protected
MV_Vector_int::ref	Mv++/mvvi.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_int	access:public	signature:() const
MV_Vector_int::ref_	Mv++/mvvi.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_int	access:protected
MV_Vector_int::size	Mv++/mvvi.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector_int	access:public	signature:() const
MV_Vector_int::~MV_Vector_int	Mv++/mvvi.h	/^    ~MV_Vector_int();                              $/;"	p	class:MV_Vector_int	access:public	signature:()
Make	pressureCorrection.h	/^    void Make();$/;"	p	class:PressureCorrect	access:public	signature:()
Matrix_	Mv++/mvmtp.h	/^struct Matrix_ $/;"	s
Matrix_::ref	Mv++/mvmtp.h	/^    enum ref_type {  ref = 1 };$/;"	e	enum:Matrix_::ref_type
Matrix_::ref_type	Mv++/mvmtp.h	/^    enum ref_type {  ref = 1 };$/;"	g	struct:Matrix_	access:public
MeshBlock	Mesh.h	/^    MeshBlock(real lAxisX, real lAxisY, int nodeX, int nodeY);$/;"	p	class:MeshTool::MeshBlock	access:public	signature:(real lAxisX, real lAxisY, int nodeX, int nodeY)
MeshBlock	Mesh.h	/^class MeshBlock$/;"	c	namespace:MeshTool
MeshTool	Mesh.h	/^namespace MeshTool{$/;"	n
MeshTool::MeshBlock	Mesh.h	/^class MeshBlock$/;"	c	namespace:MeshTool
MeshTool::MeshBlock::Dx	Mesh.h	/^    const real &Dx, &Dy; $/;"	m	class:MeshTool::MeshBlock	access:public
MeshTool::MeshBlock::Dx_	Mesh.h	/^    real Dx_, Dy_; \/\/delta bettwen Cells X-Axis Y-Axis$/;"	m	class:MeshTool::MeshBlock	access:private
MeshTool::MeshBlock::Dy	Mesh.h	/^    const real &Dx, &Dy; $/;"	m	class:MeshTool::MeshBlock	access:public
MeshTool::MeshBlock::Dy_	Mesh.h	/^    real Dx_, Dy_; \/\/delta bettwen Cells X-Axis Y-Axis$/;"	m	class:MeshTool::MeshBlock	access:private
MeshTool::MeshBlock::MeshBlock	Mesh.h	/^    MeshBlock(real lAxisX, real lAxisY, int nodeX, int nodeY);$/;"	p	class:MeshTool::MeshBlock	access:public	signature:(real lAxisX, real lAxisY, int nodeX, int nodeY)
MeshTool::MeshBlock::Nx	Mesh.h	/^    const int &Nx, &Ny; $/;"	m	class:MeshTool::MeshBlock	access:public
MeshTool::MeshBlock::Nx_	Mesh.h	/^    int Nx_, Ny_; \/\/nodes X and Y direction$/;"	m	class:MeshTool::MeshBlock	access:private
MeshTool::MeshBlock::Ny	Mesh.h	/^    const int &Nx, &Ny; $/;"	m	class:MeshTool::MeshBlock	access:public
MeshTool::MeshBlock::Ny_	Mesh.h	/^    int Nx_, Ny_; \/\/nodes X and Y direction$/;"	m	class:MeshTool::MeshBlock	access:private
MeshTool::MeshBlock::cNx	Mesh.h	/^    int &cNx; $/;"	m	class:MeshTool::MeshBlock	access:public
MeshTool::MeshBlock::cNx_	Mesh.h	/^    int cNx_; \/\/cell nodes X direction$/;"	m	class:MeshTool::MeshBlock	access:private
MeshTool::MeshBlock::cNy	Mesh.h	/^    int &cNy; $/;"	m	class:MeshTool::MeshBlock	access:public
MeshTool::MeshBlock::cNy_	Mesh.h	/^    int cNy_; \/\/cell nodes Y direction$/;"	m	class:MeshTool::MeshBlock	access:private
MeshTool::MeshBlock::cellDifference	Mesh.h	/^    void cellDifference();$/;"	p	class:MeshTool::MeshBlock	access:public	signature:()
MeshTool::MeshBlock::inverseDx	Mesh.h	/^    const real &inverseDx;$/;"	m	class:MeshTool::MeshBlock	access:public
MeshTool::MeshBlock::inverseDx_	Mesh.h	/^    real inverseDx_;\/\/Gets the inverse of the delta X$/;"	m	class:MeshTool::MeshBlock	access:private
MeshTool::MeshBlock::inverseDy	Mesh.h	/^    const real &inverseDy;$/;"	m	class:MeshTool::MeshBlock	access:public
MeshTool::MeshBlock::inverseDy_	Mesh.h	/^    real inverseDy_;\/\/Gets the inverse of the delta Y$/;"	m	class:MeshTool::MeshBlock	access:private
MeshTool::MeshBlock::lx	Mesh.h	/^    real lx, ly; \/\/longitud X-Axis Y-Axix$/;"	m	class:MeshTool::MeshBlock	access:private
MeshTool::MeshBlock::ly	Mesh.h	/^    real lx, ly; \/\/longitud X-Axis Y-Axix$/;"	m	class:MeshTool::MeshBlock	access:private
MeshTool::MeshBlock::startPosX	Mesh.h	/^    real startPosX, startPosY; \/\/Start position on the mesh$/;"	m	class:MeshTool::MeshBlock	access:private
MeshTool::MeshBlock::startPosY	Mesh.h	/^    real startPosX, startPosY; \/\/Start position on the mesh$/;"	m	class:MeshTool::MeshBlock	access:private
NumNonzeros	SparseLib++/compcol_double.h	/^       int          NumNonzeros() const {return nz_;};$/;"	f	class:CompCol_Mat_double	access:public	signature:() const
NumNonzeros	SparseLib++/comprow_double.h	/^       int          NumNonzeros() const {return nz_;};$/;"	f	class:CompRow_Mat_double	access:public	signature:() const
NumNonzeros	SparseLib++/coord_double.h	/^       int          NumNonzeros() const {return nz_;};$/;"	f	class:Coord_Mat_double	access:public	signature:() const
Nx	Mesh.h	/^    const int &Nx, &Ny; $/;"	m	class:MeshTool::MeshBlock	access:public
Nx_	Mesh.h	/^    int Nx_, Ny_; \/\/nodes X and Y direction$/;"	m	class:MeshTool::MeshBlock	access:private
Ny	Mesh.h	/^    const int &Nx, &Ny; $/;"	m	class:MeshTool::MeshBlock	access:public
Ny_	Mesh.h	/^    int Nx_, Ny_; \/\/nodes X and Y direction$/;"	m	class:MeshTool::MeshBlock	access:private
P	Staggered.h	/^	inline Array<Tprec,2> P();$/;"	p	class:Staggered	access:public	signature:()
P	Staggered.h	/^inline Array<Tprec,2>Interpolation<Tprec,Zone>::P(){$/;"	f	class:Interpolation	signature:()
P_Ground	Staggered.h	/^	inline void P_Ground(typeDim<1>){$/;"	f	class:Staggered	access:private	signature:(typeDim<1>)
P_Ground	Staggered.h	/^	inline void P_Ground(typeDim<2>){$/;"	f	class:Staggered	access:private	signature:(typeDim<2>)
P_STAGG	axisDef.h	4;"	d
Pressure	explicitDeriv.h	/^	const Array<real,2>& Pressure;    $/;"	m	class:ExplicitDeriv	access:private
PressureCorrect	pressureCorrection.h	/^    PressureCorrect($/;"	f	class:PressureCorrect	access:public	signature:( Array<real,2>& vel_u, Array<real,2>& vel_v, Array<real,2>& press_p, Array<real,2>& Bound_u, Array<real,2>& Bound_v, MeshTool::MeshBlock &Grid_set )
PressureCorrect	pressureCorrection.h	/^class PressureCorrect$/;"	c
PressureCorrect::A	pressureCorrection.h	/^    Coord_Mat_double A; $/;"	m	class:PressureCorrect	access:private
PressureCorrect::D	pressureCorrection.h	/^    Array<real,2> D;$/;"	m	class:PressureCorrect	access:private
PressureCorrect::Div	pressureCorrection.h	/^    void Div();$/;"	p	class:PressureCorrect	access:public	signature:()
PressureCorrect::FillPoisson	pressureCorrection.h	/^    void FillPoisson();$/;"	p	class:PressureCorrect	access:public	signature:()
PressureCorrect::Grid	pressureCorrection.h	/^    const MeshTool::MeshBlock & Grid; $/;"	m	class:PressureCorrect	access:private
PressureCorrect::H	pressureCorrection.h	/^    MATRIX_double H;$/;"	m	class:PressureCorrect	access:private
PressureCorrect::Make	pressureCorrection.h	/^    void Make();$/;"	p	class:PressureCorrect	access:public	signature:()
PressureCorrect::PressureCorrect	pressureCorrection.h	/^    PressureCorrect($/;"	f	class:PressureCorrect	access:public	signature:( Array<real,2>& vel_u, Array<real,2>& vel_v, Array<real,2>& press_p, Array<real,2>& Bound_u, Array<real,2>& Bound_v, MeshTool::MeshBlock &Grid_set )
PressureCorrect::Solve	pressureCorrection.h	/^    void Solve();$/;"	p	class:PressureCorrect	access:public	signature:()
PressureCorrect::b	pressureCorrection.h	/^    VECTOR_double x, b;$/;"	m	class:PressureCorrect	access:private
PressureCorrect::col2	pressureCorrection.h	/^    int *col2;$/;"	m	class:PressureCorrect	access:private
PressureCorrect::elements	pressureCorrection.h	/^    int elements; $/;"	m	class:PressureCorrect	access:private
PressureCorrect::maxit	pressureCorrection.h	/^    int maxit, restart;$/;"	m	class:PressureCorrect	access:private
PressureCorrect::pressure	pressureCorrection.h	/^    const Array<real,2>& pressure; $/;"	m	class:PressureCorrect	access:private
PressureCorrect::restart	pressureCorrection.h	/^    int maxit, restart;$/;"	m	class:PressureCorrect	access:private
PressureCorrect::row2	pressureCorrection.h	/^    int *row2;$/;"	m	class:PressureCorrect	access:private
PressureCorrect::tol	pressureCorrection.h	/^    real tol;$/;"	m	class:PressureCorrect	access:private
PressureCorrect::uBoundary	pressureCorrection.h	/^    const Array<real,2>& uBoundary;    $/;"	m	class:PressureCorrect	access:private
PressureCorrect::uS	pressureCorrection.h	/^    const Array<real,2>& uS;$/;"	m	class:PressureCorrect	access:private
PressureCorrect::vBoundary	pressureCorrection.h	/^    const Array<real,2>& vBoundary;    $/;"	m	class:PressureCorrect	access:private
PressureCorrect::vS	pressureCorrection.h	/^    const Array<real,2>& vS;$/;"	m	class:PressureCorrect	access:private
PressureCorrect::val2	pressureCorrection.h	/^    real *val2;$/;"	m	class:PressureCorrect	access:private
PressureCorrect::x	pressureCorrection.h	/^    VECTOR_double x, b;$/;"	m	class:PressureCorrect	access:private
QMR	IML++/qmr.h	/^QMR(const Matrix &A, Vector &x, const Vector &b, const Preconditioner1 &M1, $/;"	f	signature:(const Matrix &A, Vector &x, const Vector &b, const Preconditioner1 &M1, const Preconditioner2 &M2, int &max_iter, Real &tol)
QSort	SparseLib++/qsort_double.h	/^int QSort(VECTOR_double& v, int base_ptr, int total_elems);$/;"	p	signature:(VECTOR_double& v, int base_ptr, int total_elems)
QSort	SparseLib++/qsort_double.h	/^int QSort(VECTOR_int & v, VECTOR_double& x, int base_ptr, int total_elems);$/;"	p	signature:(VECTOR_int & v, VECTOR_double& x, int base_ptr, int total_elems)
QSort	SparseLib++/qsort_int.h	/^int QSort(VECTOR_int & v, VECTOR_int& x, int base_ptr, int total_elems);$/;"	p	signature:(VECTOR_int & v, VECTOR_int& x, int base_ptr, int total_elems)
QSort	SparseLib++/qsort_int.h	/^int QSort(VECTOR_int& v, int base_ptr, int total_elems);$/;"	p	signature:(VECTOR_int& v, int base_ptr, int total_elems)
QSort	SparseLib++/qsort_type.h	/^int QSort(VECTOR_TYPE& v, int base_ptr, int total_elems);$/;"	p	signature:(VECTOR_TYPE& v, int base_ptr, int total_elems)
QSort	SparseLib++/qsort_type.h	/^int QSort(VECTOR_int & v, VECTOR_TYPE& x, int base_ptr, int total_elems);$/;"	p	signature:(VECTOR_int & v, VECTOR_TYPE& x, int base_ptr, int total_elems)
Resizes	Staggered.h	/^	inline void Resizes(int N);$/;"	p	class:Staggered	access:public	signature:(int N)
Resizes	Staggered.h	/^inline void Interpolation<Tprec,Zone>::Resizes(int N){$/;"	f	class:Interpolation	signature:(int N)
SPBLAS_H	SparseLib++/spblas.h	33;"	d
STAGGERED_H_	Staggered.h	9;"	d
Solve	pressureCorrection.h	/^    void Solve();$/;"	p	class:PressureCorrect	access:public	signature:()
Staggered	Staggered.h	/^class Staggered{$/;"	c
Staggered::Alpha	Staggered.h	/^	Tprec Alpha;$/;"	m	class:Staggered	access:private
Staggered::Array	Staggered.h	/^	inline void Init_Boundary(typeDim<Zone>(),Array<Tprec,2> );$/;"	m	class:Staggered	access:public
Staggered::Cell	Staggered.h	/^	inline Array<Tprec,2> Cell();$/;"	p	class:Staggered	access:public	signature:()
Staggered::F	Staggered.h	/^	Array<Tprec,2> &F,F_P , F_IJ;$/;"	m	class:Staggered	access:private
Staggered::F_IJ	Staggered.h	/^	Array<Tprec,2> &F,F_P , F_IJ;$/;"	m	class:Staggered	access:private
Staggered::F_P	Staggered.h	/^	Array<Tprec,2> &F,F_P , F_IJ;$/;"	m	class:Staggered	access:private
Staggered::I	Staggered.h	/^	inline Array<Tprec,2> I(Array<Tprec,2>& );$/;"	p	class:Staggered	access:public	signature:(Array<Tprec,2>& )
Staggered::IJ	Staggered.h	/^	inline Array<Tprec,2> IJ();$/;"	p	class:Staggered	access:public	signature:()
Staggered::IJ_Ground	Staggered.h	/^	inline void IJ_Ground(typeDim<1>){$/;"	f	class:Staggered	access:private	signature:(typeDim<1>)
Staggered::IJ_Ground	Staggered.h	/^	inline void IJ_Ground(typeDim<2>){$/;"	f	class:Staggered	access:private	signature:(typeDim<2>)
Staggered::Init_Boundary	Staggered.h	/^	inline void Init_Boundary(typeDim<1>,Array<Tprec,2> Unk_Var){$/;"	f	class:Staggered	access:private	signature:(typeDim<1>,Array<Tprec,2> Unk_Var)
Staggered::Init_Boundary	Staggered.h	/^	inline void Init_Boundary(typeDim<2>,Array<Tprec,2> Unk_Var){$/;"	f	class:Staggered	access:private	signature:(typeDim<2>,Array<Tprec,2> Unk_Var)
Staggered::Interpolation	Staggered.h	/^	Interpolation(Array<Tprec,2> &Atemp, Array<Tprec,2> Unk_Var)$/;"	f	class:Staggered	access:public	signature:(Array<Tprec,2> &Atemp, Array<Tprec,2> Unk_Var)
Staggered::J	Staggered.h	/^	inline Array<Tprec,2> J(Array<Tprec,2>& );$/;"	p	class:Staggered	access:public	signature:(Array<Tprec,2>& )
Staggered::P	Staggered.h	/^	inline Array<Tprec,2> P();$/;"	p	class:Staggered	access:public	signature:()
Staggered::P_Ground	Staggered.h	/^	inline void P_Ground(typeDim<1>){$/;"	f	class:Staggered	access:private	signature:(typeDim<1>)
Staggered::P_Ground	Staggered.h	/^	inline void P_Ground(typeDim<2>){$/;"	f	class:Staggered	access:private	signature:(typeDim<2>)
Staggered::Resizes	Staggered.h	/^	inline void Resizes(int N);$/;"	p	class:Staggered	access:public	signature:(int N)
Staggered::UnkBound	Staggered.h	/^	Array<Tprec,2> UnkBound;$/;"	m	class:Staggered	access:private
Staggered::a	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
Staggered::alphaBound	Staggered.h	/^	Tprec alphaBound;$/;"	m	class:Staggered	access:private
Staggered::b	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
Staggered::bandA	Staggered.h	/^	Array<Tprec,1> mainBand, bandA, bandC;$/;"	m	class:Staggered	access:private
Staggered::bandC	Staggered.h	/^	Array<Tprec,1> mainBand, bandA, bandC;$/;"	m	class:Staggered	access:private
Staggered::computeInt	Staggered.h	/^	inline void computeInt(Array<Tprec,1> & ,Array<Tprec,1> &);$/;"	p	class:Staggered	access:public	signature:(Array<Tprec,1> & ,Array<Tprec,1> &)
Staggered::e1	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
Staggered::e2	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
Staggered::e3	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
Staggered::e4	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
Staggered::getIJ	Staggered.h	/^	inline Array<Tprec,2> getIJ();$/;"	p	class:Staggered	access:public	signature:()
Staggered::getP	Staggered.h	/^	inline Array<Tprec,2> getP();$/;"	p	class:Staggered	access:public	signature:()
Staggered::mainBand	Staggered.h	/^	Array<Tprec,1> mainBand, bandA, bandC;$/;"	m	class:Staggered	access:private
Staggered::setField	Staggered.h	/^	inline void setField(Array<Tprec,2> &A)$/;"	f	class:Staggered	access:public	signature:(Array<Tprec,2> &A)
Staggered::setValues	Staggered.h	/^	inline void setValues();$/;"	p	class:Staggered	access:public	signature:()
Staggered::typeDim	Staggered.h	/^	inline void IJ_Ground(typeDim<Zone>());$/;"	p	class:Staggered	access:public	signature:()
Staggered::typeDim	Staggered.h	/^	inline void Init_Boundary(typeDim<Zone>(),Array<Tprec,2> );$/;"	p	class:Staggered	access:public	signature:()
Staggered::typeDim	Staggered.h	/^	inline void P_Ground(typeDim<Zone>());$/;"	p	class:Staggered	access:public	signature:()
UnkBound	Staggered.h	/^	Array<Tprec,2> UnkBound;$/;"	m	class:Staggered	access:private
Update	IML++/gmres.h	/^Update(Vector &x, int k, Matrix &h, Vector &s, Vector v[])$/;"	f	signature:(Vector &x, int k, Matrix &h, Vector &s, Vector v[])
VECTOR_COMPLEX	Mv++/vecdefs.h	44;"	d
VECTOR_H	Mv++/vecdefs.h	33;"	d
VECTOR_double	Mv++/vecdefs.h	34;"	d
VECTOR_float	Mv++/vecdefs.h	35;"	d
VECTOR_int	Mv++/vecdefs.h	36;"	d
VECTOR_ref	Mv++/vecdefs.h	37;"	d
X_STAGG	axisDef.h	5;"	d
XstaggToCenter	explicitDeriv.h	/^    Array<real,2> XstaggToCenter(const Array<real,2>& );$/;"	p	class:ExplicitDeriv	access:public	signature:(const Array<real,2>& )
Y_STAGG	axisDef.h	6;"	d
YstaggToCenter	explicitDeriv.h	/^    Array<real,2> YstaggToCenter(const Array<real,2>& );$/;"	p	class:ExplicitDeriv	access:public	signature:(const Array<real,2>& )
Z_STAGG	axisDef.h	7;"	d
_AXISDEF_H	axisDef.h	2;"	d
_EXPLICIT_DER_HPP	explicitDeriv.h	2;"	d
_IOHB_H_	SparseLib++/iohb.h	33;"	d
_IOTEXT_H_	Mv++/iotext.h	29;"	d
_IOTEXT_H_	SparseLib++/iotext.h	35;"	d
_MATH_CORE_H	MathCore.h	2;"	d
_MESHTOOLS_H_	Mesh.h	2;"	d
_MV_BLAS1_$TYPE_H_	Mv++/mvblast.h	26;"	d
_MV_BLAS1_COMPLEX_H_	Mv++/mvblasc.h	26;"	d
_MV_BLAS1_TPL_H_	Mv++/mvblas.h	26;"	d
_MV_BLAS1_TYPE_H_	Mv++/tblas1.h	26;"	d
_MV_BLAS1_TYPE_H_	SparseLib++/tblas1.h	32;"	d
_MV_BLAS1_double_H_	Mv++/mvblasd.h	26;"	d
_MV_BLAS1_float_H_	Mv++/mvblasf.h	26;"	d
_MV_BLAS1_int_H_	Mv++/mvblasi.h	26;"	d
_MV_MATRIX_$TYPE_H_	Mv++/mvmt.h	34;"	d
_MV_MATRIX_ALL_H_	Mv++/mvm.h	32;"	d
_MV_MATRIX_COMPLEX_H_	Mv++/mvmc.h	34;"	d
_MV_MATRIX_H_	Mv++/mvmtp.h	34;"	d
_MV_MATRIX_REF_	Mv++/mvmrf.h	32;"	d
_MV_MATRIX_TYPE_H_	Mv++/tmvmat.h	34;"	d
_MV_MATRIX_TYPE_H_	SparseLib++/tmvmat.h	40;"	d
_MV_MATRIX_double_H_	Mv++/mvmd.h	34;"	d
_MV_MATRIX_float_H_	Mv++/mvmf.h	34;"	d
_MV_MATRIX_int_H_	Mv++/mvmi.h	34;"	d
_MV_VECTOR_$TYPE_H	Mv++/mvvt.h	30;"	d
_MV_VECTOR_ALL_H_	Mv++/mvv.h	32;"	d
_MV_VECTOR_COMPLEX_H	Mv++/mvvc.h	30;"	d
_MV_VECTOR_REF_	Mv++/mvvrf.h	32;"	d
_MV_VECTOR_TPL_H_	Mv++/mvvtp.h	30;"	d
_MV_VECTOR_TYPE_H	SparseLib++/tmvec.h	36;"	d
_MV_VECTOR_double_H	Mv++/mvvd.h	30;"	d
_MV_VECTOR_float_H	Mv++/mvvf.h	30;"	d
_MV_VECTOR_int_H	Mv++/mvvi.h	30;"	d
_MV_VEC_INDEX_H_	Mv++/mvvind.h	29;"	d
_PRESICION_H	presicion.h	2;"	d
_PRESSURE_HPP	pressureCorrection.h	2;"	d
__ProtoGlarp__	SparseLib++/iohb.h	36;"	d
__ProtoGlarp__	SparseLib++/iohb.h	39;"	d
__ProtoGlarp__	SparseLib++/iohb.h	41;"	d
a	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
abs	IML++/gmres.h	/^abs(Real x)$/;"	f	signature:(Real x)
all	Mv++/mvvind.h	/^        int all() const { return all_; }$/;"	f	class:MV_VecIndex	access:public	signature:() const
all_	Mv++/mvvind.h	/^            char all_;      \/\/ true if this index refers to the complete$/;"	m	class:MV_VecIndex	access:private
alphaBound	Staggered.h	/^	Tprec alphaBound;$/;"	m	class:Staggered	access:private
b	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
b	pressureCorrection.h	/^    VECTOR_double x, b;$/;"	m	class:PressureCorrect	access:private
bandA	Staggered.h	/^	Array<Tprec,1> mainBand, bandA, bandC;$/;"	m	class:Staggered	access:private
bandC	Staggered.h	/^	Array<Tprec,1> mainBand, bandA, bandC;$/;"	m	class:Staggered	access:private
base	SparseLib++/compcol_double.h	/^       int          base() const {return base_;}$/;"	f	class:CompCol_Mat_double	access:public	signature:() const
base	SparseLib++/comprow_double.h	/^       int          base() const {return base_;}$/;"	f	class:CompRow_Mat_double	access:public	signature:() const
base	SparseLib++/coord_double.h	/^       int          base() const {return base_;}$/;"	f	class:Coord_Mat_double	access:public	signature:() const
base_	SparseLib++/compcol_double.h	/^       int base_;                 \/\/ index base: offset of first element$/;"	m	class:CompCol_Mat_double	access:private
base_	SparseLib++/comprow_double.h	/^       int base_;                 \/\/ index base: offset of first element$/;"	m	class:CompRow_Mat_double	access:private
base_	SparseLib++/coord_double.h	/^       int base_;                 \/\/ index base:  not used....$/;"	m	class:Coord_Mat_double	access:private
cNx	Mesh.h	/^    int &cNx; $/;"	m	class:MeshTool::MeshBlock	access:public
cNx_	Mesh.h	/^    int cNx_; \/\/cell nodes X direction$/;"	m	class:MeshTool::MeshBlock	access:private
cNy	Mesh.h	/^    int &cNy; $/;"	m	class:MeshTool::MeshBlock	access:public
cNy_	Mesh.h	/^    int cNy_; \/\/cell nodes Y direction$/;"	m	class:MeshTool::MeshBlock	access:private
cellDifference	Mesh.h	/^    void cellDifference();$/;"	p	class:MeshTool::MeshBlock	access:public	signature:()
col2	pressureCorrection.h	/^    int *col2;$/;"	m	class:PressureCorrect	access:private
col_ind	SparseLib++/comprow_double.h	/^       const int&         col_ind(int i) const { return colind_(i);}$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i) const
col_ind	SparseLib++/comprow_double.h	/^       int&         col_ind(int i) { return colind_(i);}$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i)
col_ind	SparseLib++/coord_double.h	/^       const int&         col_ind(int i) const { return colind_(i);}$/;"	f	class:Coord_Mat_double	access:public	signature:(int i) const
col_ind	SparseLib++/coord_double.h	/^       int&         col_ind(int i) { return colind_(i);}$/;"	f	class:Coord_Mat_double	access:public	signature:(int i)
col_ptr	SparseLib++/compcol_double.h	/^       const int&         col_ptr(int i) const { return colptr_(i);}$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i) const
col_ptr	SparseLib++/compcol_double.h	/^       int&         col_ptr(int i) { return colptr_(i);}$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i)
colind_	SparseLib++/comprow_double.h	/^       VECTOR_int    colind_;    \/\/ col_ind  (nz_ elements)$/;"	m	class:CompRow_Mat_double	access:private
colind_	SparseLib++/coord_double.h	/^       VECTOR_int    colind_;    \/\/ col_ind (nz_ elements)$/;"	m	class:Coord_Mat_double	access:private
colptr_	SparseLib++/compcol_double.h	/^       VECTOR_int    colptr_;    \/\/ col_ptr (dim_[1]+1 elements)$/;"	m	class:CompCol_Mat_double	access:private
computeInt	Staggered.h	/^	inline void computeInt(Array<Tprec,1> & ,Array<Tprec,1> &);$/;"	p	class:Staggered	access:public	signature:(Array<Tprec,1> & ,Array<Tprec,1> &)
computeInt	Staggered.h	/^inline void Interpolation<Tprec, Zone>::computeInt(Array<Tprec,1> &A ,Array<Tprec,1> &B){$/;"	f	class:Interpolation	signature:(Array<Tprec,1> &A ,Array<Tprec,1> &B)
dcoomm	SparseLib++/spblas.h	/^void F77NAME(dcoomm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &k, const double &alpha, const int descra[], const double *val, const int *indx, const int *jndx, const int &nnz, const double *b, const int &ldb, const double &beta, double *c, const int &ldc, double *work, const int &lwork)
dcscmm	SparseLib++/spblas.h	/^void F77NAME(dcscmm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &k, const double &alpha, const int descra[], const double *val, const int *indx, const int *pntr, const double *b, int &ldb, const double &beta, double *c, const int &ldc, double *work, const int &lwork)
dcscsm	SparseLib++/spblas.h	/^void F77NAME(dcscsm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &unitd, const double *dv, const double &alpha, const int descra[], const double *val, const int *indx, const int *pntr, const double *b, int &ldb, const double &beta, double *c, const int &ldc, double *work, const int &lwork)
dcsrmm	SparseLib++/spblas.h	/^void F77NAME(dcsrmm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &k, const double &alpha, const int descra[], const double *val, const int *indx, const int *pntr, const double *b, int &ldb, const double &beta, double *c, const int &ldc, double *work, const int &lwork)
dcsrsm	SparseLib++/spblas.h	/^void F77NAME(dcsrsm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &unitd, const double *dv, const double &alpha, const int descra[], const double *val, const int *indx, const int *pntr, const double *b, int &ldb, const double &beta, double *c, const int &ldc, double *work, const int &lwork)
diag	SparseLib++/diagpre_double.h	/^  const double&         diag(int i) const { return diag_(i); }$/;"	f	class:DiagPreconditioner_double	access:public	signature:(int i) const
diag	SparseLib++/diagpre_double.h	/^  double&           diag(int i) { return diag_(i); }$/;"	f	class:DiagPreconditioner_double	access:public	signature:(int i)
diag_	SparseLib++/diagpre_double.h	/^  VECTOR_double diag_;$/;"	m	class:DiagPreconditioner_double	access:private
dim	Mv++/mvmc.h	/^     int            dim(int i) const; $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(int i) const
dim	Mv++/mvmd.h	/^     int            dim(int i) const; $/;"	p	class:MV_ColMat_double	access:public	signature:(int i) const
dim	Mv++/mvmf.h	/^     int            dim(int i) const; $/;"	p	class:MV_ColMat_float	access:public	signature:(int i) const
dim	Mv++/mvmi.h	/^     int            dim(int i) const; $/;"	p	class:MV_ColMat_int	access:public	signature:(int i) const
dim	Mv++/mvmt.h	/^     int            dim(int i) const; $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(int i) const
dim	Mv++/mvvc.h	/^    inline  int             dim() const { return dim_;}$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:() const
dim	Mv++/mvvd.h	/^    inline  int             dim() const { return dim_;}$/;"	f	class:MV_Vector_double	access:public	signature:() const
dim	Mv++/mvvf.h	/^    inline  int             dim() const { return dim_;}$/;"	f	class:MV_Vector_float	access:public	signature:() const
dim	Mv++/mvvi.h	/^    inline  int             dim() const { return dim_;}$/;"	f	class:MV_Vector_int	access:public	signature:() const
dim	Mv++/mvvt.h	/^    inline  int             dim() const { return dim_;}$/;"	f	class:MV_Vector_$TYPE	access:public	signature:() const
dim	SparseLib++/compcol_double.h	/^       int          dim(int i) const {return dim_[i];};$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i) const
dim	SparseLib++/comprow_double.h	/^       int          dim(int i) const {return dim_[i];};$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i) const
dim	SparseLib++/coord_double.h	/^       int          dim(int i) const {return dim_[i];};$/;"	f	class:Coord_Mat_double	access:public	signature:(int i) const
dim0_	Mv++/mvmc.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_COMPLEX	access:private
dim0_	Mv++/mvmd.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_double	access:private
dim0_	Mv++/mvmf.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_float	access:private
dim0_	Mv++/mvmi.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_int	access:private
dim0_	Mv++/mvmt.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_$TYPE	access:private
dim0_	Mv++/mvmtp.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat	access:private
dim0_	Mv++/tmvmat.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_TYPE	access:private
dim0_	SparseLib++/tmvmat.h	/^           int dim0_;   \/\/ perferred to using dim_[2]. some compilers$/;"	m	class:MV_ColMat_TYPE	access:private
dim1_	Mv++/mvmc.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_COMPLEX	access:private
dim1_	Mv++/mvmd.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_double	access:private
dim1_	Mv++/mvmf.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_float	access:private
dim1_	Mv++/mvmi.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_int	access:private
dim1_	Mv++/mvmt.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_$TYPE	access:private
dim1_	Mv++/mvmtp.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat	access:private
dim1_	Mv++/tmvmat.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_TYPE	access:private
dim1_	SparseLib++/tmvmat.h	/^           int dim1_;   \/\/ refuse to initalize these in the constructor.$/;"	m	class:MV_ColMat_TYPE	access:private
dim_	Mv++/mvvc.h	/^            int dim_;$/;"	m	class:MV_Vector_COMPLEX	access:protected
dim_	Mv++/mvvd.h	/^            int dim_;$/;"	m	class:MV_Vector_double	access:protected
dim_	Mv++/mvvf.h	/^            int dim_;$/;"	m	class:MV_Vector_float	access:protected
dim_	Mv++/mvvi.h	/^            int dim_;$/;"	m	class:MV_Vector_int	access:protected
dim_	Mv++/mvvt.h	/^            int dim_;$/;"	m	class:MV_Vector_$TYPE	access:protected
dim_	Mv++/mvvtp.h	/^            int dim_;$/;"	m	class:MV_Vector	access:protected
dim_	SparseLib++/compcol_double.h	/^       int dim_[2];               \/\/ number of rows, cols$/;"	m	class:CompCol_Mat_double	access:private
dim_	SparseLib++/comprow_double.h	/^       int dim_[2];               \/\/ number of rows, cols$/;"	m	class:CompRow_Mat_double	access:private
dim_	SparseLib++/coord_double.h	/^       int dim_[2];               \/\/ number of rows, cols$/;"	m	class:Coord_Mat_double	access:private
dim_	SparseLib++/icpre_double.h	/^  int dim_[2];$/;"	m	class:ICPreconditioner_double	access:private
dim_	SparseLib++/ilupre_double.h	/^  int dim_[2];$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
dim_	SparseLib++/ilupre_double.h	/^  int dim_[2];$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
dim_	SparseLib++/tmvec.h	/^           unsigned int dim_;$/;"	m	class:MV_Vector_TYPE	access:protected
dot	Mv++/mvblas.h	/^TYPE dot(const MV_Vector<TYPE> &x, const MV_Vector<TYPE> &y)$/;"	f	signature:(const MV_Vector<TYPE> &x, const MV_Vector<TYPE> &y)
dot	Mv++/mvblasc.h	/^COMPLEX dot(const MV_Vector_COMPLEX &x, const MV_Vector_COMPLEX &y);$/;"	p	signature:(const MV_Vector_COMPLEX &x, const MV_Vector_COMPLEX &y)
dot	Mv++/mvblasd.h	/^double dot(const MV_Vector_double &x, const MV_Vector_double &y);$/;"	p	signature:(const MV_Vector_double &x, const MV_Vector_double &y)
dot	Mv++/mvblasf.h	/^float dot(const MV_Vector_float &x, const MV_Vector_float &y);$/;"	p	signature:(const MV_Vector_float &x, const MV_Vector_float &y)
dot	Mv++/mvblasi.h	/^int dot(const MV_Vector_int &x, const MV_Vector_int &y);$/;"	p	signature:(const MV_Vector_int &x, const MV_Vector_int &y)
dot	Mv++/mvblast.h	/^$TYPE dot(const MV_Vector_$TYPE &x, const MV_Vector_$TYPE &y);$/;"	p	signature:(const MV_Vector_$TYPE &x, const MV_Vector_$TYPE &y)
dot	Mv++/tblas1.h	/^TYPE dot(const MV_Vector_TYPE &x, const MV_Vector_TYPE &y);$/;"	p	signature:(const MV_Vector_TYPE &x, const MV_Vector_TYPE &y)
dot	SparseLib++/tblas1.h	/^TYPE dot(const MV_Vector_TYPE &x, const MV_Vector_TYPE &y);$/;"	p	signature:(const MV_Vector_TYPE &x, const MV_Vector_TYPE &y)
e1	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
e2	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
e3	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
e4	Staggered.h	/^	Tprec a, b, e1, e2, e3, e4;$/;"	m	class:Staggered	access:private
elements	pressureCorrection.h	/^    int elements; $/;"	m	class:PressureCorrect	access:private
end	Mv++/mvvind.h	/^        int end() const { return (all_ ==1) ? 0 : end_;}$/;"	f	class:MV_VecIndex	access:public	signature:() const
end_	Mv++/mvvind.h	/^             int end_;       $/;"	m	class:MV_VecIndex	access:private
getIJ	Staggered.h	/^	inline Array<Tprec,2> getIJ();$/;"	p	class:Staggered	access:public	signature:()
getIJ	Staggered.h	/^inline Array<Tprec,2>Interpolation<Tprec,Zone>::getIJ(){$/;"	f	class:Interpolation	signature:()
getP	Staggered.h	/^	inline Array<Tprec,2> getP();$/;"	p	class:Staggered	access:public	signature:()
getP	Staggered.h	/^inline Array<Tprec,2>Interpolation<Tprec,Zone>::getP(){$/;"	f	class:Interpolation	signature:()
index	SparseLib++/minstr.h	/^int index(char * S, char M);$/;"	p	signature:(char * S, char M)
indx_	SparseLib++/icpre_double.h	/^  VECTOR_int    indx_;$/;"	m	class:ICPreconditioner_double	access:private
inverseDx	Mesh.h	/^    const real &inverseDx;$/;"	m	class:MeshTool::MeshBlock	access:public
inverseDx_	Mesh.h	/^    real inverseDx_;\/\/Gets the inverse of the delta X$/;"	m	class:MeshTool::MeshBlock	access:private
inverseDy	Mesh.h	/^    const real &inverseDy;$/;"	m	class:MeshTool::MeshBlock	access:public
inverseDy_	Mesh.h	/^    real inverseDy_;\/\/Gets the inverse of the delta Y$/;"	m	class:MeshTool::MeshBlock	access:private
l_colind_	SparseLib++/ilupre_double.h	/^  VECTOR_int    l_colind_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
l_colptr_	SparseLib++/ilupre_double.h	/^  VECTOR_int    l_colptr_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
l_nz_	SparseLib++/ilupre_double.h	/^  int l_nz_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
l_nz_	SparseLib++/ilupre_double.h	/^  int l_nz_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
l_rowind_	SparseLib++/ilupre_double.h	/^  VECTOR_int    l_rowind_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
l_rowptr_	SparseLib++/ilupre_double.h	/^  VECTOR_int    l_rowptr_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
l_val_	SparseLib++/ilupre_double.h	/^  VECTOR_double l_val_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
l_val_	SparseLib++/ilupre_double.h	/^  VECTOR_double l_val_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
lda	Mv++/mvmc.h	/^     int            lda(void) const{ return lda_; }$/;"	f	class:MV_ColMat_COMPLEX	access:public	signature:(void) const
lda	Mv++/mvmd.h	/^     int            lda(void) const{ return lda_; }$/;"	f	class:MV_ColMat_double	access:public	signature:(void) const
lda	Mv++/mvmf.h	/^     int            lda(void) const{ return lda_; }$/;"	f	class:MV_ColMat_float	access:public	signature:(void) const
lda	Mv++/mvmi.h	/^     int            lda(void) const{ return lda_; }$/;"	f	class:MV_ColMat_int	access:public	signature:(void) const
lda	Mv++/mvmt.h	/^     int            lda(void) const{ return lda_; }$/;"	f	class:MV_ColMat_$TYPE	access:public	signature:(void) const
lda_	Mv++/mvmc.h	/^           int lda_;$/;"	m	class:MV_ColMat_COMPLEX	access:private
lda_	Mv++/mvmd.h	/^           int lda_;$/;"	m	class:MV_ColMat_double	access:private
lda_	Mv++/mvmf.h	/^           int lda_;$/;"	m	class:MV_ColMat_float	access:private
lda_	Mv++/mvmi.h	/^           int lda_;$/;"	m	class:MV_ColMat_int	access:private
lda_	Mv++/mvmt.h	/^           int lda_;$/;"	m	class:MV_ColMat_$TYPE	access:private
lda_	Mv++/mvmtp.h	/^           int lda_;$/;"	m	class:MV_ColMat	access:private
lda_	Mv++/tmvmat.h	/^           int lda_;$/;"	m	class:MV_ColMat_TYPE	access:private
lda_	SparseLib++/tmvmat.h	/^           int lda_;$/;"	m	class:MV_ColMat_TYPE	access:private
length	Mv++/mvvind.h	/^        int length() const { $/;"	f	class:MV_VecIndex	access:public	signature:() const
lx	Mesh.h	/^    real lx, ly; \/\/longitud X-Axis Y-Axix$/;"	m	class:MeshTool::MeshBlock	access:private
ly	Mesh.h	/^    real lx, ly; \/\/longitud X-Axis Y-Axix$/;"	m	class:MeshTool::MeshBlock	access:private
mainBand	Staggered.h	/^	Array<Tprec,1> mainBand, bandA, bandC;$/;"	m	class:Staggered	access:private
maxit	pressureCorrection.h	/^    int maxit, restart;$/;"	m	class:PressureCorrect	access:private
newsize	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX&        newsize( int,  int);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:( int, int)
newsize	Mv++/mvmd.h	/^    MV_ColMat_double&        newsize( int,  int);$/;"	p	class:MV_ColMat_double	access:public	signature:( int, int)
newsize	Mv++/mvmf.h	/^    MV_ColMat_float&        newsize( int,  int);$/;"	p	class:MV_ColMat_float	access:public	signature:( int, int)
newsize	Mv++/mvmi.h	/^    MV_ColMat_int&      newsize( int,  int);$/;"	p	class:MV_ColMat_int	access:public	signature:( int, int)
newsize	Mv++/mvmt.h	/^    MV_ColMat_$TYPE&        newsize( int,  int);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:( int, int)
newsize	Mv++/mvmtp.h	/^    MV_ColMat<TYPE>&        newsize( int,  int);$/;"	p	class:MV_ColMat	access:public	signature:( int, int)
newsize	Mv++/mvmtp.h	/^MV_ColMat<TYPE>& MV_ColMat<TYPE>::newsize( int M,  int N)$/;"	f	class:MV_ColMat	signature:( int M, int N)
newsize	Mv++/mvvc.h	/^            MV_Vector_COMPLEX & newsize( int );$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:( int )
newsize	Mv++/mvvd.h	/^            MV_Vector_double & newsize( int );$/;"	p	class:MV_Vector_double	access:public	signature:( int )
newsize	Mv++/mvvf.h	/^            MV_Vector_float & newsize( int );$/;"	p	class:MV_Vector_float	access:public	signature:( int )
newsize	Mv++/mvvi.h	/^            MV_Vector_int & newsize( int );$/;"	p	class:MV_Vector_int	access:public	signature:( int )
newsize	Mv++/mvvt.h	/^            MV_Vector_$TYPE & newsize( int );$/;"	p	class:MV_Vector_$TYPE	access:public	signature:( int )
newsize	Mv++/mvvtp.h	/^            MV_Vector<TYPE> & newsize( int );$/;"	p	class:MV_Vector	access:public	signature:( int )
newsize	Mv++/mvvtp.h	/^MV_Vector<TYPE>& MV_Vector<TYPE>::newsize( int n)$/;"	f	class:MV_Vector	signature:( int n)
newsize	Mv++/tmvmat.h	/^    MV_ColMat_TYPE&         newsize( int,  int);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:( int, int)
newsize	SparseLib++/compcol_double.h	/^       CompCol_Mat_double& newsize(int M, int N, int nz);$/;"	p	class:CompCol_Mat_double	access:public	signature:(int M, int N, int nz)
newsize	SparseLib++/comprow_double.h	/^       CompRow_Mat_double& newsize(int M, int N, int nz);$/;"	p	class:CompRow_Mat_double	access:public	signature:(int M, int N, int nz)
newsize	SparseLib++/coord_double.h	/^       Coord_Mat_double& newsize(int M, int N, int nz);$/;"	p	class:Coord_Mat_double	access:public	signature:(int M, int N, int nz)
newsize	SparseLib++/tmvec.h	/^            MV_Vector_TYPE & newsize(unsigned int );$/;"	p	class:MV_Vector_TYPE	access:public	signature:(unsigned int )
newsize	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE&         newsize(unsigned int, unsigned int);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(unsigned int, unsigned int)
norm	Mv++/mvblas.h	/^TYPE norm(const MV_Vector<TYPE> &x)$/;"	f	signature:(const MV_Vector<TYPE> &x)
norm	Mv++/mvblasc.h	/^COMPLEX norm(const MV_Vector_COMPLEX &x);$/;"	p	signature:(const MV_Vector_COMPLEX &x)
norm	Mv++/mvblasd.h	/^double norm(const MV_Vector_double &x);$/;"	p	signature:(const MV_Vector_double &x)
norm	Mv++/mvblasf.h	/^float norm(const MV_Vector_float &x);$/;"	p	signature:(const MV_Vector_float &x)
norm	Mv++/mvblasi.h	/^int norm(const MV_Vector_int &x);$/;"	p	signature:(const MV_Vector_int &x)
norm	Mv++/mvblast.h	/^$TYPE norm(const MV_Vector_$TYPE &x);$/;"	p	signature:(const MV_Vector_$TYPE &x)
norm	Mv++/tblas1.h	/^TYPE norm(const MV_Vector_TYPE &x);$/;"	p	signature:(const MV_Vector_TYPE &x)
norm	SparseLib++/tblas1.h	/^TYPE norm(const MV_Vector_TYPE &x);$/;"	p	signature:(const MV_Vector_TYPE &x)
null	Mv++/mvvc.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:() const
null	Mv++/mvvd.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_double	access:public	signature:() const
null	Mv++/mvvf.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_float	access:public	signature:() const
null	Mv++/mvvi.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_int	access:public	signature:() const
null	Mv++/mvvt.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_$TYPE	access:public	signature:() const
null	Mv++/mvvtp.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector	access:public	signature:() const
null	SparseLib++/tmvec.h	/^    inline int                      null() const {return dim_== 0;}$/;"	f	class:MV_Vector_TYPE	access:public	signature:() const
nz_	SparseLib++/compcol_double.h	/^       int nz_;                   \/\/ number of nonzeros$/;"	m	class:CompCol_Mat_double	access:private
nz_	SparseLib++/comprow_double.h	/^       int nz_;                   \/\/ number of nonzeros$/;"	m	class:CompRow_Mat_double	access:private
nz_	SparseLib++/coord_double.h	/^       int nz_;                   \/\/ number of nonzeros$/;"	m	class:Coord_Mat_double	access:private
nz_	SparseLib++/icpre_double.h	/^  int nz_;$/;"	m	class:ICPreconditioner_double	access:private
operator ()	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
operator ()	Mv++/mvmc.h	/^    const MV_ColMat_COMPLEX operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
operator ()	Mv++/mvmc.h	/^    inline COMPLEX&       operator()( int,  int); $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:( int, int)
operator ()	Mv++/mvmc.h	/^    inline const COMPLEX& operator()( int,  int) const; $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:( int, int) const
operator ()	Mv++/mvmc.h	/^inline COMPLEX& MV_ColMat_COMPLEX::operator()( int i,  int j)$/;"	f	class:MV_ColMat_COMPLEX	signature:( int i, int j)
operator ()	Mv++/mvmc.h	/^inline const COMPLEX& MV_ColMat_COMPLEX::operator()$/;"	f	class:MV_ColMat_COMPLEX	signature:( int i, int j) const
operator ()	Mv++/mvmd.h	/^    MV_ColMat_double operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_double	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
operator ()	Mv++/mvmd.h	/^    const MV_ColMat_double operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_double	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
operator ()	Mv++/mvmd.h	/^    inline const double& operator()( int,  int) const; $/;"	p	class:MV_ColMat_double	access:public	signature:( int, int) const
operator ()	Mv++/mvmd.h	/^    inline double&       operator()( int,  int); $/;"	p	class:MV_ColMat_double	access:public	signature:( int, int)
operator ()	Mv++/mvmd.h	/^inline const double& MV_ColMat_double::operator()$/;"	f	class:MV_ColMat_double	signature:( int i, int j) const
operator ()	Mv++/mvmd.h	/^inline double& MV_ColMat_double::operator()( int i,  int j)$/;"	f	class:MV_ColMat_double	signature:( int i, int j)
operator ()	Mv++/mvmf.h	/^    MV_ColMat_float operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_float	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
operator ()	Mv++/mvmf.h	/^    const MV_ColMat_float operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_float	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
operator ()	Mv++/mvmf.h	/^    inline const float& operator()( int,  int) const; $/;"	p	class:MV_ColMat_float	access:public	signature:( int, int) const
operator ()	Mv++/mvmf.h	/^    inline float&       operator()( int,  int); $/;"	p	class:MV_ColMat_float	access:public	signature:( int, int)
operator ()	Mv++/mvmf.h	/^inline const float& MV_ColMat_float::operator()$/;"	f	class:MV_ColMat_float	signature:( int i, int j) const
operator ()	Mv++/mvmf.h	/^inline float& MV_ColMat_float::operator()( int i,  int j)$/;"	f	class:MV_ColMat_float	signature:( int i, int j)
operator ()	Mv++/mvmi.h	/^    MV_ColMat_int operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_int	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
operator ()	Mv++/mvmi.h	/^    const MV_ColMat_int operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_int	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
operator ()	Mv++/mvmi.h	/^    inline const int&   operator()( int,  int) const; $/;"	p	class:MV_ColMat_int	access:public	signature:( int, int) const
operator ()	Mv++/mvmi.h	/^    inline int&     operator()( int,  int); $/;"	p	class:MV_ColMat_int	access:public	signature:( int, int)
operator ()	Mv++/mvmi.h	/^inline const int& MV_ColMat_int::operator()$/;"	f	class:MV_ColMat_int	signature:( int i, int j) const
operator ()	Mv++/mvmi.h	/^inline int& MV_ColMat_int::operator()( int i,  int j)$/;"	f	class:MV_ColMat_int	signature:( int i, int j)
operator ()	Mv++/mvmt.h	/^    MV_ColMat_$TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
operator ()	Mv++/mvmt.h	/^    const MV_ColMat_$TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
operator ()	Mv++/mvmt.h	/^    inline $TYPE&       operator()( int,  int); $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:( int, int)
operator ()	Mv++/mvmt.h	/^    inline const $TYPE& operator()( int,  int) const; $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:( int, int) const
operator ()	Mv++/mvmt.h	/^inline $TYPE& MV_ColMat_$TYPE::operator()( int i,  int j)$/;"	f	class:MV_ColMat_$TYPE	signature:( int i, int j)
operator ()	Mv++/mvmt.h	/^inline const $TYPE& MV_ColMat_$TYPE::operator()$/;"	f	class:MV_ColMat_$TYPE	signature:( int i, int j) const
operator ()	Mv++/mvmtp.h	/^    MV_ColMat<TYPE> operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
operator ()	Mv++/mvmtp.h	/^    const MV_ColMat<TYPE> operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
operator ()	Mv++/mvmtp.h	/^    inline TYPE&        operator()( int,  int); $/;"	p	class:MV_ColMat	access:public	signature:( int, int)
operator ()	Mv++/mvmtp.h	/^    inline const TYPE&  operator()( int,  int) const; $/;"	p	class:MV_ColMat	access:public	signature:( int, int) const
operator ()	Mv++/mvmtp.h	/^MV_ColMat<TYPE> MV_ColMat<TYPE>::operator()(const MV_VecIndex &I, const MV_VecIndex &J)$/;"	f	class:MV_ColMat	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
operator ()	Mv++/mvmtp.h	/^const MV_ColMat<TYPE> MV_ColMat<TYPE>::operator()(const MV_VecIndex &I, $/;"	f	class:MV_ColMat	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
operator ()	Mv++/mvmtp.h	/^inline TYPE& MV_ColMat<TYPE>::operator()( int i,  int j)$/;"	f	class:MV_ColMat	signature:( int i, int j)
operator ()	Mv++/mvmtp.h	/^inline const TYPE& MV_ColMat<TYPE>::operator()$/;"	f	class:MV_ColMat	signature:( int i, int j) const
operator ()	Mv++/mvvc.h	/^    COMPLEX&      operator()( int i)$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:( int i)
operator ()	Mv++/mvvc.h	/^    MV_Vector_COMPLEX operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const MV_VecIndex &I)
operator ()	Mv++/mvvc.h	/^    MV_Vector_COMPLEX operator()(void);$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(void)
operator ()	Mv++/mvvc.h	/^    const  COMPLEX&       operator()( int i) const $/;"	f	class:MV_Vector_COMPLEX	access:public	signature:( int i) const
operator ()	Mv++/mvvc.h	/^    const MV_Vector_COMPLEX operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const MV_VecIndex &I) const
operator ()	Mv++/mvvc.h	/^    const MV_Vector_COMPLEX operator()(void) const;$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(void) const
operator ()	Mv++/mvvd.h	/^    MV_Vector_double operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_double	access:public	signature:(const MV_VecIndex &I)
operator ()	Mv++/mvvd.h	/^    MV_Vector_double operator()(void);$/;"	p	class:MV_Vector_double	access:public	signature:(void)
operator ()	Mv++/mvvd.h	/^    const  double&       operator()( int i) const $/;"	f	class:MV_Vector_double	access:public	signature:( int i) const
operator ()	Mv++/mvvd.h	/^    const MV_Vector_double operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_double	access:public	signature:(const MV_VecIndex &I) const
operator ()	Mv++/mvvd.h	/^    const MV_Vector_double operator()(void) const;$/;"	p	class:MV_Vector_double	access:public	signature:(void) const
operator ()	Mv++/mvvd.h	/^    double&      operator()( int i)$/;"	f	class:MV_Vector_double	access:public	signature:( int i)
operator ()	Mv++/mvvf.h	/^    MV_Vector_float operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_float	access:public	signature:(const MV_VecIndex &I)
operator ()	Mv++/mvvf.h	/^    MV_Vector_float operator()(void);$/;"	p	class:MV_Vector_float	access:public	signature:(void)
operator ()	Mv++/mvvf.h	/^    const  float&       operator()( int i) const $/;"	f	class:MV_Vector_float	access:public	signature:( int i) const
operator ()	Mv++/mvvf.h	/^    const MV_Vector_float operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_float	access:public	signature:(const MV_VecIndex &I) const
operator ()	Mv++/mvvf.h	/^    const MV_Vector_float operator()(void) const;$/;"	p	class:MV_Vector_float	access:public	signature:(void) const
operator ()	Mv++/mvvf.h	/^    float&      operator()( int i)$/;"	f	class:MV_Vector_float	access:public	signature:( int i)
operator ()	Mv++/mvvi.h	/^    MV_Vector_int operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_int	access:public	signature:(const MV_VecIndex &I)
operator ()	Mv++/mvvi.h	/^    MV_Vector_int operator()(void);$/;"	p	class:MV_Vector_int	access:public	signature:(void)
operator ()	Mv++/mvvi.h	/^    const  int&       operator()( int i) const $/;"	f	class:MV_Vector_int	access:public	signature:( int i) const
operator ()	Mv++/mvvi.h	/^    const MV_Vector_int operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_int	access:public	signature:(const MV_VecIndex &I) const
operator ()	Mv++/mvvi.h	/^    const MV_Vector_int operator()(void) const;$/;"	p	class:MV_Vector_int	access:public	signature:(void) const
operator ()	Mv++/mvvi.h	/^    int&      operator()( int i)$/;"	f	class:MV_Vector_int	access:public	signature:( int i)
operator ()	Mv++/mvvt.h	/^    $TYPE&      operator()( int i)$/;"	f	class:MV_Vector_$TYPE	access:public	signature:( int i)
operator ()	Mv++/mvvt.h	/^    MV_Vector_$TYPE operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const MV_VecIndex &I)
operator ()	Mv++/mvvt.h	/^    MV_Vector_$TYPE operator()(void);$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(void)
operator ()	Mv++/mvvt.h	/^    const  $TYPE&       operator()( int i) const $/;"	f	class:MV_Vector_$TYPE	access:public	signature:( int i) const
operator ()	Mv++/mvvt.h	/^    const MV_Vector_$TYPE operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const MV_VecIndex &I) const
operator ()	Mv++/mvvt.h	/^    const MV_Vector_$TYPE operator()(void) const;$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(void) const
operator ()	Mv++/mvvtp.h	/^    inline            TYPE&     operator()( int i)$/;"	f	class:MV_Vector	access:public	signature:( int i)
operator ()	Mv++/mvvtp.h	/^    inline  const  TYPE&    operator()( int i) const $/;"	f	class:MV_Vector	access:public	signature:( int i) const
operator ()	Mv++/mvvtp.h	/^    inline MV_Vector<TYPE> operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector	access:public	signature:(const MV_VecIndex &I)
operator ()	Mv++/mvvtp.h	/^    inline MV_Vector<TYPE> operator()(void);$/;"	p	class:MV_Vector	access:public	signature:(void)
operator ()	Mv++/mvvtp.h	/^    inline const MV_Vector<TYPE> operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector	access:public	signature:(const MV_VecIndex &I) const
operator ()	Mv++/mvvtp.h	/^    inline const MV_Vector<TYPE> operator()(void) const;$/;"	p	class:MV_Vector	access:public	signature:(void) const
operator ()	Mv++/mvvtp.h	/^MV_Vector<TYPE> MV_Vector<TYPE>::operator()(const MV_VecIndex &I) $/;"	f	class:MV_Vector	signature:(const MV_VecIndex &I)
operator ()	Mv++/mvvtp.h	/^MV_Vector<TYPE> MV_Vector<TYPE>::operator()(void)$/;"	f	class:MV_Vector	signature:(void)
operator ()	Mv++/mvvtp.h	/^const MV_Vector<TYPE> MV_Vector<TYPE>::operator()(const MV_VecIndex &I) const$/;"	f	class:MV_Vector	signature:(const MV_VecIndex &I) const
operator ()	Mv++/mvvtp.h	/^const MV_Vector<TYPE> MV_Vector<TYPE>::operator()(void) const$/;"	f	class:MV_Vector	signature:(void) const
operator ()	Mv++/tmvmat.h	/^    MV_ColMat_TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
operator ()	Mv++/tmvmat.h	/^    const MV_ColMat_TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
operator ()	Mv++/tmvmat.h	/^    inline TYPE&        operator()( int,  int); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:( int, int)
operator ()	Mv++/tmvmat.h	/^    inline const TYPE&  operator()( int,  int) const; $/;"	p	class:MV_ColMat_TYPE	access:public	signature:( int, int) const
operator ()	Mv++/tmvmat.h	/^inline TYPE& MV_ColMat_TYPE::operator()( int i,  int j)$/;"	f	class:MV_ColMat_TYPE	signature:( int i, int j)
operator ()	Mv++/tmvmat.h	/^inline const TYPE& MV_ColMat_TYPE::operator()$/;"	f	class:MV_ColMat_TYPE	signature:( int i, int j) const
operator ()	SparseLib++/compcol_double.h	/^       double       operator() (int i, int j) const;               $/;"	p	class:CompCol_Mat_double	access:public	signature:(int i, int j) const
operator ()	SparseLib++/comprow_double.h	/^       double       operator() (int i, int j) const;        $/;"	p	class:CompRow_Mat_double	access:public	signature:(int i, int j) const
operator ()	SparseLib++/coord_double.h	/^       double       operator() (int i, int j) const;        $/;"	p	class:Coord_Mat_double	access:public	signature:(int i, int j) const
operator ()	SparseLib++/tmvec.h	/^    MV_Vector_TYPE operator()(const MV_VecIndex &I) ;$/;"	p	class:MV_Vector_TYPE	access:public	signature:(const MV_VecIndex &I)
operator ()	SparseLib++/tmvec.h	/^    MV_Vector_TYPE operator()(void);$/;"	p	class:MV_Vector_TYPE	access:public	signature:(void)
operator ()	SparseLib++/tmvec.h	/^    TYPE&       operator()(unsigned int i)$/;"	f	class:MV_Vector_TYPE	access:public	signature:(unsigned int i)
operator ()	SparseLib++/tmvec.h	/^    const  TYPE&    operator()(unsigned int i) const $/;"	f	class:MV_Vector_TYPE	access:public	signature:(unsigned int i) const
operator ()	SparseLib++/tmvec.h	/^    const MV_Vector_TYPE operator()(const MV_VecIndex &I) const;$/;"	p	class:MV_Vector_TYPE	access:public	signature:(const MV_VecIndex &I) const
operator ()	SparseLib++/tmvec.h	/^    const MV_Vector_TYPE operator()(void) const;$/;"	p	class:MV_Vector_TYPE	access:public	signature:(void) const
operator ()	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) ;$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J)
operator ()	SparseLib++/tmvmat.h	/^    const MV_ColMat_TYPE operator()(const MV_VecIndex &I, const MV_VecIndex &J) const;$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_VecIndex &I, const MV_VecIndex &J) const
operator ()	SparseLib++/tmvmat.h	/^    inline TYPE&        operator()(unsigned int, unsigned int); $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(unsigned int, unsigned int)
operator ()	SparseLib++/tmvmat.h	/^    inline const TYPE&  operator()(unsigned int, unsigned int) const; $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(unsigned int, unsigned int) const
operator ()	SparseLib++/tmvmat.h	/^inline TYPE& MV_ColMat_TYPE::operator()(unsigned int i, unsigned int j)$/;"	f	class:MV_ColMat_TYPE	signature:(unsigned int i, unsigned int j)
operator ()	SparseLib++/tmvmat.h	/^inline const TYPE& MV_ColMat_TYPE::operator()$/;"	f	class:MV_ColMat_TYPE	signature:(unsigned int i, unsigned int j) const
operator *	Mv++/mvblas.h	/^MV_Vector<TYPE> operator*(const MV_Vector<TYPE> &x, const TYPE &a)$/;"	f	signature:(const MV_Vector<TYPE> &x, const TYPE &a)
operator *	Mv++/mvblas.h	/^MV_Vector<TYPE> operator*(const TYPE &a, const MV_Vector<TYPE> &x)$/;"	f	signature:(const TYPE &a, const MV_Vector<TYPE> &x)
operator *	Mv++/mvblasc.h	/^MV_Vector_COMPLEX operator*(const COMPLEX &a, const MV_Vector_COMPLEX &x);$/;"	p	signature:(const COMPLEX &a, const MV_Vector_COMPLEX &x)
operator *	Mv++/mvblasc.h	/^MV_Vector_COMPLEX operator*(const MV_Vector_COMPLEX &x, const COMPLEX &a);$/;"	p	signature:(const MV_Vector_COMPLEX &x, const COMPLEX &a)
operator *	Mv++/mvblasd.h	/^MV_Vector_double operator*(const MV_Vector_double &x, const double &a);$/;"	p	signature:(const MV_Vector_double &x, const double &a)
operator *	Mv++/mvblasd.h	/^MV_Vector_double operator*(const double &a, const MV_Vector_double &x);$/;"	p	signature:(const double &a, const MV_Vector_double &x)
operator *	Mv++/mvblasf.h	/^MV_Vector_float operator*(const MV_Vector_float &x, const float &a);$/;"	p	signature:(const MV_Vector_float &x, const float &a)
operator *	Mv++/mvblasf.h	/^MV_Vector_float operator*(const float &a, const MV_Vector_float &x);$/;"	p	signature:(const float &a, const MV_Vector_float &x)
operator *	Mv++/mvblasi.h	/^MV_Vector_int operator*(const MV_Vector_int &x, const int &a);$/;"	p	signature:(const MV_Vector_int &x, const int &a)
operator *	Mv++/mvblasi.h	/^MV_Vector_int operator*(const int &a, const MV_Vector_int &x);$/;"	p	signature:(const int &a, const MV_Vector_int &x)
operator *	Mv++/mvblast.h	/^MV_Vector_$TYPE operator*(const $TYPE &a, const MV_Vector_$TYPE &x);$/;"	p	signature:(const $TYPE &a, const MV_Vector_$TYPE &x)
operator *	Mv++/mvblast.h	/^MV_Vector_$TYPE operator*(const MV_Vector_$TYPE &x, const $TYPE &a);$/;"	p	signature:(const MV_Vector_$TYPE &x, const $TYPE &a)
operator *	Mv++/tblas1.h	/^MV_Vector_TYPE operator*(const MV_Vector_TYPE &x, const TYPE &a);$/;"	p	signature:(const MV_Vector_TYPE &x, const TYPE &a)
operator *	Mv++/tblas1.h	/^MV_Vector_TYPE operator*(const TYPE &a, const MV_Vector_TYPE &x);$/;"	p	signature:(const TYPE &a, const MV_Vector_TYPE &x)
operator *	SparseLib++/compcol_double.h	/^       VECTOR_double operator*(const VECTOR_double &x) const;$/;"	p	class:CompCol_Mat_double	access:public	signature:(const VECTOR_double &x) const
operator *	SparseLib++/comprow_double.h	/^       VECTOR_double operator*(const VECTOR_double &x) const;$/;"	p	class:CompRow_Mat_double	access:public	signature:(const VECTOR_double &x) const
operator *	SparseLib++/coord_double.h	/^       VECTOR_double operator*(const VECTOR_double &x) const;$/;"	p	class:Coord_Mat_double	access:public	signature:(const VECTOR_double &x) const
operator *	SparseLib++/tblas1.h	/^MV_Vector_TYPE operator*(const MV_Vector_TYPE &x, const TYPE &a);$/;"	p	signature:(const MV_Vector_TYPE &x, const TYPE &a)
operator *	SparseLib++/tblas1.h	/^MV_Vector_TYPE operator*(const TYPE &a, const MV_Vector_TYPE &x);$/;"	p	signature:(const TYPE &a, const MV_Vector_TYPE &x)
operator *=	Mv++/mvblas.h	/^MV_Vector<TYPE>& operator*=(MV_Vector<TYPE> &x, const TYPE &a)$/;"	f	signature:(MV_Vector<TYPE> &x, const TYPE &a)
operator *=	Mv++/mvblasc.h	/^MV_Vector_COMPLEX& operator*=(MV_Vector_COMPLEX &x, const COMPLEX &a);$/;"	p	signature:(MV_Vector_COMPLEX &x, const COMPLEX &a)
operator *=	Mv++/mvblasd.h	/^MV_Vector_double& operator*=(MV_Vector_double &x, const double &a);$/;"	p	signature:(MV_Vector_double &x, const double &a)
operator *=	Mv++/mvblasf.h	/^MV_Vector_float& operator*=(MV_Vector_float &x, const float &a);$/;"	p	signature:(MV_Vector_float &x, const float &a)
operator *=	Mv++/mvblasi.h	/^MV_Vector_int& operator*=(MV_Vector_int &x, const int &a);$/;"	p	signature:(MV_Vector_int &x, const int &a)
operator *=	Mv++/mvblast.h	/^MV_Vector_$TYPE& operator*=(MV_Vector_$TYPE &x, const $TYPE &a);$/;"	p	signature:(MV_Vector_$TYPE &x, const $TYPE &a)
operator *=	Mv++/tblas1.h	/^MV_Vector_TYPE& operator*=(MV_Vector_TYPE &x, const TYPE &a);$/;"	p	signature:(MV_Vector_TYPE &x, const TYPE &a)
operator *=	SparseLib++/tblas1.h	/^MV_Vector_TYPE& operator*=(MV_Vector_TYPE &x, const TYPE &a);$/;"	p	signature:(MV_Vector_TYPE &x, const TYPE &a)
operator +	Mv++/mvblas.h	/^MV_Vector<TYPE> operator+(const MV_Vector<TYPE> &x, const MV_Vector<TYPE> &y)$/;"	f	signature:(const MV_Vector<TYPE> &x, const MV_Vector<TYPE> &y)
operator +	Mv++/mvblasc.h	/^MV_Vector_COMPLEX operator+(const MV_Vector_COMPLEX &x, $/;"	p	signature:(const MV_Vector_COMPLEX &x, const MV_Vector_COMPLEX &y)
operator +	Mv++/mvblasd.h	/^MV_Vector_double operator+(const MV_Vector_double &x, $/;"	p	signature:(const MV_Vector_double &x, const MV_Vector_double &y)
operator +	Mv++/mvblasf.h	/^MV_Vector_float operator+(const MV_Vector_float &x, $/;"	p	signature:(const MV_Vector_float &x, const MV_Vector_float &y)
operator +	Mv++/mvblasi.h	/^MV_Vector_int operator+(const MV_Vector_int &x, $/;"	p	signature:(const MV_Vector_int &x, const MV_Vector_int &y)
operator +	Mv++/mvblast.h	/^MV_Vector_$TYPE operator+(const MV_Vector_$TYPE &x, $/;"	p	signature:(const MV_Vector_$TYPE &x, const MV_Vector_$TYPE &y)
operator +	Mv++/mvvind.h	/^        MV_VecIndex operator+(int i)$/;"	f	class:MV_VecIndex	access:public	signature:(int i)
operator +	Mv++/tblas1.h	/^MV_Vector_TYPE operator+(const MV_Vector_TYPE &x, $/;"	p	signature:(const MV_Vector_TYPE &x, const MV_Vector_TYPE &y)
operator +	SparseLib++/tblas1.h	/^MV_Vector_TYPE operator+(const MV_Vector_TYPE &x, $/;"	p	signature:(const MV_Vector_TYPE &x, const MV_Vector_TYPE &y)
operator +=	Mv++/mvblas.h	/^MV_Vector<TYPE>& operator+=(MV_Vector<TYPE> &x, const MV_Vector<TYPE> &y)$/;"	f	signature:(MV_Vector<TYPE> &x, const MV_Vector<TYPE> &y)
operator +=	Mv++/mvblasc.h	/^MV_Vector_COMPLEX& operator+=(MV_Vector_COMPLEX &x, const MV_Vector_COMPLEX &y);$/;"	p	signature:(MV_Vector_COMPLEX &x, const MV_Vector_COMPLEX &y)
operator +=	Mv++/mvblasd.h	/^MV_Vector_double& operator+=(MV_Vector_double &x, const MV_Vector_double &y);$/;"	p	signature:(MV_Vector_double &x, const MV_Vector_double &y)
operator +=	Mv++/mvblasf.h	/^MV_Vector_float& operator+=(MV_Vector_float &x, const MV_Vector_float &y);$/;"	p	signature:(MV_Vector_float &x, const MV_Vector_float &y)
operator +=	Mv++/mvblasi.h	/^MV_Vector_int& operator+=(MV_Vector_int &x, const MV_Vector_int &y);$/;"	p	signature:(MV_Vector_int &x, const MV_Vector_int &y)
operator +=	Mv++/mvblast.h	/^MV_Vector_$TYPE& operator+=(MV_Vector_$TYPE &x, const MV_Vector_$TYPE &y);$/;"	p	signature:(MV_Vector_$TYPE &x, const MV_Vector_$TYPE &y)
operator +=	Mv++/mvvind.h	/^        MV_VecIndex& operator+=(int i)$/;"	f	class:MV_VecIndex	access:public	signature:(int i)
operator +=	Mv++/tblas1.h	/^MV_Vector_TYPE& operator+=(MV_Vector_TYPE &x, const MV_Vector_TYPE &y);$/;"	p	signature:(MV_Vector_TYPE &x, const MV_Vector_TYPE &y)
operator +=	SparseLib++/tblas1.h	/^MV_Vector_TYPE& operator+=(MV_Vector_TYPE &x, const MV_Vector_TYPE &y);$/;"	p	signature:(MV_Vector_TYPE &x, const MV_Vector_TYPE &y)
operator -	Mv++/mvblas.h	/^MV_Vector<TYPE> operator-(const MV_Vector<TYPE> &x, const MV_Vector<TYPE> &y)$/;"	f	signature:(const MV_Vector<TYPE> &x, const MV_Vector<TYPE> &y)
operator -	Mv++/mvblasc.h	/^MV_Vector_COMPLEX operator-(const MV_Vector_COMPLEX &x, $/;"	p	signature:(const MV_Vector_COMPLEX &x, const MV_Vector_COMPLEX &y)
operator -	Mv++/mvblasd.h	/^MV_Vector_double operator-(const MV_Vector_double &x, $/;"	p	signature:(const MV_Vector_double &x, const MV_Vector_double &y)
operator -	Mv++/mvblasf.h	/^MV_Vector_float operator-(const MV_Vector_float &x, $/;"	p	signature:(const MV_Vector_float &x, const MV_Vector_float &y)
operator -	Mv++/mvblasi.h	/^MV_Vector_int operator-(const MV_Vector_int &x, $/;"	p	signature:(const MV_Vector_int &x, const MV_Vector_int &y)
operator -	Mv++/mvblast.h	/^MV_Vector_$TYPE operator-(const MV_Vector_$TYPE &x, $/;"	p	signature:(const MV_Vector_$TYPE &x, const MV_Vector_$TYPE &y)
operator -	Mv++/mvvind.h	/^        MV_VecIndex operator-(int i)$/;"	f	class:MV_VecIndex	access:public	signature:(int i)
operator -	Mv++/tblas1.h	/^MV_Vector_TYPE operator-(const MV_Vector_TYPE &x, $/;"	p	signature:(const MV_Vector_TYPE &x, const MV_Vector_TYPE &y)
operator -	SparseLib++/tblas1.h	/^MV_Vector_TYPE operator-(const MV_Vector_TYPE &x, $/;"	p	signature:(const MV_Vector_TYPE &x, const MV_Vector_TYPE &y)
operator -=	Mv++/mvblas.h	/^MV_Vector<TYPE>& operator-=(MV_Vector<TYPE> &x, const MV_Vector<TYPE> &y)$/;"	f	signature:(MV_Vector<TYPE> &x, const MV_Vector<TYPE> &y)
operator -=	Mv++/mvblasc.h	/^MV_Vector_COMPLEX& operator-=(MV_Vector_COMPLEX &x, const MV_Vector_COMPLEX &y);$/;"	p	signature:(MV_Vector_COMPLEX &x, const MV_Vector_COMPLEX &y)
operator -=	Mv++/mvblasd.h	/^MV_Vector_double& operator-=(MV_Vector_double &x, const MV_Vector_double &y);$/;"	p	signature:(MV_Vector_double &x, const MV_Vector_double &y)
operator -=	Mv++/mvblasf.h	/^MV_Vector_float& operator-=(MV_Vector_float &x, const MV_Vector_float &y);$/;"	p	signature:(MV_Vector_float &x, const MV_Vector_float &y)
operator -=	Mv++/mvblasi.h	/^MV_Vector_int& operator-=(MV_Vector_int &x, const MV_Vector_int &y);$/;"	p	signature:(MV_Vector_int &x, const MV_Vector_int &y)
operator -=	Mv++/mvblast.h	/^MV_Vector_$TYPE& operator-=(MV_Vector_$TYPE &x, const MV_Vector_$TYPE &y);$/;"	p	signature:(MV_Vector_$TYPE &x, const MV_Vector_$TYPE &y)
operator -=	Mv++/mvvind.h	/^        MV_VecIndex& operator-=(int i)$/;"	f	class:MV_VecIndex	access:public	signature:(int i)
operator -=	Mv++/tblas1.h	/^MV_Vector_TYPE& operator-=(MV_Vector_TYPE &x, const MV_Vector_TYPE &y);$/;"	p	signature:(MV_Vector_TYPE &x, const MV_Vector_TYPE &y)
operator -=	SparseLib++/tblas1.h	/^MV_Vector_TYPE& operator-=(MV_Vector_TYPE &x, const MV_Vector_TYPE &y);$/;"	p	signature:(MV_Vector_TYPE &x, const MV_Vector_TYPE &y)
operator <<	Mv++/mvmc.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_COMPLEX &A);$/;"	p	class:MV_ColMat_COMPLEX	access:friend	signature:(std::ostream &s, const MV_ColMat_COMPLEX &A)
operator <<	Mv++/mvmd.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_double &A);$/;"	p	class:MV_ColMat_double	access:friend	signature:(std::ostream &s, const MV_ColMat_double &A)
operator <<	Mv++/mvmf.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_float &A);$/;"	p	class:MV_ColMat_float	access:friend	signature:(std::ostream &s, const MV_ColMat_float &A)
operator <<	Mv++/mvmi.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_int &A);$/;"	p	class:MV_ColMat_int	access:friend	signature:(std::ostream &s, const MV_ColMat_int &A)
operator <<	Mv++/mvmt.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_$TYPE &A);$/;"	p	class:MV_ColMat_$TYPE	access:friend	signature:(std::ostream &s, const MV_ColMat_$TYPE &A)
operator <<	Mv++/mvmtp.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat<TYPE> &A);$/;"	p	class:MV_ColMat	access:friend	signature:(std::ostream &s, const MV_ColMat<TYPE> &A)
operator <<	Mv++/mvmtp.h	/^ostream&   operator<<(ostream& s, const MV_ColMat<TYPE>& V)$/;"	f	signature:(ostream& s, const MV_ColMat<TYPE>& V)
operator <<	Mv++/mvvc.h	/^    friend std::ostream& operator<<(std::ostream &s, $/;"	p	class:MV_Vector_COMPLEX	access:friend	signature:(std::ostream &s, const MV_Vector_COMPLEX &A)
operator <<	Mv++/mvvd.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_Vector_double &A);$/;"	p	class:MV_Vector_double	access:friend	signature:(std::ostream &s, const MV_Vector_double &A)
operator <<	Mv++/mvvf.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_Vector_float &A);$/;"	p	class:MV_Vector_float	access:friend	signature:(std::ostream &s, const MV_Vector_float &A)
operator <<	Mv++/mvvi.h	/^    friend std::ostream & operator<<(std::ostream &s, const MV_Vector_int &A);$/;"	p	class:MV_Vector_int	access:friend	signature:(std::ostream &s, const MV_Vector_int &A)
operator <<	Mv++/mvvt.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_Vector_$TYPE &A);$/;"	p	class:MV_Vector_$TYPE	access:friend	signature:(std::ostream &s, const MV_Vector_$TYPE &A)
operator <<	Mv++/tmvmat.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_TYPE &A);$/;"	p	class:MV_ColMat_TYPE	access:friend	signature:(std::ostream &s, const MV_ColMat_TYPE &A)
operator <<	SparseLib++/compcol_double.h	/^std::ostream& operator << (std::ostream & os, const CompCol_Mat_double & mat);$/;"	p	signature:(std::ostream & os, const CompCol_Mat_double & mat)
operator <<	SparseLib++/comprow_double.h	/^std::ostream& operator << (std::ostream & os, const CompRow_Mat_double & mat);$/;"	p	signature:(std::ostream & os, const CompRow_Mat_double & mat)
operator <<	SparseLib++/coord_double.h	/^std::ostream& operator << (std::ostream & os, const Coord_Mat_double & mat);$/;"	p	signature:(std::ostream & os, const Coord_Mat_double & mat)
operator <<	SparseLib++/tmvec.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_Vector_TYPE &A);$/;"	p	class:MV_Vector_TYPE	access:friend	signature:(std::ostream &s, const MV_Vector_TYPE &A)
operator <<	SparseLib++/tmvmat.h	/^    friend std::ostream& operator<<(std::ostream &s, const MV_ColMat_TYPE &A);$/;"	p	class:MV_ColMat_TYPE	access:friend	signature:(std::ostream &s, const MV_ColMat_TYPE &A)
operator =	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX & operator=(const COMPLEX&);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(const COMPLEX&)
operator =	Mv++/mvmc.h	/^    MV_ColMat_COMPLEX & operator=(const MV_ColMat_COMPLEX&);$/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:(const MV_ColMat_COMPLEX&)
operator =	Mv++/mvmd.h	/^    MV_ColMat_double & operator=(const MV_ColMat_double&);$/;"	p	class:MV_ColMat_double	access:public	signature:(const MV_ColMat_double&)
operator =	Mv++/mvmd.h	/^    MV_ColMat_double & operator=(const double&);$/;"	p	class:MV_ColMat_double	access:public	signature:(const double&)
operator =	Mv++/mvmf.h	/^    MV_ColMat_float & operator=(const MV_ColMat_float&);$/;"	p	class:MV_ColMat_float	access:public	signature:(const MV_ColMat_float&)
operator =	Mv++/mvmf.h	/^    MV_ColMat_float & operator=(const float&);$/;"	p	class:MV_ColMat_float	access:public	signature:(const float&)
operator =	Mv++/mvmi.h	/^    MV_ColMat_int & operator=(const MV_ColMat_int&);$/;"	p	class:MV_ColMat_int	access:public	signature:(const MV_ColMat_int&)
operator =	Mv++/mvmi.h	/^    MV_ColMat_int & operator=(const int&);$/;"	p	class:MV_ColMat_int	access:public	signature:(const int&)
operator =	Mv++/mvmt.h	/^    MV_ColMat_$TYPE & operator=(const $TYPE&);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(const $TYPE&)
operator =	Mv++/mvmt.h	/^    MV_ColMat_$TYPE & operator=(const MV_ColMat_$TYPE&);$/;"	p	class:MV_ColMat_$TYPE	access:public	signature:(const MV_ColMat_$TYPE&)
operator =	Mv++/mvmtp.h	/^    MV_ColMat<TYPE> & operator=(const MV_ColMat<TYPE>&);$/;"	p	class:MV_ColMat	access:public	signature:(const MV_ColMat<TYPE>&)
operator =	Mv++/mvmtp.h	/^    MV_ColMat<TYPE> & operator=(const TYPE&);$/;"	p	class:MV_ColMat	access:public	signature:(const TYPE&)
operator =	Mv++/mvmtp.h	/^MV_ColMat<TYPE>& MV_ColMat<TYPE>::operator=(const MV_ColMat<TYPE> & m) $/;"	f	class:MV_ColMat	signature:(const MV_ColMat<TYPE> & m)
operator =	Mv++/mvmtp.h	/^MV_ColMat<TYPE>& MV_ColMat<TYPE>::operator=(const TYPE & s) $/;"	f	class:MV_ColMat	signature:(const TYPE & s)
operator =	Mv++/mvvc.h	/^    MV_Vector_COMPLEX & operator=(const COMPLEX&);$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const COMPLEX&)
operator =	Mv++/mvvc.h	/^    MV_Vector_COMPLEX & operator=(const MV_Vector_COMPLEX&);$/;"	p	class:MV_Vector_COMPLEX	access:public	signature:(const MV_Vector_COMPLEX&)
operator =	Mv++/mvvd.h	/^    MV_Vector_double & operator=(const MV_Vector_double&);$/;"	p	class:MV_Vector_double	access:public	signature:(const MV_Vector_double&)
operator =	Mv++/mvvd.h	/^    MV_Vector_double & operator=(const double&);$/;"	p	class:MV_Vector_double	access:public	signature:(const double&)
operator =	Mv++/mvvf.h	/^    MV_Vector_float & operator=(const MV_Vector_float&);$/;"	p	class:MV_Vector_float	access:public	signature:(const MV_Vector_float&)
operator =	Mv++/mvvf.h	/^    MV_Vector_float & operator=(const float&);$/;"	p	class:MV_Vector_float	access:public	signature:(const float&)
operator =	Mv++/mvvi.h	/^    MV_Vector_int & operator=(const MV_Vector_int&);$/;"	p	class:MV_Vector_int	access:public	signature:(const MV_Vector_int&)
operator =	Mv++/mvvi.h	/^    MV_Vector_int & operator=(const int&);$/;"	p	class:MV_Vector_int	access:public	signature:(const int&)
operator =	Mv++/mvvind.h	/^        MV_VecIndex& operator=(const MV_VecIndex& I)$/;"	f	class:MV_VecIndex	access:public	signature:(const MV_VecIndex& I)
operator =	Mv++/mvvt.h	/^    MV_Vector_$TYPE & operator=(const $TYPE&);$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const $TYPE&)
operator =	Mv++/mvvt.h	/^    MV_Vector_$TYPE & operator=(const MV_Vector_$TYPE&);$/;"	p	class:MV_Vector_$TYPE	access:public	signature:(const MV_Vector_$TYPE&)
operator =	Mv++/mvvtp.h	/^            MV_Vector<TYPE> & operator=(const MV_Vector<TYPE>&);$/;"	p	class:MV_Vector	access:public	signature:(const MV_Vector<TYPE>&)
operator =	Mv++/mvvtp.h	/^            MV_Vector<TYPE> & operator=(const TYPE&);$/;"	p	class:MV_Vector	access:public	signature:(const TYPE&)
operator =	Mv++/mvvtp.h	/^        FMV_Vector<TYPE>& operator=(const FMV_Vector<TYPE>& m);$/;"	p	class:FMV_Vector	access:public	signature:(const FMV_Vector<TYPE>& m)
operator =	Mv++/mvvtp.h	/^        FMV_Vector<TYPE>& operator=(const TYPE& m);$/;"	p	class:FMV_Vector	access:public	signature:(const TYPE& m)
operator =	Mv++/mvvtp.h	/^FMV_Vector<TYPE>& FMV_Vector<TYPE>::operator=( const FMV_Vector<TYPE>& m)$/;"	f	class:FMV_Vector	signature:( const FMV_Vector<TYPE>& m)
operator =	Mv++/mvvtp.h	/^FMV_Vector<TYPE>& FMV_Vector<TYPE>::operator=(const TYPE & m) $/;"	f	class:FMV_Vector	signature:(const TYPE & m)
operator =	Mv++/mvvtp.h	/^MV_Vector<TYPE>& MV_Vector<TYPE>::operator=(const MV_Vector<TYPE> & m) $/;"	f	class:MV_Vector	signature:(const MV_Vector<TYPE> & m)
operator =	Mv++/mvvtp.h	/^MV_Vector<TYPE>& MV_Vector<TYPE>::operator=(const TYPE & m) $/;"	f	class:MV_Vector	signature:(const TYPE & m)
operator =	Mv++/tmvmat.h	/^    MV_ColMat_TYPE & operator=(const MV_ColMat_TYPE&);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_ColMat_TYPE&)
operator =	Mv++/tmvmat.h	/^    MV_ColMat_TYPE & operator=(const TYPE&);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const TYPE&)
operator =	SparseLib++/compcol_double.h	/^       CompCol_Mat_double& operator=(const CompCol_Mat_double &C);$/;"	p	class:CompCol_Mat_double	access:public	signature:(const CompCol_Mat_double &C)
operator =	SparseLib++/comprow_double.h	/^       CompRow_Mat_double& operator=(const CompRow_Mat_double &R);$/;"	p	class:CompRow_Mat_double	access:public	signature:(const CompRow_Mat_double &R)
operator =	SparseLib++/coord_double.h	/^       Coord_Mat_double& operator=(const Coord_Mat_double &C);$/;"	p	class:Coord_Mat_double	access:public	signature:(const Coord_Mat_double &C)
operator =	SparseLib++/tmvec.h	/^            MV_Vector_TYPE & operator=(const MV_Vector_TYPE&);$/;"	p	class:MV_Vector_TYPE	access:public	signature:(const MV_Vector_TYPE&)
operator =	SparseLib++/tmvec.h	/^            MV_Vector_TYPE & operator=(const TYPE&);$/;"	p	class:MV_Vector_TYPE	access:public	signature:(const TYPE&)
operator =	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE & operator=(const MV_ColMat_TYPE&);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const MV_ColMat_TYPE&)
operator =	SparseLib++/tmvmat.h	/^    MV_ColMat_TYPE & operator=(const TYPE&);$/;"	p	class:MV_ColMat_TYPE	access:public	signature:(const TYPE&)
operator []	Mv++/mvvc.h	/^    COMPLEX&      operator[]( int i)$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:( int i)
operator []	Mv++/mvvc.h	/^    const  COMPLEX&       operator[]( int i) const $/;"	f	class:MV_Vector_COMPLEX	access:public	signature:( int i) const
operator []	Mv++/mvvd.h	/^    const  double&       operator[]( int i) const $/;"	f	class:MV_Vector_double	access:public	signature:( int i) const
operator []	Mv++/mvvd.h	/^    double&      operator[]( int i)$/;"	f	class:MV_Vector_double	access:public	signature:( int i)
operator []	Mv++/mvvf.h	/^    const  float&       operator[]( int i) const $/;"	f	class:MV_Vector_float	access:public	signature:( int i) const
operator []	Mv++/mvvf.h	/^    float&      operator[]( int i)$/;"	f	class:MV_Vector_float	access:public	signature:( int i)
operator []	Mv++/mvvi.h	/^    const  int&       operator[]( int i) const $/;"	f	class:MV_Vector_int	access:public	signature:( int i) const
operator []	Mv++/mvvi.h	/^    int&      operator[]( int i)$/;"	f	class:MV_Vector_int	access:public	signature:( int i)
operator []	Mv++/mvvt.h	/^    $TYPE&      operator[]( int i)$/;"	f	class:MV_Vector_$TYPE	access:public	signature:( int i)
operator []	Mv++/mvvt.h	/^    const  $TYPE&       operator[]( int i) const $/;"	f	class:MV_Vector_$TYPE	access:public	signature:( int i) const
operator []	Mv++/mvvtp.h	/^    inline        TYPE&     operator[]( int i)$/;"	f	class:MV_Vector	access:public	signature:( int i)
operator []	Mv++/mvvtp.h	/^    inline      const  TYPE&    operator[]( int i) const $/;"	f	class:MV_Vector	access:public	signature:( int i) const
operator []	SparseLib++/tmvec.h	/^    TYPE&       operator[](unsigned int i)$/;"	f	class:MV_Vector_TYPE	access:public	signature:(unsigned int i)
operator []	SparseLib++/tmvec.h	/^    const  TYPE&    operator[](unsigned int i) const $/;"	f	class:MV_Vector_TYPE	access:public	signature:(unsigned int i) const
p_	Mv++/mvvc.h	/^           COMPLEX *p_;$/;"	m	class:MV_Vector_COMPLEX	access:protected
p_	Mv++/mvvd.h	/^           double *p_;$/;"	m	class:MV_Vector_double	access:protected
p_	Mv++/mvvf.h	/^           float *p_;$/;"	m	class:MV_Vector_float	access:protected
p_	Mv++/mvvi.h	/^           int *p_;$/;"	m	class:MV_Vector_int	access:protected
p_	Mv++/mvvt.h	/^           $TYPE *p_;$/;"	m	class:MV_Vector_$TYPE	access:protected
p_	Mv++/mvvtp.h	/^           TYPE *p_;$/;"	m	class:MV_Vector	access:protected
p_	SparseLib++/tmvec.h	/^           TYPE *p_;$/;"	m	class:MV_Vector_TYPE	access:protected
pntr_	SparseLib++/icpre_double.h	/^  VECTOR_int    pntr_;$/;"	m	class:ICPreconditioner_double	access:private
pressure	pressureCorrection.h	/^    const Array<real,2>& pressure; $/;"	m	class:PressureCorrect	access:private
readHB	SparseLib++/compcol_double.h	/^void readHB(const char *c, CompCol_Mat_double &M);$/;"	p	signature:(const char *c, CompCol_Mat_double &M)
readHB_info	SparseLib++/iohb.h	/^void  readHB_info       __ProtoGlarp__(( const char*, int*, int*, int*, int* ));$/;"	p	signature:( const char*, int*, int*, int*, int* )
readHB_mat	SparseLib++/iohb_double.h	/^CompCol_Mat_double& readHB_mat(const char *filename, CompCol_Mat_double *A);$/;"	p	signature:(const char *filename, CompCol_Mat_double *A)
readHB_mat	SparseLib++/iohb_double.h	/^CompRow_Mat_double& readHB_mat(const char *filename, CompRow_Mat_double *A);$/;"	p	signature:(const char *filename, CompRow_Mat_double *A)
readHB_mat	SparseLib++/iohb_double.h	/^Coord_Mat_double& readHB_mat(const char *filename, Coord_Mat_double *A);$/;"	p	signature:(const char *filename, Coord_Mat_double *A)
readHB_mat_double	SparseLib++/iohb.h	/^void readHB_mat_double  __ProtoGlarp__(( const char*, int*, int*, double*));$/;"	p	signature:( const char*, int*, int*, double*)
readHB_mat_float	SparseLib++/iohb.h	/^void readHB_mat_float   __ProtoGlarp__(( const char*, int*, int*, float*));$/;"	p	signature:( const char*, int*, int*, float*)
readHB_rhs	SparseLib++/iohb_double.h	/^VECTOR_double& readHB_rhs(const char *filename, VECTOR_double *b, int j=0);$/;"	p	signature:(const char *filename, VECTOR_double *b, int j=0)
readHB_rhs_double	SparseLib++/iohb.h	/^void readHB_rhs_double __ProtoGlarp__(( const char*, double*, int));$/;"	p	signature:( const char*, double*, int)
readHB_rhs_float	SparseLib++/iohb.h	/^void readHB_rhs_float  __ProtoGlarp__(( const char*, float*, int));$/;"	p	signature:( const char*, float*, int)
readtxtfile_mat	SparseLib++/iotext_double.h	/^void readtxtfile_mat(const char *filename, CompCol_Mat_double *A);$/;"	p	signature:(const char *filename, CompCol_Mat_double *A)
readtxtfile_mat	SparseLib++/iotext_double.h	/^void readtxtfile_mat(const char *filename, CompRow_Mat_double *A);$/;"	p	signature:(const char *filename, CompRow_Mat_double *A)
readtxtfile_mat	SparseLib++/iotext_double.h	/^void readtxtfile_mat(const char *filename, Coord_Mat_double *A);$/;"	p	signature:(const char *filename, Coord_Mat_double *A)
readtxtfile_mat	SparseLib++/iotext_type.h	/^void readtxtfile_mat(const char *filename, CompCol_Mat_TYPE &A);$/;"	p	signature:(const char *filename, CompCol_Mat_TYPE &A)
readtxtfile_mat	SparseLib++/iotext_type.h	/^void readtxtfile_mat(const char *filename, CompRow_Mat_TYPE &A);$/;"	p	signature:(const char *filename, CompRow_Mat_TYPE &A)
readtxtfile_mat	SparseLib++/iotext_type.h	/^void readtxtfile_mat(const char *filename, Coord_Mat_TYPE &A);$/;"	p	signature:(const char *filename, Coord_Mat_TYPE &A)
readtxtfile_vec	Mv++/iotext.h	/^int readtxtfile_vec(const char *filename, MV_Vector_double *Aptr);$/;"	p	signature:(const char *filename, MV_Vector_double *Aptr)
readtxtfile_vec	Mv++/iotext.h	/^int readtxtfile_vec(const char *filename, MV_Vector_int *Aptr);$/;"	p	signature:(const char *filename, MV_Vector_int *Aptr)
readtxtfile_vec	SparseLib++/iotext.h	/^int readtxtfile_vec(const char *filename, MV_Vector_double *Aptr);$/;"	p	signature:(const char *filename, MV_Vector_double *Aptr)
readtxtfile_vec	SparseLib++/iotext.h	/^int readtxtfile_vec(const char *filename, MV_Vector_int *Aptr);$/;"	p	signature:(const char *filename, MV_Vector_int *Aptr)
real	presicion.h	4;"	d
ref	Mv++/mvmc.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_COMPLEX	access:public	signature:() const
ref	Mv++/mvmd.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_double	access:public	signature:() const
ref	Mv++/mvmf.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_float	access:public	signature:() const
ref	Mv++/mvmi.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_int	access:public	signature:() const
ref	Mv++/mvmrf.h	/^    enum ref_type  { ref = 1};$/;"	e	enum:MV_Matrix_::ref_type
ref	Mv++/mvmt.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_$TYPE	access:public	signature:() const
ref	Mv++/mvmtp.h	/^    enum ref_type {  ref = 1 };$/;"	e	enum:Matrix_::ref_type
ref	Mv++/mvmtp.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat	access:public	signature:() const
ref	Mv++/mvvc.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:() const
ref	Mv++/mvvd.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_double	access:public	signature:() const
ref	Mv++/mvvf.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_float	access:public	signature:() const
ref	Mv++/mvvi.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_int	access:public	signature:() const
ref	Mv++/mvvrf.h	/^    enum ref_type  { ref = 1};$/;"	e	enum:MV_Vector_::ref_type
ref	Mv++/mvvt.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_$TYPE	access:public	signature:() const
ref	Mv++/mvvtp.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector	access:public	signature:() const
ref	Mv++/tmvmat.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_TYPE	access:public	signature:() const
ref	SparseLib++/tmvec.h	/^    inline int                      ref() const { return  ref_;}$/;"	f	class:MV_Vector_TYPE	access:public	signature:() const
ref	SparseLib++/tmvmat.h	/^    int ref() const { return ref_;}$/;"	f	class:MV_ColMat_TYPE	access:public	signature:() const
ref_	Mv++/mvmc.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_COMPLEX	access:private
ref_	Mv++/mvmd.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_double	access:private
ref_	Mv++/mvmf.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_float	access:private
ref_	Mv++/mvmi.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_int	access:private
ref_	Mv++/mvmt.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_$TYPE	access:private
ref_	Mv++/mvmtp.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat	access:private
ref_	Mv++/mvvc.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_COMPLEX	access:protected
ref_	Mv++/mvvd.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_double	access:protected
ref_	Mv++/mvvf.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_float	access:protected
ref_	Mv++/mvvi.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_int	access:protected
ref_	Mv++/mvvt.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_$TYPE	access:protected
ref_	Mv++/mvvtp.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector	access:protected
ref_	Mv++/tmvmat.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_TYPE	access:private
ref_	SparseLib++/tmvec.h	/^           int ref_;  \/\/ 0 or 1; does this own its own memory space?$/;"	m	class:MV_Vector_TYPE	access:protected
ref_	SparseLib++/tmvmat.h	/^           int ref_;   \/\/ true if this is declared as a reference vector,$/;"	m	class:MV_ColMat_TYPE	access:private
ref_type	Mv++/mvmrf.h	/^    enum ref_type  { ref = 1};$/;"	g	struct:MV_Matrix_	access:public
ref_type	Mv++/mvmtp.h	/^    enum ref_type {  ref = 1 };$/;"	g	struct:Matrix_	access:public
ref_type	Mv++/mvvrf.h	/^    enum ref_type  { ref = 1};$/;"	g	struct:MV_Vector_	access:public
restart	pressureCorrection.h	/^    int maxit, restart;$/;"	m	class:PressureCorrect	access:private
row2	pressureCorrection.h	/^    int *row2;$/;"	m	class:PressureCorrect	access:private
row_ind	SparseLib++/compcol_double.h	/^       const int&         row_ind(int i) const { return rowind_(i); }$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i) const
row_ind	SparseLib++/compcol_double.h	/^       int&         row_ind(int i) { return rowind_(i); }$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i)
row_ind	SparseLib++/coord_double.h	/^       const int&         row_ind(int i) const { return rowind_(i); }$/;"	f	class:Coord_Mat_double	access:public	signature:(int i) const
row_ind	SparseLib++/coord_double.h	/^       int&         row_ind(int i) { return rowind_(i); }$/;"	f	class:Coord_Mat_double	access:public	signature:(int i)
row_ptr	SparseLib++/comprow_double.h	/^       const int&         row_ptr(int i) const { return rowptr_(i); }$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i) const
row_ptr	SparseLib++/comprow_double.h	/^       int&         row_ptr(int i) { return rowptr_(i); }$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i)
rowind_	SparseLib++/compcol_double.h	/^       VECTOR_int    rowind_;    \/\/ row_ind (nz_ elements)$/;"	m	class:CompCol_Mat_double	access:private
rowind_	SparseLib++/coord_double.h	/^       VECTOR_int    rowind_;    \/\/ row_ind (nz_ elements)$/;"	m	class:Coord_Mat_double	access:private
rowptr_	SparseLib++/comprow_double.h	/^       VECTOR_int    rowptr_;    \/\/ row_ptr (dim_[0]+1 elements)$/;"	m	class:CompRow_Mat_double	access:private
scoomm	SparseLib++/spblas.h	/^void F77NAME(scoomm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &k, const float &alpha, const int descra[], const float *val, const int *indx, const int *jndx, const int &nnz, const float *b, const int &ldb, const float &beta, float *c, const int &ldc, float *work, const int &lwork)
scscmm	SparseLib++/spblas.h	/^void F77NAME(scscmm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &k, const float &alpha, const int descra[], const float *val, const int *indx, const int *pntr, const float *b, int &ldb, const float &beta, float *c, const int &ldc, float *work, const int &lwork)
scscsm	SparseLib++/spblas.h	/^void F77NAME(scscsm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &unitd, const float *dv, const float &alpha, const int descra[], const float *val, const int *indx, const int *pntr, const float *b, int &ldb, const float &beta, float *c, const int &ldc, float *work, const int &lwork)
scsrmm	SparseLib++/spblas.h	/^void F77NAME(scsrmm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &k, const float &alpha, const int descra[], const float *val, const int *indx, const int *pntr, const float *b, int &ldb, const float &beta, float *c, const int &ldc, float *work, const int &lwork)
scsrsm	SparseLib++/spblas.h	/^void F77NAME(scsrsm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &unitd, const float *dv, const float &alpha, const int descra[], const float *val, const int *indx, const int *pntr, const float *b, int &ldb, const float &beta, float *c, const int &ldc, float *work, const int &lwork)
set	SparseLib++/compcol_double.h	/^       double&      set(int i, int j);               $/;"	p	class:CompCol_Mat_double	access:public	signature:(int i, int j)
set	SparseLib++/comprow_double.h	/^       double&      set(int i, int j);$/;"	p	class:CompRow_Mat_double	access:public	signature:(int i, int j)
set	SparseLib++/coord_double.h	/^       double&      set(int i, int j);$/;"	p	class:Coord_Mat_double	access:public	signature:(int i, int j)
setField	Staggered.h	/^	inline void setField(Array<Tprec,2> &A)$/;"	f	class:Staggered	access:public	signature:(Array<Tprec,2> &A)
setValues	Staggered.h	/^	inline void setValues();$/;"	p	class:Staggered	access:public	signature:()
setValues	Staggered.h	/^inline void Interpolation<Tprec, Zone>::setValues(){$/;"	f	class:Interpolation	signature:()
size	Mv++/mvmc.h	/^     int            size(int i) const { return dim(i);} $/;"	f	class:MV_ColMat_COMPLEX	access:public	signature:(int i) const
size	Mv++/mvmd.h	/^     int            size(int i) const { return dim(i);} $/;"	f	class:MV_ColMat_double	access:public	signature:(int i) const
size	Mv++/mvmf.h	/^     int            size(int i) const { return dim(i);} $/;"	f	class:MV_ColMat_float	access:public	signature:(int i) const
size	Mv++/mvmi.h	/^     int            size(int i) const { return dim(i);} $/;"	f	class:MV_ColMat_int	access:public	signature:(int i) const
size	Mv++/mvmt.h	/^     int            size(int i) const { return dim(i);} $/;"	f	class:MV_ColMat_$TYPE	access:public	signature:(int i) const
size	Mv++/mvmtp.h	/^     int            size(int i) const; $/;"	p	class:MV_ColMat	access:public	signature:(int i) const
size	Mv++/mvmtp.h	/^ int MV_ColMat<TYPE>::size(int i) const $/;"	f	class:MV_ColMat	signature:(int i) const
size	Mv++/mvvc.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector_COMPLEX	access:public	signature:() const
size	Mv++/mvvd.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector_double	access:public	signature:() const
size	Mv++/mvvf.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector_float	access:public	signature:() const
size	Mv++/mvvi.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector_int	access:public	signature:() const
size	Mv++/mvvt.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector_$TYPE	access:public	signature:() const
size	Mv++/mvvtp.h	/^    inline  int             size() const { return dim_;}$/;"	f	class:MV_Vector	access:public	signature:() const
size	Mv++/tmvmat.h	/^     int            size(int i) const; $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(int i) const
size	SparseLib++/compcol_double.h	/^       int          size(int i) const {return dim_[i];};$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i) const
size	SparseLib++/comprow_double.h	/^       int          size(int i) const {return dim_[i];};$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i) const
size	SparseLib++/coord_double.h	/^       int          size(int i) const {return dim_[i];};$/;"	f	class:Coord_Mat_double	access:public	signature:(int i) const
size	SparseLib++/tmvec.h	/^    inline unsigned int             size() const { return dim_;}$/;"	f	class:MV_Vector_TYPE	access:public	signature:() const
size	SparseLib++/tmvmat.h	/^    unsigned int            size(int i) const; $/;"	p	class:MV_ColMat_TYPE	access:public	signature:(int i) const
solve	SparseLib++/diagpre_double.h	/^  VECTOR_double solve (const VECTOR_double &x) const;$/;"	p	class:DiagPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
solve	SparseLib++/icpre_double.h	/^  VECTOR_double     solve(const VECTOR_double &x) const;$/;"	p	class:ICPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
solve	SparseLib++/ilupre_double.h	/^  VECTOR_double     solve(const VECTOR_double &x) const;$/;"	p	class:CompCol_ILUPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
solve	SparseLib++/ilupre_double.h	/^  VECTOR_double     solve(const VECTOR_double &x) const;$/;"	p	class:CompRow_ILUPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
start	Mv++/mvvind.h	/^        int start() const { return (all_==1) ? 0 : start_;}$/;"	f	class:MV_VecIndex	access:public	signature:() const
startPosX	Mesh.h	/^    real startPosX, startPosY; \/\/Start position on the mesh$/;"	m	class:MeshTool::MeshBlock	access:private
startPosY	Mesh.h	/^    real startPosX, startPosY; \/\/Start position on the mesh$/;"	m	class:MeshTool::MeshBlock	access:private
start_	Mv++/mvvind.h	/^             int start_;$/;"	m	class:MV_VecIndex	access:private
substr	SparseLib++/minstr.h	/^char* substr(char * S, int pos, int len);$/;"	p	signature:(char * S, int pos, int len)
substr_after	SparseLib++/minstr.h	/^char* substr_after(char * S, char M);$/;"	p	signature:(char * S, char M)
substr_before	SparseLib++/minstr.h	/^char* substr_before(char * S, char M);$/;"	p	signature:(char * S, char M)
substr_through	SparseLib++/minstr.h	/^char* substr_through(char * S, char M);$/;"	p	signature:(char * S, char M)
tol	pressureCorrection.h	/^    real tol;$/;"	m	class:PressureCorrect	access:private
trans_mult	SparseLib++/compcol_double.h	/^       VECTOR_double trans_mult(const VECTOR_double &x) const;$/;"	p	class:CompCol_Mat_double	access:public	signature:(const VECTOR_double &x) const
trans_mult	SparseLib++/comprow_double.h	/^       VECTOR_double trans_mult(const VECTOR_double &x) const;$/;"	p	class:CompRow_Mat_double	access:public	signature:(const VECTOR_double &x) const
trans_mult	SparseLib++/coord_double.h	/^       VECTOR_double trans_mult(const VECTOR_double &x) const;$/;"	p	class:Coord_Mat_double	access:public	signature:(const VECTOR_double &x) const
trans_solve	SparseLib++/diagpre_double.h	/^  VECTOR_double trans_solve (const VECTOR_double &x) const;$/;"	p	class:DiagPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
trans_solve	SparseLib++/icpre_double.h	/^  VECTOR_double     trans_solve(const VECTOR_double &x) const;$/;"	p	class:ICPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
trans_solve	SparseLib++/ilupre_double.h	/^  VECTOR_double     trans_solve(const VECTOR_double &x) const;$/;"	p	class:CompCol_ILUPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
trans_solve	SparseLib++/ilupre_double.h	/^  VECTOR_double     trans_solve(const VECTOR_double &x) const;$/;"	p	class:CompRow_ILUPreconditioner_double	access:public	signature:(const VECTOR_double &x) const
typeDim	Staggered.h	/^	inline void IJ_Ground(typeDim<Zone>());$/;"	p	class:Staggered	access:public	signature:()
typeDim	Staggered.h	/^	inline void Init_Boundary(typeDim<Zone>(),Array<Tprec,2> );$/;"	p	class:Staggered	access:public	signature:()
typeDim	Staggered.h	/^	inline void P_Ground(typeDim<Zone>());$/;"	p	class:Staggered	access:public	signature:()
uBoundary	pressureCorrection.h	/^    const Array<real,2>& uBoundary;    $/;"	m	class:PressureCorrect	access:private
uS	pressureCorrection.h	/^    const Array<real,2>& uS;$/;"	m	class:PressureCorrect	access:private
u_Velocity	explicitDeriv.h	/^	const Array<real,2>& u_Velocity;$/;"	m	class:ExplicitDeriv	access:private
u_colind_	SparseLib++/ilupre_double.h	/^  VECTOR_int    u_colind_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
u_colptr_	SparseLib++/ilupre_double.h	/^  VECTOR_int    u_colptr_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
u_nz_	SparseLib++/ilupre_double.h	/^  int u_nz_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
u_nz_	SparseLib++/ilupre_double.h	/^  int u_nz_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
u_rowind_	SparseLib++/ilupre_double.h	/^  VECTOR_int    u_rowind_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
u_rowptr_	SparseLib++/ilupre_double.h	/^  VECTOR_int    u_rowptr_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
u_val_	SparseLib++/ilupre_double.h	/^  VECTOR_double u_val_;$/;"	m	class:CompCol_ILUPreconditioner_double	access:private
u_val_	SparseLib++/ilupre_double.h	/^  VECTOR_double u_val_;$/;"	m	class:CompRow_ILUPreconditioner_double	access:private
upcase	SparseLib++/minstr.h	/^void upcase(char * S);$/;"	p	signature:(char * S)
vBoundary	pressureCorrection.h	/^    const Array<real,2>& vBoundary;    $/;"	m	class:PressureCorrect	access:private
vS	pressureCorrection.h	/^    const Array<real,2>& vS;$/;"	m	class:PressureCorrect	access:private
v_	Mv++/mvmc.h	/^           MV_Vector_COMPLEX v_;$/;"	m	class:MV_ColMat_COMPLEX	access:private
v_	Mv++/mvmd.h	/^           MV_Vector_double v_;$/;"	m	class:MV_ColMat_double	access:private
v_	Mv++/mvmf.h	/^           MV_Vector_float v_;$/;"	m	class:MV_ColMat_float	access:private
v_	Mv++/mvmi.h	/^           MV_Vector_int v_;$/;"	m	class:MV_ColMat_int	access:private
v_	Mv++/mvmt.h	/^           MV_Vector_$TYPE v_;$/;"	m	class:MV_ColMat_$TYPE	access:private
v_	Mv++/mvmtp.h	/^           MV_Vector<TYPE> v_;$/;"	m	class:MV_ColMat	access:private
v_	Mv++/tmvmat.h	/^           MV_Vector_TYPE v_;$/;"	m	class:MV_ColMat_TYPE	access:private
v_	SparseLib++/tmvmat.h	/^           MV_Vector_TYPE v_;$/;"	m	class:MV_ColMat_TYPE	access:private
v_Velocity	explicitDeriv.h	/^	const Array<real,2>& v_Velocity;$/;"	m	class:ExplicitDeriv	access:private
val	SparseLib++/compcol_double.h	/^       const double&      val(int i) const { return val_(i); }$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i) const
val	SparseLib++/compcol_double.h	/^       double&      val(int i) { return val_(i); }$/;"	f	class:CompCol_Mat_double	access:public	signature:(int i)
val	SparseLib++/comprow_double.h	/^       const double&      val(int i) const { return val_(i); }$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i) const
val	SparseLib++/comprow_double.h	/^       double&      val(int i) { return val_(i); }$/;"	f	class:CompRow_Mat_double	access:public	signature:(int i)
val	SparseLib++/coord_double.h	/^       const double&      val(int i) const { return val_(i); }$/;"	f	class:Coord_Mat_double	access:public	signature:(int i) const
val	SparseLib++/coord_double.h	/^       double&      val(int i) { return val_(i); }$/;"	f	class:Coord_Mat_double	access:public	signature:(int i)
val2	pressureCorrection.h	/^    real *val2;$/;"	m	class:PressureCorrect	access:private
val_	SparseLib++/compcol_double.h	/^       VECTOR_double     val_;       \/\/ data values (nz_ elements)$/;"	m	class:CompCol_Mat_double	access:private
val_	SparseLib++/comprow_double.h	/^       VECTOR_double val_;       \/\/ data values (nz_ elements)$/;"	m	class:CompRow_Mat_double	access:private
val_	SparseLib++/coord_double.h	/^       VECTOR_double     val_;       \/\/ data values (nz_ elements)$/;"	m	class:Coord_Mat_double	access:private
val_	SparseLib++/icpre_double.h	/^  VECTOR_double val_;$/;"	m	class:ICPreconditioner_double	access:private
vector_defs_H	Mv++/vecdefs.h	31;"	d
writeHB_mat	SparseLib++/iohb_double.h	/^const CompCol_Mat_double& writeHB_mat(const char *filename, $/;"	p	signature:(const char *filename, const CompCol_Mat_double &A, int nrhs=0, const double *rhs = 0, const char *title=0, const char *key=0)
writeHB_mat	SparseLib++/iohb_double.h	/^const CompRow_Mat_double& writeHB_mat(const char *filename, $/;"	p	signature:(const char *filename, const CompRow_Mat_double &A, int nrhs=0, const double* rhs = 0, const char *title=0, const char *key=0)
writeHB_mat	SparseLib++/iohb_double.h	/^const Coord_Mat_double& writeHB_mat(const char *filename, $/;"	p	signature:(const char *filename, const Coord_Mat_double &A, int nrhs=0, const double* rhs=0, const char *title=0, const char *key=0)
writeHB_mat_double	SparseLib++/iohb.h	/^void writeHB_mat_double $/;"	p	signature:( const char*, int, int, int, const int*, const int*, const double*, int, const double*, const char*, const char*)
writeHB_mat_float	SparseLib++/iohb.h	/^void writeHB_mat_float  $/;"	p	signature:( const char*, int, int, int, const int*, const int*, const float*, int, const double*, const char*, const char*)
writetxtfile_mat	SparseLib++/iotext_double.h	/^void writetxtfile_mat(const char *filename, const CompCol_Mat_double &A);$/;"	p	signature:(const char *filename, const CompCol_Mat_double &A)
writetxtfile_mat	SparseLib++/iotext_double.h	/^void writetxtfile_mat(const char *filename, const CompRow_Mat_double &A);$/;"	p	signature:(const char *filename, const CompRow_Mat_double &A)
writetxtfile_mat	SparseLib++/iotext_double.h	/^void writetxtfile_mat(const char *filename, const Coord_Mat_double &A);$/;"	p	signature:(const char *filename, const Coord_Mat_double &A)
writetxtfile_mat	SparseLib++/iotext_type.h	/^void writetxtfile_mat(const char *filename, CompCol_Mat_TYPE &A);$/;"	p	signature:(const char *filename, CompCol_Mat_TYPE &A)
writetxtfile_mat	SparseLib++/iotext_type.h	/^void writetxtfile_mat(const char *filename, CompRow_Mat_TYPE &A);$/;"	p	signature:(const char *filename, CompRow_Mat_TYPE &A)
writetxtfile_mat	SparseLib++/iotext_type.h	/^void writetxtfile_mat(const char *filename, Coord_Mat_TYPE &A);$/;"	p	signature:(const char *filename, Coord_Mat_TYPE &A)
writetxtfile_vec	Mv++/iotext.h	/^int writetxtfile_vec(const char *filename, const MV_Vector_double &A);$/;"	p	signature:(const char *filename, const MV_Vector_double &A)
writetxtfile_vec	Mv++/iotext.h	/^int writetxtfile_vec(const char *filename, const MV_Vector_int &A);$/;"	p	signature:(const char *filename, const MV_Vector_int &A)
writetxtfile_vec	SparseLib++/iotext.h	/^int writetxtfile_vec(const char *filename, const MV_Vector_double &A);$/;"	p	signature:(const char *filename, const MV_Vector_double &A)
writetxtfile_vec	SparseLib++/iotext.h	/^int writetxtfile_vec(const char *filename, const MV_Vector_int &A);$/;"	p	signature:(const char *filename, const MV_Vector_int &A)
x	pressureCorrection.h	/^    VECTOR_double x, b;$/;"	m	class:PressureCorrect	access:private
zcoomm	SparseLib++/spblas.h	/^void F77NAME(zcoomm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &k, const complex &alpha, const int descra[], const complex *val, const int *indx, const int *jndx, const int &nnz, const complex *b, const int &ldb, const complex &beta, complex *c, const int &ldc, complex *work, const int &lwork)
zcscmm	SparseLib++/spblas.h	/^void F77NAME(zcscmm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &k, const complex &alpha, const int descra[], const complex *val, const int *indx, const int *pntr, const complex *b, int &ldb, const complex &beta, complex *c, const int &ldc, complex *work, const int &lwork)
zcscsm	SparseLib++/spblas.h	/^void F77NAME(zcscsm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &unitd, const complex *dv, const complex &alpha, const int descra[], const complex *val, const int *indx, const int *pntr, const complex *b, int &ldb, const complex &beta, complex *c, const int &ldc, complex *work, const int &lwork)
zcsrmm	SparseLib++/spblas.h	/^void F77NAME(zcsrmm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &k, const complex &alpha, const int descra[], const complex *val, const int *indx, const int *pntr, const complex *b, int &ldb, const complex &beta, complex *c, const int &ldc, complex *work, const int &lwork)
zcsrsm	SparseLib++/spblas.h	/^void F77NAME(zcsrsm)$/;"	p	signature:(const int &transa, const int &m, const int &n, const int &unitd, const complex *dv, const complex &alpha, const int descra[], const complex *val, const int *indx, const int *pntr, const complex *b, int &ldb, const complex &beta, complex *c, const int &ldc, complex *work, const int &lwork)
~CompCol_ILUPreconditioner_double	SparseLib++/ilupre_double.h	/^  ~CompCol_ILUPreconditioner_double(void){};$/;"	f	class:CompCol_ILUPreconditioner_double	access:public	signature:(void)
~CompCol_Mat_double	SparseLib++/compcol_double.h	/^      ~CompCol_Mat_double() {};$/;"	f	class:CompCol_Mat_double	access:public	signature:()
~CompRow_ILUPreconditioner_double	SparseLib++/ilupre_double.h	/^  ~CompRow_ILUPreconditioner_double(void){};$/;"	f	class:CompRow_ILUPreconditioner_double	access:public	signature:(void)
~CompRow_Mat_double	SparseLib++/comprow_double.h	/^      ~CompRow_Mat_double() {};$/;"	f	class:CompRow_Mat_double	access:public	signature:()
~Coord_Mat_double	SparseLib++/coord_double.h	/^      ~Coord_Mat_double() {};$/;"	f	class:Coord_Mat_double	access:public	signature:()
~DiagPreconditioner_double	SparseLib++/diagpre_double.h	/^  ~DiagPreconditioner_double (void) { };$/;"	f	class:DiagPreconditioner_double	access:public	signature:(void)
~ICPreconditioner_double	SparseLib++/icpre_double.h	/^  ~ICPreconditioner_double(void){};$/;"	f	class:ICPreconditioner_double	access:public	signature:(void)
~MV_ColMat	Mv++/mvmtp.h	/^    ~MV_ColMat();                              $/;"	p	class:MV_ColMat	access:public	signature:()
~MV_ColMat	Mv++/mvmtp.h	/^MV_ColMat<TYPE>::~MV_ColMat() {}$/;"	f	class:MV_ColMat	signature:()
~MV_ColMat_$TYPE	Mv++/mvmt.h	/^    ~MV_ColMat_$TYPE();                              $/;"	p	class:MV_ColMat_$TYPE	access:public	signature:()
~MV_ColMat_COMPLEX	Mv++/mvmc.h	/^    ~MV_ColMat_COMPLEX();                              $/;"	p	class:MV_ColMat_COMPLEX	access:public	signature:()
~MV_ColMat_TYPE	Mv++/tmvmat.h	/^    ~MV_ColMat_TYPE();                              $/;"	p	class:MV_ColMat_TYPE	access:public	signature:()
~MV_ColMat_TYPE	SparseLib++/tmvmat.h	/^    ~MV_ColMat_TYPE();                              $/;"	p	class:MV_ColMat_TYPE	access:public	signature:()
~MV_ColMat_double	Mv++/mvmd.h	/^    ~MV_ColMat_double();                              $/;"	p	class:MV_ColMat_double	access:public	signature:()
~MV_ColMat_float	Mv++/mvmf.h	/^    ~MV_ColMat_float();                              $/;"	p	class:MV_ColMat_float	access:public	signature:()
~MV_ColMat_int	Mv++/mvmi.h	/^    ~MV_ColMat_int();                              $/;"	p	class:MV_ColMat_int	access:public	signature:()
~MV_Vector	Mv++/mvvtp.h	/^    ~MV_Vector();                              $/;"	p	class:MV_Vector	access:public	signature:()
~MV_Vector	Mv++/mvvtp.h	/^MV_Vector<TYPE>::~MV_Vector()$/;"	f	class:MV_Vector	signature:()
~MV_Vector_$TYPE	Mv++/mvvt.h	/^    ~MV_Vector_$TYPE();                              $/;"	p	class:MV_Vector_$TYPE	access:public	signature:()
~MV_Vector_COMPLEX	Mv++/mvvc.h	/^    ~MV_Vector_COMPLEX();                              $/;"	p	class:MV_Vector_COMPLEX	access:public	signature:()
~MV_Vector_TYPE	SparseLib++/tmvec.h	/^    ~MV_Vector_TYPE();                              $/;"	p	class:MV_Vector_TYPE	access:public	signature:()
~MV_Vector_double	Mv++/mvvd.h	/^    ~MV_Vector_double();                              $/;"	p	class:MV_Vector_double	access:public	signature:()
~MV_Vector_float	Mv++/mvvf.h	/^    ~MV_Vector_float();                              $/;"	p	class:MV_Vector_float	access:public	signature:()
~MV_Vector_int	Mv++/mvvi.h	/^    ~MV_Vector_int();                              $/;"	p	class:MV_Vector_int	access:public	signature:()
